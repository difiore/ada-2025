[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Data Analysis",
    "section": "",
    "text": "Overview\n\n\n\n\n\n\n\n\n\n\n\nThis course provides an overview of methods and tools for applied data analysis. It is geared toward research in biological anthropology and evolutionary biology, but the material covered is applicable to a wide range of natural, social science, and humanities disciplines. Students will receive practical, hands-on training in various data science tools and workflows, including data acquisition and wrangling, exploratory data analysis and visualization, statistical analysis and interpretation, and literate programming and version control.\nStatistical topics to be covered include basic descriptive and inferential statistics, hypothesis testing, basic regression and ANOVA, generalized linear modeling, and mixed effects modeling. Statistical inference will be considered from a frequentist perspective, introducing both parametric and resampling techniques. If we have time, I will also introduce a Bayesian perspective, although this approach will not be tackled at a particularly advanced level. Additional methods and tools will also be covered based on time and student interest (e.g., geospatial data analysis, phylogenetic comparative methods, social network analysis, text corpus construction and mining, population genetic analysis) and on how quickly the class feels we can move forward.\nThe course particularly emphasizes the development of solid data science skills, focusing on the practical side of data manipulation, analysis, and visualization. Students will learn to use the statistical programming language R as well as many other useful software tools (e.g., shell scripts, text editors, databases, query languages, and version control systems).\n\n\nThis class is supported by DataCamp, an intuitive online learning platform for data science. Learn R, Python, and SQL the way you learn best, through a combination of short expert videos and hands-on-the-keyboard exercises. Take over 100+ courses by expert instructors on topics such as importing data, data visualization or machine learning and learn faster through immediate and personalised feedback on every exercise.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "00-logistics.html",
    "href": "00-logistics.html",
    "title": "Course Logistics",
    "section": "",
    "text": "Learning Objectives\nAt the conclusion of this course, students will be able to:",
    "crumbs": [
      "Preliminaries",
      "Course Logistics"
    ]
  },
  {
    "objectID": "00-logistics.html#learning-objectives",
    "href": "00-logistics.html#learning-objectives",
    "title": "Course Logistics",
    "section": "",
    "text": "understand and articulate key concepts and methods in applied data science; acquire, manipulate, and manage data from varied sources; conduct exploratory data analyses; test statistical hypotheses; build models to classify and make predictions about data; and evaluate model performance;\nuse modern tools for data analysis (e.g., the Unix command line, version control systems, the R programming environment, web APIs) and apply “best practices” in data science and data management;\ninteract with both local and remote data sources to store, query, process, and analyze data presented in a variety of common formats (e.g., delimited text files, structured text files, various database systems);\ncomfortably write their own simple computer programs/scripts for data management, statistical analysis, visualization, and more specialized applications;\ndesign and implement reproducible data science workflows that take a project from data acquisition to analysis to presentation and organize their work using a version control system;\nand apply all of these tools to questions of interest in the natural and social sciences.",
    "crumbs": [
      "Preliminaries",
      "Course Logistics"
    ]
  },
  {
    "objectID": "00-logistics.html#prerequisites",
    "href": "00-logistics.html#prerequisites",
    "title": "Course Logistics",
    "section": "Prerequisites",
    "text": "Prerequisites\nAt least one semester of introductory statistics is recommended. Prior programming experience is not expected, but would be helpful!",
    "crumbs": [
      "Preliminaries",
      "Course Logistics"
    ]
  },
  {
    "objectID": "00-structure.html",
    "href": "00-structure.html",
    "title": "Structure",
    "section": "",
    "text": "This course is divided into three main sections.\nIn Part I, we will introduce and practice using the statistical programming software R, the RStudio integrated development environment, and the R package ecosystem. We will also cover programming/scripting fundamentals as implemented in R (functions, flow control) and practice using version control systems (e.g., git and GitHub) as we build up our skills for conducting reproducible research. We will use all of these tools to practice data wrangling and perform exploratory data analysis and visualizations.\nIn Part II, we will cover basic statistical and probability theory and methods of statistical inference. We will discuss classical null hypothesis significance testing and more contemporary methods based on permutation methods and, if time permits, I may also introduce alternative Bayesian approaches to inference. In this section, we will cover a variety of linear modeling topics, including simple and multivariate regression, ANOVA and ANCOVA, generalized linear modeling, and mixed effects modeling, as well as regression diagnostics and tools for model selection.\nFinally, in Part III, I hope to introduce a few additional and more specialized data analysis and visualization topics. Assuming we get there, Part III will introduce a mish-mash of (hopefully useful and interesting!) topics and tools, e.g., working with geospatial data and phylogenetic trees, network analysis, machine learning, natural language processing, image analysis, etc. Past experience suggests that I am proposing an ambitious amount of material to cover, so we likely will not get to some of these more specialized kinds of analyses. Still, if there’s a topic you are particularly excited about exploring, let me know and I will see what we can do!",
    "crumbs": [
      "Preliminaries",
      "Structure"
    ]
  },
  {
    "objectID": "00-course-schedule.html",
    "href": "00-course-schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "Part I - Using R and RStudio",
    "crumbs": [
      "Preliminaries",
      "Course Schedule"
    ]
  },
  {
    "objectID": "00-course-schedule.html#part-i---using-r-and-rstudio",
    "href": "00-course-schedule.html#part-i---using-r-and-rstudio",
    "title": "Course Schedule",
    "section": "",
    "text": "An Introduction to R\n\nModules\n\nModule 01 - Getting Started with R\nModule 02 - Getting Started with RStudio\nModule 03 - Extending the Functionality of R\nModule 04 - Fundamentals of the R Language\n\n\n\nTopics\n\nHistory of R\n\nRelation to other languages and statistics software\n\nInstalling R and RStudio\nUsing R and RStudio in the cloud\nSetting up your RStudio workspace\n\nPanels: Source, Console, Environment/History, Other Views\n\nConfiguration and customization\n\nSetting the working directory\nSaving workspaces\n\nR documentation and getting help\n\nThe ? command\nVignettes\nStack Overflow\n\nR Basics\n\nUsing R interactively\nVariables and assignment\nPackages\n\nInstalling and updating\nDependencies\n\nR objects\n\nObject types - Vectors, simple functions, and environments\nClasses and attributes of objects\nScripting and sourcing scripts\n\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 1 - Introduction\nChapter 2 - R Basics\n\nR in Action, Second Edition\n\nChapter 1 - Getting Started\nChapter 2 - Creating a Dataset\n\n\n\n\nOther Useful Readings\n\nThe Book of R\n\nChapter 1 - Getting Started\nChapter 2 - Numerics, Arithmetic, Assignment, and Vectors\n\nR Programming for Data Science\n\nChapter 3 - History and Overview of R\nChapter 5 - R Nuts and Bolts\n\nStatistics: An Introduction Using R\n\nChapter 1 - Fundamentals\nAppendix: Essentials of the R Language\n\nAdvanced R, First Edition\n\nChapter 2 - Data Structures\n\nModern Data Science with R\n\nAppendix B: An Introduction to R and RStudio\n\n\n\n\n\nVersion Control and Reproducibility\n\nModules\n\nModule 05 - Basics of Version Control\nModule 06 - Reproducible Research Using RStudio\nSome recommendations on Programming Style\n\n\n\nTopics\n\nGood programming practices\n\nVersion control with git and GitHub\nData workflow with R projects using local and remote repositories\nReproducible research using Rmarkdown and Quarto\nProgramming conventions and style\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 39 - Git and GitHub\n\nEssentials of Data Science\n\nChapter 11 - R with Style\n\n\n\n\nOther Useful Readings\n\nHappy Git and GitHub for the useR\nIntroduction to Data Science\n\nChapter 37 - Accessing the terminal and installing Git\nChapter 38 - Organizing with Unix\nChapter 40 - Reproducible projects with RStudio and RMarkdown/Quarto\n\n\n\n\n\nData Science Preliminaries\n\nModules\n\nModule 07 - Additional Data Structures in R\nModule 08 - Getting Data into R\n\n\n\nTopics\n\nWorking with data\n\nThe Tao of text\nMore object types - matrices, n-dimensional arrays, lists, data frames, and other tabular structures (e.g., data tables and “tibbles”)\nSubsetting and filtering data structures\n\nSingle bracket ([]) notation\nDouble bracket ([[]]) notation\n$ notation\n\nFactors\nClass coercion and conversion\nSpecial data values - NA, NaN, Inf\nGetting data in and out of R\n\nFrom “.csv” files - {readr}\nFrom Excel - {readxl} and others\nFrom Dropbox - {rdrop2}\nFrom other online resources - {curl}\nFrom databases - {RMySQL}, {RSQLite}, {RPostgreSQL} and others\n\n\n\n\n\nSuggested Readings\n\nThe Book of R\n\nChapter 3 - Matrices and Arrays\nChapter 5 - Lists and Data Frames\n\nR in Action\n\nChapter 4 - Basic Data Management\n\n\n\n\nOther Useful Readings\n\nThe Book of R\n\nChapter 4 - Non-Numeric Values\nChapter 6 - Special Values, Classes, and Coercion\nChapter 8 - Reading and Writing Files\n\nAdvanced R\n\nChapter 4 - Subsetting\n\nR for Data Science\n\nChapter 7 - Data Import\n\n\n\n\n\nExploratory Data Analysis\n\nModules\n\nModule 09 - Exploratory Data Analysis\n\n\n\nTopics\n\nSummarizing and visualizing data\n\nBasic descriptive statistics\nTidying and reshaping data with {tidyr}\nSimple plotting (boxplots, histograms, scatterplots) with {base} R, {ggplot2}, and others\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 5 - The {tidyverse}\n\nR in Action\n\nChapter 6 - Basic Graphs\nChapter 7 - Basic Statistics\n\n\n\n\nOther Useful Readings\n\nThe Book of R\n\nChapter 13 - Elementary Statistics\nChapter 14 - Basic Data Visualization\n\nR for Data Science\n\nChapter 5 - Data Tidying\n\n\n\n\n\nData Wrangling and Programming\n\nModules\n\nModule 10 - Data Wrangling with {dplyr}\nModule 11 - Functions and Flow Control\n\n\n\nTopics\n\nManipulating data\n\n{dplyr} functions - select(), filter(), arrange(), rename(), mutate(), group_by(), summarize()\nChaining and piping data\n\nR programming practices\n\nWriting functions\n\nArgument lists\nDefault values\n\nProgram flow control\n\nConditional statements\nfor() loops\nwhile() loops\n\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 4 - Programming Basics\n\n\n\n\nOther Useful Readings\n\nThe Book of R\n\nChapter 9 - Calling Functions\nChapter 10 - Conditions and Loops\nChapter 11 - Writing Functions\n\nR for Data Science\n\nChapter 3 - Data Transformation\n\nR in Action\n\nChapter 5 - Advanced Data Management",
    "crumbs": [
      "Preliminaries",
      "Course Schedule"
    ]
  },
  {
    "objectID": "00-typography-and-formatting.html",
    "href": "00-typography-and-formatting.html",
    "title": "Typography and Formatting",
    "section": "",
    "text": "To the extent possible, I have tried to follow the following typographic and formatting conventions throughout the course modules.\n\nProgram names are written in bold italics:\n\nR\nRStudio\n\nFunctions, commands, and R code are written as inline code, e.g., x &lt;- 5, or in code blocks:\n\n\nx &lt;- 5\nprint(x)\n\n\nCode output appears in a colored cell, prefaced by “##”:\n\n\n\n## [1] 5\n\n\n\nPackage names are written in {curly braces}:\n\n{tidyverse}\n{lubridate}\n\nVariable names (for vectors, data frames and other tabular data, etc.) are written in bold:\n\nx\ny\nairline_flights\n\nColumn names within a data frame are also written in bold, whether referred to separately or as part of the table:\n\norigin\ndestination\nairline_flights$origin\nairline_flights[[“destination”]]\n\nFilenames and file types are written in “quotation marks”:\n\n“myData.R”\n“.csv”\n\nFull file path names are written in “quotation marks”:\n\n“/Users/Tony/Desktop/myData.R”\n“~/Desktop/myData.R”\n“C:\\Documents and Settings\\Anthony Di Fiore\\Desktop\\myData.R”\n\nDirectory names are written as inline code followed by a slash:\n\nimg/, src/\n\nImportant concepts are written in italics when first referred to:\n\nworking directory\nenvironment\nnamespace\n\nMenu names and menu commands are written in bold:\n\nFile &gt; New File &gt; R Script\n\nArgument values or values to be replaced are written in lowercase text between &lt;angle brackets&gt;, where that entire text, brackets included, should be replaced with the text being asked for:\n\nsetwd(\"&lt;your working directory&gt;\")\n“&lt;your file name&gt;.csv”\n\nConstants are written in italics:\n\npi\n\nArgument names and assignments are written as inline code:\n\nSet na.rm=TRUE\nSet data=df\nSet filename=\"~/Users/Tony/Desktop/output.csv\"\n\nNames of RStudio panes are written in bold:\n\nConsole\nEnvironment/History\n\nNames of RStudio tabs within panes are written in italics:\n\nHistory\nPlots\nHelp\nGit\n\nNames of dialog boxes are written in italics:\n\nGlobal Options\n\nButton names and sections within dialog boxes are written in quotation marks:\n\n“OK”\n“Cancel”\n\nCheck box names within dialog boxes are written in inline code:\n\nRestore .RData into workspace at startup\n\nR object class names are written in bold:\n\nnumeric\nfunction\n\ngit repository branch names are written as inline code:\n\nmain\norigin/main\n\nFull URLs/links are written in inline code and may include hyperlinks:\n\nhttps://cran.r-project.org/\nhttps://difiore.github.io/ada-2024/",
    "crumbs": [
      "Preliminaries",
      "Typography and Formatting"
    ]
  },
  {
    "objectID": "00-programming-style-guide.html",
    "href": "00-programming-style-guide.html",
    "title": "Programming Style Guide",
    "section": "",
    "text": "File Type Conventions",
    "crumbs": [
      "Preliminaries",
      "Programming Style Guide"
    ]
  },
  {
    "objectID": "00-programming-style-guide.html#file-type-conventions",
    "href": "00-programming-style-guide.html#file-type-conventions",
    "title": "Programming Style Guide",
    "section": "",
    "text": "Use the uppercase “.R” extension for files containing R code\nUse the “.RData” extension for files that contain binary data\nUse the “.Rmd” extension for RMarkdown documents\nUse the “.qmd” extension for Quarto documents\nUse lowercase file extensions for other standard filetypes (e.g., “.csv”, “.jpg”, “.docx”, “.xlsx”)",
    "crumbs": [
      "Preliminaries",
      "Programming Style Guide"
    ]
  },
  {
    "objectID": "00-programming-style-guide.html#stylistic-conventions",
    "href": "00-programming-style-guide.html#stylistic-conventions",
    "title": "Programming Style Guide",
    "section": "Stylistic Conventions",
    "text": "Stylistic Conventions\n\nUse a space before and after the standard backwards assignment operator &lt;- and other infix operators (except for = used in function arguments), but not around parentheses or brackets:\n\nx &lt;- \"Hello\"\n\nEven though the syntax is valid, avoid using = for assignment, except when assigning values to named arguments in a function:\n\nrnorm(n=1000, mean=50, sd=10)\n\nEven though the syntax is valid, do not abbreviate TRUE and FALSE to T and F\nGenerally avoid using the forward assignment operator -&gt; except at the end of a sequence of piped operations:\n\ndf &lt;- df %&gt;% select(name, age, sex, body_weight)\ndf |&gt; select(name, age, sex, body_weight) -&gt; df\n\nUse a space after a comma when listing the arguments of a function:\n\nx &lt;- c(4, 5, 6, 7)\npaste(\"Data science\", \"is\", \"cool\", sep=\" \")",
    "crumbs": [
      "Preliminaries",
      "Programming Style Guide"
    ]
  },
  {
    "objectID": "00-programming-style-guide.html#programming-conventions",
    "href": "00-programming-style-guide.html#programming-conventions",
    "title": "Programming Style Guide",
    "section": "Programming Conventions",
    "text": "Programming Conventions\n\nUse simple, single characters for temporary variables, like indices:\n\nx &lt;- 1:10\nfor (i in 1:100) {print(i)}\n\nWhenever possible, use short, descriptive names for variables:\n\nrate &lt;- 5.6\nsex &lt;- c(\"M\", \"F\", \"F\", \"M\", \"F\", \"M\" \"F\", \"M\")\n\nFor longer, multi-word variable, function, or argument names, use either camelCase or snake_case:\n\ninterestRate &lt;- 0.45\nsay_hello &lt;- function(x) {print(paste0(\"Hello, \",x))}\nprint_n_rows &lt;- function(x, n_rows=10) {print(x[n_rows,])}\n\nInclude default values in your function definitions:\n\nn_rows=10 in the preceding example\n\nInclude error checking in your functions\nFor support files that contain a single function, name the file to match the name of the function defined in the file:\n\n“prettyPrint.R” for a file that contains the function prettyPrint()\n“rescale_image.R” for a file that contains the function rescale_image()",
    "crumbs": [
      "Preliminaries",
      "Programming Style Guide"
    ]
  },
  {
    "objectID": "00-programming-style-guide.html#code-formatting-conventions",
    "href": "00-programming-style-guide.html#code-formatting-conventions",
    "title": "Programming Style Guide",
    "section": "Code Formatting Conventions",
    "text": "Code Formatting Conventions\n\nTry to keep lines of code to less than 80 characters\nUse comments liberally to make notes about what your code does\n\nR ignores lines starting with the hashtag character (#) as well as text after this character (until it encounters a line break)\n\n\n\n# assign `g`, the constant for gravitational acceleration\ng &lt;- 9.80665  # units are m/s^2\n\n\nUse a single # to introduce a comment, and separate comments from code with a single empty line before the comment\n\n\nx &lt;- 3\n\n# Now add 2 to x...\nx &lt;- x + 2\n\n\nIn RStudio, use four dashes ---- at the end of a comment line to indicate a section… this should allow for code folding in your scripts:\n\n\n# Section 1 ----\nx &lt;- 5\ny &lt;- 3\nz &lt;- x + y^2\n\n\nNOTE: In RStudio, you can highlight several lines and then use ⌘-SHIFT-C to comment/uncomment multiple lines simultaneously.\n\n\nUse indentation to identify (nested) blocks of code:\n\nUse spaces rather than the invisible tab (\\t) character for indentation\nUse consistent indentation (e.g., 2 spaces, 4 spaces) to keep your code looking neat\n\n\n\n\n\n\n\n\n\n\n\n\nUse a linter (see the “Addins” section under the Tools menu or in the RStudio toolbar) to catch common style “errors”\n\n\nNOTE: In RStudio, you can use highlight a chunk of code within an R code block and then use ⌘-SHIFT-A to try to neatly and consistently reformat your code. Also, when working in the text editor in RStudio, holding the option (⌥) key while selecting with the cursor allows you to highlight/edit replace text in multiple rows simultaneously.",
    "crumbs": [
      "Preliminaries",
      "Programming Style Guide"
    ]
  },
  {
    "objectID": "00-programming-style-guide.html#version-control-system",
    "href": "00-programming-style-guide.html#version-control-system",
    "title": "Programming Style Guide",
    "section": "Version Control System",
    "text": "Version Control System\n\nFinally, always, always, always use a version control system!!! 😃 See Module 5 and Module 6 for more details.",
    "crumbs": [
      "Preliminaries",
      "Programming Style Guide"
    ]
  },
  {
    "objectID": "00-resources.html",
    "href": "00-resources.html",
    "title": "Resources",
    "section": "",
    "text": "Texts\nThere are no required texts for this course, but we will be covering useful material from a number of the following books, all of which are excellent resources for learning basic to intermediate level statistics and R programming.\nThese are available in print or electronic format directly from the publishers - e.g., No Starch Press, O’Reilly Media, Inc., Manning Publications Co. - or from Amazon.com.",
    "crumbs": [
      "Preliminaries",
      "Resources"
    ]
  },
  {
    "objectID": "00-resources.html#texts",
    "href": "00-resources.html#texts",
    "title": "Resources",
    "section": "",
    "text": "Davies, T.M. (2016). The Book of R: A First Course in Programming and Statistics. No Starch Press.\nBaumer, B.S., Kaplan, D.T., & Horton, N.J. (2021). Modern Data Science with R (Second Edition). Chapman & Hall/CRC. (link to web version)[https://mdsr-book.github.io/mdsr2e/]\nIsmay, C. & Kim, A.Y. (2019). Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. Chapman & Hall/CRC. (link to web version)[https://moderndive.com/]\nIrizarry, R.A. (2019). Introduction to Data Science. Lean Publishing.\nKabacoff, R. (2022). R in Action: Data Analysis and Graphics with R (Third Edition). Manning Publications Co.\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for Data Science (Second Edition). O’Reilly Media, Inc. (link to web version)[https://r4ds.hadley.nz/]",
    "crumbs": [
      "Preliminaries",
      "Resources"
    ]
  },
  {
    "objectID": "00-resources.html#other-resources",
    "href": "00-resources.html#other-resources",
    "title": "Resources",
    "section": "Other Resources",
    "text": "Other Resources\n\nCheatsheets\n\nPosit Cheatsheets Resource\nBase R\nAdvanced R\nR Reference Card\nMarkdown and GitHub Flavored Markdown\nRMarkdown 1\nRMarkdown 2\nRMarkdown Reference Guide\nLearning RMarkdown\nRStudio IDE\nData Import\nData Transformation with {dplyr}\nData Wrangling with {dplyr} and {tidyr}\nTypes of Regression (R in Action Table 8.1)\nRegression Syntax (R in Action Table 8.2)\nUseful Functions for Regression Models (R in Action Table 8.3)\n{leaflet} for Interactive Mapping\nBasics of Probability\n{shiny} Tutorial 1\n{shiny} Tutorial 2\n\n\n\nSoftware Tools\n\nProgramming Languages\n\nR (MacOS, Windows, Linux)\nPython (MacOS, Windows, Linux)\nJulia (MacOS, Windows, Linux)\n\n\n\nText and Markdown Editors and Publishing Software\n\nBB Edit (MacOS)\nMarkdownPad2 (Windows)\nNotepad++ (Windows)\nObsidian (MacOS)\nPandoc (MacOS, Windows, Linux)\nQuarto (MacOS, Windows, Linux)\nVisual Studio Code (MacOS, Windows, Linux)\n\n\n\nIDEs\n\nRStudio Desktop (R, Python) (MacOS, Windows, Linux)\nRStudio Cloud/Posit Cloud (R, Python) (browser)\nJupyterLab (R, Python, Julia) (MacOS, Windows, Linux, browser)\nPyCharm (Python) (MacOS)\n\n\n\nVersion Control Tools\n\ngit (MacOS, Windows, Linux)\nGitHub (Website)\nGitHub Desktop (MacOS, Windows)\n\n\n\n\nWeb Resources\n\nCRAN (Comprehensive R Archive Network)\nDataCamp\nSoftware Carpentry\nData Carpentry\nrOpenSci\nStack Overflow\nOnline R Exercises\nR-bloggers\nMockaroo\n\n\n\nBooks\n\nStatistical Modeling in Biology\n\nBolker, B.M. (2008). Ecological Models and Data in R. Princeton University Press.\nIrizarry, R.A. & Love, M.I. (2015). Data Analysis for the Life Sciences. Lean Publishing.\nQuinn, G.P. & Keough, M.J. (2002). Experimental Design and Data Analysis for Biologists. Cambridge University Press.\n\n\n\nR and Basic Statistics\n\nCaffo, B. (2015). Statistical Inference for Data Science. Lean Publishing.\nCaffo, B. (2016). Regression Models for Data Science in R. Lean Publishing.\nChihara, L.M. & Hesterberg, T.C. (2018). Mathematical Statistics with Resampling and R. John Wiley & Sons, Inc.\nCrawley, M.J. (2014). Statistics: An Introduction Using R. (Second Edition). John Wiley & Sons, Inc.\nDalgaard, P. (2008). Introductory Statistics with R (Second Edition). Springer.\nDiez, D., Çetinkaya-Rundel, M., & Barr, C.D. (2019). OpenIntro Statistics (Fourth Edition). OpenIntro.org.\nIrizarry, R.A. (2019). Introduction to Data Science. Lean Publishing.\nIsmay, C. & Kim, A.Y. (2019). Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. Chapman & Hall/CRC.\nJames, G., Witten, D., Hastie, T., & Tibshirani, R. (2013). An Introduction to Statistical Learning. Springer.\nShahbaba, B. (2012). Biostatistics with R. Springer.\nWolfe, D.A. & Schneider, G. (2017). Intuitive Introductory Statistics. Springer.\n\n\n\nR Programming\n\nDavies, T.M. (2016). The Book of R: A First Course in Programming and Statistics. No Starch Press.\nKabacoff, R. (2022). R in Action: Data Analysis and Graphics with R (Third Edition). Manning Publications Co.\nMatloff, N. (2011). The Art of R Programming. No Starch Press.\nPeng, R. (2020). R Programming for Data Science. Lean Publishing.\nPeng, R. (2016). Exploratory Data Analysis with R. Lean Publishing.\nWickham, H. (2015). Advanced R. Chapman & Hall/CRC.\nWickham, H. (2019). Advanced R. (Second Edition). Chapman & Hall/CRC.\nZuur, A.F., Ieno, E.N., & Meesters, E.H.W.G. (2009). A Beginner’s Guide to R. Springer.\n\n\n\nR Reference\n\nAdler, J. (2009). R in a Nutshell. O’Reilly Media, Inc.\nCrawley, M.J. (2012). The R Book (Second Edition). John Wiley & Sons, Inc.\nEkstrøm, C. T. (2016). The R Primer (Second Edition). Chapman & Hall/CRC.\nGardener, M. (2012). The Essential R Reference. John Wiley & Sons, Inc.\nLong, J.D. & Teetor, P. (2019). R Cookbook (Second Edition). O’Reilly Media, Inc.\n\n\n\nR Graphics\n\nChang, W. (2013). R Graphics Cookbook. O’Reilly Media, Inc.\nWickham, H. (2016). ggplot2: Elegant Graphics for Data Analysis (Second Edition). Springer.\n\n\n\nData Science\n\nBaumer, B.S., Kaplan, D.T., & Horton, N.J. (2017). Modern Data Science with R. Chapman & Hall/CRC.\nBruce, P. & Bruce, A. (2017). Practical Statistics for Data Scientists. O’Reilly Media, Inc.\nCady, F. (2017). The Data Science Handbook. John Wiley & Sons, Inc.\nGrus, J. (2015). Data Science from Scratch. O’Reilly Media, Inc.\nIsmay, C. & Kim, A.Y. (2019). Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. Chapman & Hall/CRC.\nLarose, C.D. & Larose D.T. (2019). Data Science Using Python and R. John Wiley & Sons, Inc.\nMaillund, T. (2016). Introduction to Data Science and Statistical Programming in R. Lean Publishing.\nMcNicholas, P.D. & Tait, P.A. (2019). Data Science with Julia. Chapman & Hall/CRC.\nPearson, R.K. (2018). Exploratory Data Analysis Using R. Chapman & Hall/CRC.\nPeng, R.D. & Matsui, E. (2015). The Art of Data Science. Lean Publishing.\nWickham, H. & Grolemund, G. (2017). R for Data Science. O’Reilly Media, Inc.\nWilliams, G.J. (2017). The Essentials of Data Science. Chapman & Hall/CRC.\nZumel, N. & Mount, J. (2020). Practical Data Science with R, Second Edition. Manning Publications Co.\n\n\n\nData Visualization\n\nDale, K. (2016). Data Visualization with Python and JavaScript. O’Reilly Media, Inc.\nHealy, K. (2018). Data Visualization: A Practical Introduction. Princeton University Press.\nThomas, S.A. (2015). Data Visualization with JavaScript. No Starch Press.\nWilke, C.O. (2019) Fundamentals of Data Visualization. O’Reilly Media, Inc.\n\n\n\nSpatial Data Analysis\n\nBivand, R.S., Pebesma, E., & Gómez-Rubio, V. (2013). Applied Spatial Data Analysis with R (Second Edition). Springer.\nBrundson, C. & Comber, L. (2019). An Introduction to R for Spatial Analysis and Mapping (Second Edition). SAGE.\nBrunsdon, C. & Singleton, A.D. (Eds.). (2015). Geocomputation: A Practical Primer. Los Angeles: SAGE.\nLovelace, R., Nowosad, J., & Muenchow, J. (2019). Geocomputation with R. Chapman & Hall/CRC.\n\n\n\nR and Bayesian Statistics\n\nBolstad, W.M. & Curran, J.M. (2017). Introduction to Bayesian Statistics (Third Edition). John Wiley & Sons, Inc.\nKruschke, J.K. (2015). Doing Bayesian Data Analysis: A Tutorial with R, JAGS, and Stan (Second Edition). Elsevier.\nMcElreath, R. (2019). Statistical Rethinking: A Bayesian Course with Examples in R and Stan (Second Edition). Chapman & Hall/CRC.\n\n\n\nGeneral and Generalized Regression, Mixed Effects, and Multilevel/Hierarchical Modeling\n\nBurnham, K.P. & Anderson, D.R. (2002). Model Selection and Multimodel Inference. Springer.\nDunn, P.K. & Smyth, G.K. (2018). Generalized Linear Models With Examples in R. Springer.\nFox, J. (2016). Applied Regression Analysis and Generalized Linear Models (Third Edition). SAGE.\nFox, J. & Weisberg, S. (2019). An R Companion to Applied Regression. SAGE.\nGelman, A. & Hill, J. (2007). Data Analysis Using Regression and Multilevel/Hierarchical Models. Cambridge University Press.\nJames, G,, Witten, D., Hastie, T., & Tibshirani, R. (2013). An Introduction to Statistical Learning. Springer.\nHoffman, J.P. (2022). Linear Regression Models: Applications in R. Chapman & Hall/CRC.\nZuur, A.F., Ieno, E.N., Walker, N.J., Savaliev, A.A., & Smith, G.M. (2009). Mixed Effects Models and Extensions in Ecology with R. Springer.\n\n\n\nWeb Scraping, Text Mining, and Text Analysis\n\nFriedl, J.E.F. (2000). Mastering Regular Expressions (Third Edition). O’Reilly Media, Inc.\nMitchell, R. (2015). Web Scraping with Python. O’Reilly Media, Inc.\nNolan, D. & Temple Lang, D. (2014). XML and Web Technologies for Data Sciences with R. Springer.\nSilge, J. & Robinson, D. (2017). Text Mining with R: A Tidy Approach. O’Reilly Media, Inc.\n\n\n\nR Packages, R Markdown, Quarto, and Reproducible Research\n\nGandrud, C. (2020). Reproducible Research with R and RStudio (Third Edition). Chapman & Hall/CRC.\nWickham, H. (2015). R Packages. O’Reilly Media, Inc.\nXie, Y. (2017). Bookdown: Authoring Books and Technical Documents with RMarkdown. Chapman & Hall/CRC.\nXie, Y., Allaire, J.J., & Grolemund, G. (2018). R Markdown: The Definitive Guide. Chapman & Hall/CRC.\n\n\n\ngit and Unix Shell Tools\n\nAlbing, C., Vossen, J.P., & Newham, C. (2007). Bash Cookbook. O’Reilly Media, Inc.\nBarrett, D.J. (2016). Linux Pocket Guide: Essential Commands (Third Edition). O’Reilly Media, Inc.\nChacon, S. & Straub, B. (2014). Pro Git (Second Edition). Apress.\nDougherty, D. & Robbins, A. (1998). Sed and Awk (Second Edition). O’Reilly Media, Inc.\nNewham, C. & Rosenblatt, B. (2005). Learning the bash Shell (Third Edition). O’Reilly Media, Inc.\nRobbins, A. (2006). UNIX in a Nutshell (Fourth Edition). O’Reilly Media, Inc.\n\n\n\nData Science, Statistics, and Programming in Python\n\nBeazley, D. & Jones, B.K. (2013). Python Cookbook (Third Edition). O’Reilly Media, Inc.\nDowney, A.B. (2012). Think Python. O’Reilly Media, Inc.\nDowney, A.B. (2014). Think Stats (Second Edition). O’Reilly Media, Inc.\nDowney, A.B. (2023). Modeling and Simulation in Python. No Starch Press.\nKazil, J. & Jarmul, K. (2016). Data Wrangling with Python. O’Reilly Media, Inc.\nLubanovic, B. (2014). Introducing Python. O’Reilly Media, Inc.\nLee, K.D. (2011). Python Programming Fundamentals. Springer.\nLutz, M. (2013). Learning Python (Fifth Edition). O’Reilly Media, Inc.\nLutz, M. (2014). Python Pocket Reference (Fifth Edition). O’Reilly Media, Inc.\nMcKinney, W. (2013). Python for Data Analysis. O’Reilly Media, Inc.\nRogel-Salazar, J. (2023). Statistics and Data Visualisation with Python. Chapman & Hall/CRC.\nVanderPlas, J. (2016). Python Data Science Handbook. O’Reilly Media, Inc.\nVasiliev, Y. (2022). Python for Data Science. No Starch Press.\nVaughan, L. (2023). Python Tools for Scientists: An Introduction to Coding, Anaconda, Jupyterlab, and the Scientific Libraries. No Starch Press\n\n\n\nData Science, Statistics, and Programming in Julia\n\nMcNicholas, P.D. & Tait, P.A. (2019). Data Science with Julia. Chapman and Hall/CRC.\nPhillips, L. (2024). Practical Julia: A Hands-on Introduction for Scientific Minds. No Starch Press.\n\n\n\nDatabases and SQL\n\nDeBarros, A. (2022). Practical SQL: A Beginner’s Guide to Storytelling with Data. (Second Edition). No Starch Press.\nKreibich, J.A. (2010). Using SQLite. O’Reilly Media, Inc.\nObe, R.O. & Hsu, L.S. (2012). PostgreSQL: Up and Running. O’Reilly Media, Inc.\nRobinson, I., Webber, J., & Eifrem, E. (2015). Graph Databases (Second Edition). O’Reilly Media, Inc.\n\n\n\nMachine Learning\n\nBoehmke, B. & Greenwall. B. (2020). Hands-On Machine Learning with R. Chapman & Hall/CRC.\nRhys, H.I. (2020). Machine Learning with R, tidyverse, and mlr. Manning Publications Co.",
    "crumbs": [
      "Preliminaries",
      "Resources"
    ]
  },
  {
    "objectID": "01-module.html",
    "href": "01-module.html",
    "title": "1  Getting Started with R",
    "section": "",
    "text": "1.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with ***R***</span>"
    ]
  },
  {
    "objectID": "01-module.html#objectives",
    "href": "01-module.html#objectives",
    "title": "1  Getting Started with R",
    "section": "",
    "text": "The goal of this module is to get everyone’s computers set up with R for the semester and to provide background and an introduction to the R programming language and environment.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with ***R***</span>"
    ]
  },
  {
    "objectID": "01-module.html#backstory",
    "href": "01-module.html#backstory",
    "title": "1  Getting Started with R",
    "section": "1.2 Backstory",
    "text": "1.2 Backstory\nThe name R is a nod to the statistical programming language S (for “Statistics”) that inspired its creation. S was developed at Bell Laboratories by John Chambers and later sold to a small company that further developed it into S-Plus. R was then developed as an alternative to S by Ross Ihaka and Robert Gentleman in the Department of Statistics at the University of Aukland, New Zealand.\nR is an high-level, interpreted language, like Python or Ruby, where commands are executed directly and sequentially, without previously compiling a program into machine-language instructions. Each statement is translated, on the fly, into a sequence of subroutines that have already been compiled into machine code.\nR is open-source software, meaning that the source code for the program is freely available for anyone to modify, extend, and improve upon. R is also FREE (!) for anyone to use and distribution. The large and active community of users and developers is one of the reasons that R has become very popular in academics, science, engineering, and business - any field that requires data analytics. Developers have also built in the capacity for easily making production-quality graphics, making it a great tool for data visualization. There are thus many good reasons to learn and use R.\nHere are a few of the main ones, in a nutshell:\n\nR is high quality software. It is actively developed by an international community of statisticians and software developers with multiple releases and bug fixes every year.\nR is FREE (as in thought). The source code is openly avaialable under the GNU General Public License, which allows others to easily evaluate the quality of the code, contribute new functionality, and quickly fix bugs.\nR is FREE (as in beer). Whereas licenses for other statistical software such as SAS, SPSS, or Stata may cost thousands of dollars, R is available free of charge.\nR is available for multiple platforms. Installers are available for Windows, MacOS, and other Unix based systems and most package are OS agnostic.\nR is extremely extensible. If there is a procedure you want to run that is not included in one of the standard packages, it is likely available in one of the thousands of extensions packages that have been developed and are also freely available. You can also use R to control or interface with external applications, including other programming languages (like Python, SQL, C++, NetLogo), other analysis tools (like GIS software), and databases (like MySQL, PostgreSQL, SQLite, etc). It is also always possible for you to improve R yourself. You can literally do just about anything in R.\nR has a vibrant, intelligent, and generous user community. LOTS of resources are available online for learning and troubleshooting (see, for example, the section on R at the Stack Overflow website.\n\nR can be run in several ways:\n\nInteractively from a console prompt after launching the program from the command line in either a terminal window or command shell.\nIn batch mode, by sourcing commands from an R script file (which is a simple text file).\nFrom within an R graphical user interface (or GUI) or integrated development envrionment (or IDE), which accommodates both of the above.\n\nWe are going to introduce several of these ways of working with R, but the easiest and most convenient is to use an IDE.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with ***R***</span>"
    ]
  },
  {
    "objectID": "01-module.html#installing-the-r-software",
    "href": "01-module.html#installing-the-r-software",
    "title": "1  Getting Started with R",
    "section": "1.3 Installing the R Software",
    "text": "1.3 Installing the R Software\n\nDownload and install R from the Compehensive R Archive Network (CRAN) website. Choose the correct version for your operating system.\n\n\n\n\n\n\n\n\n\n\n\nIf you are using MacOS, you should consider also installing XQuartz, which lets you use the X11 X Windows management software.\n\n\n\n\n\n\n\n\n\n\n\nOpen the R program from wherever you installed it (e.g., in MacOS, double-click on the R.app application in your Applications folder; on a PC, search for and open the Rgui.exe application, which should be located somewhere inside your C:\\Program Files\\R\\R-[version] folder… you should see the console window and the &gt; prompt. Note that your screen may look slightly different from the screenshots below.\n\nAlso, note that you can also run R in a terminal shell (MacOS or Unix) or from the Windows command shell after starting it with the command r. Depending on whether you have set your PATH variable to detect the R executable file, you may or may not need to first navigate into the directory containing the executable file.\n\nOn MacOS, the default GUI will look as follows:\n\n\n\n\n\n\n\n\n\n\n\nOn Windows, the default GUI (RGui) looks like this:",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with ***R***</span>"
    ]
  },
  {
    "objectID": "01-module.html#exploring-the-r-console",
    "href": "01-module.html#exploring-the-r-console",
    "title": "1  Getting Started with R",
    "section": "1.4 Exploring the R Console",
    "text": "1.4 Exploring the R Console\n\nR can be used as an interactive calculator from the console prompt, either in a GUI or in the shell.\n\nStandard mathematical order of operations applies (PEMDAS - parentheses, exponents, multiplication/division, addition/subtraction).\n\nThe assignment operator &lt;- can be used to assign a value, the results of an operation, or specific code to an object (e.g., a variable, a function, a complex data structure).\n\nYou can also use =, but I prefer to use that only to assign values to function arguments (more on this later).\n\nYou can set various settings to customize your interactions with R.\n\nTo change the standard prompt, use the function options() with the prompt argument: options(prompt=\"&lt;prompt text&gt;\"), where you supply, between the quotes, text with what you want the prompt to say.\nTo list the current working directory (the default folder where dialog boxes will open and where files and output will be stored unless otherwise specified), use the function getwd(), which has no arguments.\nTo set the current working directory, use the function setwd(\"&lt;path&gt;\"), where you supply, between the quotes, the path to the desired directory.\n\nOn MacOS, these directory options are also available under the Misc menu.\nOn Windows, you can set the working directory with the Change dir command under the File menu.\nIn RStudio, the working directory can be set under the Session menu.\n\n\nWithin the active workspace, R keeps a log of all executed commands, and you can use the arrow keys to scroll through this history. In RStudio, this list is accessible in the History tab.\nCommands and code can also be written in a text file or script and sent to the console for execution.\n\nIn most GUIs/IDEs, you can choose to create a new script document from the File menu, which opens in a text editor of some kind.\nFrom within the text editor, you can send an individual command to the R interpreter by positioning your cursor somewhere in the line you want to execute and hitting ⌘-RETURN (Mac) or either control-R (for the default GUI that ships with R) or control-ENTER (for the RStudio GUI) (PC).\nTo send a set of commands to the console as a batch, you can highlight the code lines of code you want to execute and then use these same commands.\nYou can include comments in your scripts by prefacing them with #.\nScript files can be saved just like any other type of text file, usually with the “.R” extension by default.\n\nTo view the names of all of the objects in your current workspace, you can use the ls() function. In RStudio, these also all appear in the Environment tab.\nTo clear objects from your workspace, use the rm() function, where an individual object’s name or a list of object names can be included as the argument to rm().\nTo remove all objects from your workspace, you can use rm(list=ls()).\n\nIn this case, you are passing to rm() a list consisting of all the objects in the workspace, provided by the ls() function.\n\n\n\nCHALLENGE\nFire up R in your mode of choice (by typing “R” at the console prompt in the Terminal in MacOS or from a cmd or other shell prompt in Windows) and then practice interacting with the software via the command line and console window.\n\nTry doing some math in R by using it to evaluate the following expressions:\n\n8 + 5\n10 - 6 / 2\n(10 - 6) / 2\n10 * 5\n15 / 5\n10 ^ 5\n3 * pi (where pi is a built-in constant)\n\n\n\n\nShow Code\n8 + 5\n\n\nShow Output\n## [1] 13\n\n\n\nShow Code\n10 - 6/2\n\n\nShow Output\n## [1] 7\n\n\n\nShow Code\n(10 - 6)/2\n\n\nShow Output\n## [1] 2\n\n\n\nShow Code\n10 * 5\n\n\nShow Output\n## [1] 50\n\n\n\nShow Code\n15/5\n\n\nShow Output\n## [1] 3\n\n\n\nShow Code\n10^5\n\n\nShow Output\n## [1] 1e+05\n\n\n\nShow Code\n3 * pi\n\n\nShow Output\n## [1] 9.424778\n\n\n\n\nTry working with assignments:\n\nAssign the number 6 to a variable called x.\nAssign the number 5 to a variable called y.\nAssign x * y to a variable called z.\nAssign x^2 to a variable called x2.\n\n\n\n\nShow Code\nx &lt;- 6\nx\n\n\nShow Output\n## [1] 6\n\n\n\nShow Code\ny &lt;- 5\ny\n\n\nShow Output\n## [1] 5\n\n\n\nShow Code\nz &lt;- x * y\nz\n\n\nShow Output\n## [1] 30\n\n\n\nShow Code\nx2 &lt;- x^2\nx2\n\n\nShow Output\n## [1] 36\n\n\n\n\nTry out some of the built-in functions in R:\n\nAssign the number 10 to a variable called x.\nTake the natural log of x using the log() function.\nFind the factorial of x using the factorial() function.\nAssign the number 81 to a variable called y.\nTake the square root of y using the sqrt() function.\nAssign the number -8.349218 to a variable called z.\nUse ?round or help(round) to view the help file for the function round().\nRound z to the 1000ths place.\nUse ?abs() to view the help file for the function abs().\nTake the absolute value of z * y.\n\n\n\n\nShow Code\nx &lt;- 10\nlog(x)\n\n\nShow Output\n## [1] 2.302585\n\n\n\nShow Code\nfactorial(x)\n\n\nShow Output\n## [1] 3628800\n\n\n\nShow Code\ny &lt;- 81\nsqrt(y)\n\n\nShow Output\n## [1] 9\n\n\n\nShow Code\nz &lt;- -8.349218\nround(z, digits = 3)\n\n\nShow Output\n## [1] -8.349\n\n\n\nShow Code\nabs(z * y)\n\n\nShow Output\n## [1] 676.2867\n\n\n\n\nUse the ls() function to list the variables currently stored in your active session.\n\nHow many variables do you have?\n\n\n\n\nShow Code\nls()\n\n\nShow Output\n## [1] \"x\"  \"x2\" \"y\"  \"z\"\n\n\n\n\nUse the command rm(list=ls()) to clear all the variables you have defined.\nWhat happens if you type a function name without including the parentheses?\nWhat happens if you type a function with an invalid or missing argument?",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with ***R***</span>"
    ]
  },
  {
    "objectID": "01-module.html#concept-review",
    "href": "01-module.html#concept-review",
    "title": "1  Getting Started with R",
    "section": "Concept Review",
    "text": "Concept Review\n\nInteracting with R from the console prompt\nVariable assignment: &lt;-\nCalling built-in functions: function(&lt;arguments&gt;)\nAccessing R documentation and help files: ?function or help(function)\nWorkspaces and the working directory: getwd(), setwd()\nListing and removing variables from the environment: ls(), rm()\nAccessing the console history",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started with ***R***</span>"
    ]
  },
  {
    "objectID": "02-module.html",
    "href": "02-module.html",
    "title": "2  Getting Started with RStudio",
    "section": "",
    "text": "2.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started with ***RStudio***</span>"
    ]
  },
  {
    "objectID": "02-module.html#objectives",
    "href": "02-module.html#objectives",
    "title": "2  Getting Started with RStudio",
    "section": "",
    "text": "The goal of this module is to familiar yourself with the RStudio Integrated Development Environment (IDE).",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started with ***RStudio***</span>"
    ]
  },
  {
    "objectID": "02-module.html#installing-the-rstudio-software",
    "href": "02-module.html#installing-the-rstudio-software",
    "title": "2  Getting Started with RStudio",
    "section": "2.2 Installing the RStudio Software",
    "text": "2.2 Installing the RStudio Software\nApart from the GUIs included in the MacOS and Windows installations of R, there are several IDEs that connect to the R interpreter and provide lots of convenient functionality. One of the most versatile and easy to use (and my favorite) is RStudio, created by the company Posit.\n\nDownload and install the RStudio Integrated Development Environment (IDE)\n\n\n\n\n\n\n\n\n\n\n\nOpen the RStudio program\n\nThe workspace that you see is divided into four separate panes (Source and Console panes on the left, two customizable panes on the right). You can modify the layout and appearance of the RStudio IDE to suit your taste by selecting Preferences from the RStudio menu (MacOS) or by selecting Global Options from the Tools menu (both MacOS and Windows).\n\n\n\n\n\n\n\n\n\nThe Source pane is where you work with and edit various file types (e.g., scripts), while the Console pane is where you run commands in the R interpreter and see the results of those commands. The other two customizable panes provide easy access to useful tools and overviews of your interactions with R. For example, the Environment tab can be used to view all of the objects in the different environments in your current workspace, the History tab shows the log of all of the commands you have sent to the interpreter, and the Packages tab provides a convenient interface for installing and loading packages (see below).\nWithin RStudio, you can change the working directory by going to the Session menu and selecting Set Working Directory.\n\nCHALLENGE\nRepeat the basic maths CHALLENGE from Module 01 using the editor and console in RStudio.\n\nNOTE: In both the base GUI that ships with the R application and in RStudio, the console supports code completion. Pressing TAB after starting to type a function or variable name will give you suggestions as to how to complete what you have begun to type. In RStudio, this functionality is present also when you are typing code in the text editor in the Source pane. Also helpful in RStudio are popup windows that accompany code completion that show, for each function, what possible arguments that function can take and their default values.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started with ***RStudio***</span>"
    ]
  },
  {
    "objectID": "02-module.html#using-the-rstudio-posit-server",
    "href": "02-module.html#using-the-rstudio-posit-server",
    "title": "2  Getting Started with RStudio",
    "section": "2.3 Using the RStudio Posit Server",
    "text": "2.3 Using the RStudio Posit Server\nAn alternative (though likely slower!) way to use R and RStudio is to run them through a browser from a cloud computing server adminstered by Posit, the company that developed and continues to refine RStudio. To use this approach, visit the Posit Cloud website, click the Get Started button, and create or sign up for an account.\n\n\n\n\n\n\n\n\n\nYou can use a Facebook or GitHub account to sign up (I recommend the latter. See Module 05 for more info on signing up for and using GitHub) or create a new account that is specifically for Posit Cloud.\n\n\n\n\n\n\n\n\n\nOnce you are signed up, or if you have already done so, you can use your account to log in. Doing so will bring you to the landing page for your Posit Cloud account.\n\n\n\n\n\n\n\n\n\nYour account lets you access a sandboxed environment on Posit’s servers that contains R, RStudio, any packages you install, your own files, etc., which you are connecting via a web browser. You can effectively use it for development without storing anything on your local machine.\nThere, if you create a New Project, you will set up a new R project within your account space. Your account space can include multiple projects, each with its own set of associated files.\n\n\n\n\n\n\n\n\n\nRStudio running through your browser looks virtually the same as running it on your own machine. You can can install packages to your workspace, set your own preferences for the IDE, and even run different versions of R. As a free user, your workspace will have some computational limits, so it’s not going to be useful for production-level computing, but for most things we do in this class, it would be sufficient.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started with ***RStudio***</span>"
    ]
  },
  {
    "objectID": "02-module.html#customizing-the-rstudio-ide",
    "href": "02-module.html#customizing-the-rstudio-ide",
    "title": "2  Getting Started with RStudio",
    "section": "2.4 Customizing the RStudio IDE",
    "text": "2.4 Customizing the RStudio IDE\nIf you open either the Preferences (MacOS) or Global Options (MacOS or PC) dialog box in RStudio you can customize the setup and functionality of your IDE.\nIn the General section, I recommend the settings shown below, particularly about restoring your last workspace into memory upon startup and about asking if you wish to save the contents of your current workspace upon shutdown.\n\n\n\n\n\n\n\n\n\nFeel free to organize the rest of your setup as you would like. For example, you can change lots of options in the Code, Console, Appearance, and Pane Layout sections to set up the IDE as best suits your personal tastes.\n\n\n\n\n\n\n\n\n\nFinally, if you have already installed git on your computer, go to the Git/SVN section and make sure that the checkbox “Enable version control interface for RStudio projects” is selected and that the path to your git executable is filled. If you have installed git successfully, this should be filled with something like “/usr/bin/git”. If it is not, do not worry… we can set this later after installing and troubleshooting that program.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started with ***RStudio***</span>"
    ]
  },
  {
    "objectID": "02-module.html#concept-review",
    "href": "02-module.html#concept-review",
    "title": "2  Getting Started with RStudio",
    "section": "Concept Review",
    "text": "Concept Review\n\nInstalling, navigating and customizing the RStudio IDE\nRunning R and RStudio through a browser using RStudio Cloud",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started with ***RStudio***</span>"
    ]
  },
  {
    "objectID": "03-module.html",
    "href": "03-module.html",
    "title": "3  Extending the Functionality of R",
    "section": "",
    "text": "3.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extending the Functionality of ***R***</span>"
    ]
  },
  {
    "objectID": "03-module.html#objectives",
    "href": "03-module.html#objectives",
    "title": "3  Extending the Functionality of R",
    "section": "",
    "text": "The goal of this module is to show you how to extend the base functionality of R by installing and loading packages.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extending the Functionality of ***R***</span>"
    ]
  },
  {
    "objectID": "03-module.html#preliminaries",
    "href": "03-module.html#preliminaries",
    "title": "3  Extending the Functionality of R",
    "section": "3.2 Preliminaries",
    "text": "3.2 Preliminaries\n\nInstall this package in R: {easypackages}",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extending the Functionality of ***R***</span>"
    ]
  },
  {
    "objectID": "03-module.html#r-packages",
    "href": "03-module.html#r-packages",
    "title": "3  Extending the Functionality of R",
    "section": "3.3 R Packages",
    "text": "3.3 R Packages\nOne of the fantastic things about R, and one of the reasons it is such a flexible tool for so many types of data analysis, is the ability to extend its functionality in a huge variety of ways with packages. Packages are sets of reusable R functions created by the core development team or by users and are akin to libraries in other programming software, like Python. As of January 2020, there are over 15,300 packages that have been contributed to the most common package repository, hosted on the Comprehensive R Archive Network (CRAN) site.\nFrom the console prompt, packages can be installed into R (using the install.packages() function, with the name of the package in parentheses) and then loaded (using the require() or library() functions), which then gives the user access to the functions contained therein. Both RStudio and the base R GUIs for MacOS and Windows have built-in package managers that allow you to search for and install packages.\nEach package includes a namespace associated with the functions contained therein, and those functions are loaded into their own, separate R environments, distinct from the global environment, where the variables we assigned values to in Module 01 were created. An environment can be thought of as a collection of objects (functions, variables etc.) associated either globally, with the R interpreter (the “R_GlobalEnv”) or with a particular package and its namespace. In RStudio, you can see all of the objects associated with a particular environment in the Environment tab.\nIf a package is loaded that has a function with the same name as one in a previously loaded package or in base R, then the older function will be masked and the newer will be used if called by a user. This is because whenever an object is referenced in a command, the R interpreter searches for that object in various loaded environments in a particular order and operates on the first one it encounters. The global environment is searched first, followed by the environments associated with each loaded package in reverse chronological order of when they are loaded and ending with the base R environment.\n\n\n\n\n\n\n\n\n\n\n\nFROM: Wickham (2019). Advanced R, Second Edition. Chapman & Hall/CRC.\n\n\n\nHowever, functions from different packages with the same name can be called explicitly by using the :: operator, using the construct package-name::function to access the desired namespace and environment. A particular function can be called in this way even if the package as a whole has not been loaded into R using library() or require(). The search() function can be used to return a vector of environment names in the order they will be searched.\n\nInstalling Packages\n\nNOTE: A list of packages we will be using in this course is available here.\n\n\nUsing the base MacOS GUI\n\nSelect the Packages & Data menu.\nChoose Package Installer.\nSelect a package repository to install from, e.g., CRAN (binaries).\nThe first time you go to install packages, you will be prompted to select a mirror site (i.e., the remote server from where you can download any of the packages hosted in the selected package repository).\nSelect an install location. I usually install packages to the system rather than user level.\nCheck the box “Install dependencies”.\nSelect a package to install.\n\n\n\nUsing the base Windows GUI\n\nSelect the Packages menu.\nChoose Install package(s)….\nBy default, the package repository that you will install from is CRAN (binaries).\nThe first time you go to install packages, you will be prompted to select a mirror site (a.k.a., the remote server from where you can download any of the packages hosted in the selected package repository).\nSelect a package to install.\nBy default, packages are installed at the system level (inside of the library folder within your R installation), and any missing dependenices are also installed by default.\n\n\n\nUsing the R console prompt\n\nUse the function install.packages(\"&lt;package name&gt;\"), where you include, between the quotes, the name of the package you want to install. This command installs the package, by default, to the user level, though this can be changed by providing a path to install to using the lib=\"&lt;path&gt; argument. Other arguments for this function can be set to specify the repository to download from, etc.\n\n\n\nUsing RStudio\n\nSelect the Packages tab and then click the “Install” button.\nA dialog box will open where you can choose where to install the package from (the central CRAN repository is typically the source you will use) and the install location on your computer.\nYou can install packages either to the user level library (in which case, only the user who is logged in when the package is installed will have access to it) or to the system library (which will make the package available for all users).\nType the name of the package you want to install in the text field in the middle of the dialog box (code completion will list available packages that match what you are typing as you type). You can install multiple packages at the same time by separating them with a space or comma.\nMake sure the “Install dependencies” checkbox is selected… this will automatically check whether other packages that are referenced in the package you want to install are already installed and, if not, will install them as well.\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoading and Attaching Packages\nNote that installing packages simply places them into a standard location on your computer. To actually use the functions they contain in an R session, you need to also load them into your R workspace.\n\nUsing the base MacOS GUI\n\nSelect the Packages & Data menu.\nChoose Package Manager.\nCheck the box next to the package name.\n\n\n\nUsing the base Windows GUI\n\nSelect the Packages menu.\nChoose Load package….\nSelect the package to load.\n\n\n\nUsing RStudio\n\nYou can load a package interactively in RStudio by clicking the checkbox next to the package name in the Packages tab.\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the console prompt or a script\n\nThe most common way that you will load packages is to do so either interactively at the console prompt or in a script using the command library(&lt;package name&gt;) with the package name, not in quotes, as an argument.\nThe require() function is nearly identical to the library() function except that the former is safer to use inside functions because it will not throw an error if a package is not installed. require() also returns a value of TRUE or FALSE depending on whether the package loaded successfully or not. However, I almost always use the library() function in my scripts. Using library() and require() both load a package’s named components (its “namespace”) and attach those to the global environments search list.\n\n\nNOTE: When loading a package with library() or require(), the package name need not be in quotes, although it works if you were to do that.\n\nBe aware that if a named function of a package conflicts with one in an already loaded/attached package, then by default R will warn of the conflict. In that case, it is good form to use explicit function calls, i.e., use the :: operator to specify first the package and then the function (e.g., dplyr::filter()) you wish to call.\n\n\n\nWorking with Packages\n\nYou can use either of the following to list the set of packages you have installed:\n\nlibrary()\ninstalled.packages()\n\nThe command (.packages()) can be used print out the set packages that have been loaded/attached in your current workspace.\n\n\nNOTE: In the example above, the .packages() function is wrapped in parentheses to immediately print the result of the function.\n\nIn RStudio, you can also see a list of all loaded packages by clicking the down arrow next to “Global Environment” in the Environment tab.\n\n\n\n\n\n\n\n\n\n\nThe command detach(package:&lt;package name&gt;), where “package name”, not in quotes, is the name of the package you want to unload, will unload a currently loaded package from memory. You can also do this interactively in RStudio by unchecking the box next to the package name in the Packages tab.\nTo update your installed packages to the latest version, you can use the function update.packages(). Using RStudio, you can also select “Update” from the Packages tab to get an interactive dialog box showing you what updates are available from CRAN and letting you install them.\n\n\n\n\n\n\n\n\n\n\n\nTo remove installed packages from your R installation, you can use the function remove.packages() or click the small “x” to the right of the package name in the RStudio packages tab.\n\n\n\n\n\n\n\n\n\n\n\nTo process several package at once, you can pass a vector of package names to many of these functions as an argument, e.g., remove.packages(c(\"abc\",\"citr\"))\nFinally, the {easypackages} packages makes installing and loading multiple packages “easy” by introducing two helper functions, packages() and libraries(). Both let you specify a vector of package names to either install (e.g., packages(c(\"tidyverse\", \"magrittr\"))) or load (e.g., libraries(c(\"tidyverse\", \"magrittr\"))). For these functions, package names need to be specified in quotation marks.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extending the Functionality of ***R***</span>"
    ]
  },
  {
    "objectID": "03-module.html#concept-review",
    "href": "03-module.html#concept-review",
    "title": "3  Extending the Functionality of R",
    "section": "Concept Review",
    "text": "Concept Review\n\nWorking with packages: install_packages(), library(), require(), detach(), update.packages(), remove.packages(), and {easypackages}\nEnvironments and namespaces: ::, search()",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extending the Functionality of ***R***</span>"
    ]
  },
  {
    "objectID": "04-module.html",
    "href": "04-module.html",
    "title": "4  Fundamentals of the R Language",
    "section": "",
    "text": "4.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Fundamentals of the ***R*** Language</span>"
    ]
  },
  {
    "objectID": "04-module.html#objectives",
    "href": "04-module.html#objectives",
    "title": "4  Fundamentals of the R Language",
    "section": "",
    "text": "The goal of this module is review important conceptual aspects of the R language as well as practices for updating R components of interest.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Fundamentals of the ***R*** Language</span>"
    ]
  },
  {
    "objectID": "04-module.html#r-objects",
    "href": "04-module.html#r-objects",
    "title": "4  Fundamentals of the R Language",
    "section": "4.2 R Objects",
    "text": "4.2 R Objects\nAlmost everything in R can be thought of as an object, including variables, functions, complex data structures, and environments.\n\nClasses, Modes, and Types\nObjects in R fall into different classes. There are a few basic (or atomic) classes that pertain to variables: numeric (real numbers), integer (integer numbers), character (for text), logical (Boolean values, i.e., TRUE or FALSE, represented as 1 and 0, respectively), complex (for imaginary numbers), and factor (for defined levels of categorical variables… we will talk more about factors later on). There are other classes beyond this set of atomic classes relevant to variables. For example, both built-in and user defined functions have the class function. You can ask R to return the class of any object with the class() function, and R objects can have more than one class. You can think of class as being a property of an object that determines how generic functions operate with it.\nExamples:\n\n# class of a variable\nx &lt;- 4\nclass(x)\n\n## [1] \"numeric\"\n\nx &lt;- \"hi there\"\nclass(x)\n\n## [1] \"character\"\n\n# class of a function\nclass(mean)\n\n## [1] \"function\"\n\n\nIn R, environments are objects as well.\n\nWhat is the class of the global environment, where we have been binding values to variable names? To check, use class(globalenv()).\n\n\n\nShow Code\nclass(globalenv())\n\n\nShow Output\n## [1] \"environment\"\n\n\n\nObjects in R also each have a mode and a base type. These are often closely aligned with and similar to the class of an object, but the three terms refer to slightly different things. If an object has no specific class assigned to it, its class is typically the same as its mode. Mode is a mutually exclusive classification of objects, according to their basic structure. When we coerce an object to another basic structure, we are changing its mode but not necessarily the class.\n\n# mode of a variable\nx &lt;- 4\nmode(x)\n\n## [1] \"numeric\"\n\nx &lt;- \"hi there\"\nmode(x)\n\n## [1] \"character\"\n\n# mode of a function\nmode(mean)\n\n## [1] \"function\"\n\n\n\n# type of a variable\nx &lt;- 4\ntypeof(x)\n\n## [1] \"double\"\n\nx &lt;- \"hi there\"\ntypeof(x)\n\n## [1] \"character\"\n\n# type of a function\ntypeof(mean)\n\n## [1] \"closure\"\n\n\n\nNOTE: For more details on the difference between the class, mode, and base type of an object, check out the book Advanced R, Second Edition by Hadley Wickham (RStudio).\n\n\n\nVectors\nR also supports a variety of data structures for variable objects, the most fundamental of which is the vector. Vectors are variables consisting of one or more values of the same type, e.g., student’s grades on an exam. The class of a vector has to be one of the atomic classes described above. A scalar variable, such as a constant, is simply a vector with only one value.\n\nThere are lots of ways to create vectors… one of the most common is to use the c() or “combine” command:\n\n\nx &lt;- c(15, 16, 12, 3, 21, 45, 23)\nx\n\n## [1] 15 16 12  3 21 45 23\n\ny &lt;- c(\"once\", \"upon\", \"a\", \"time\")\ny\n\n## [1] \"once\" \"upon\" \"a\"    \"time\"\n\nz &lt;- \"once upon a time\"\nz\n\n## [1] \"once upon a time\"\n\n\n\nWhat is the class of the vector x? Of z? Use the class() function to check.\n\n\n\nShow Code\nclass(x)\n\n\nShow Output\n## [1] \"numeric\"\n\n\n\nShow Code\nclass(z)\n\n\nShow Output\n## [1] \"character\"\n\n\n\n\nWhat happens if you try the following assignment: x &lt;- c(\"2\", 2, \"zombies\")? What is the class of vector x now?\n\n\n\nShow Code\nx &lt;- c(\"2\", 2, \"zombies\")\nclass(x)\n\n\nShow Output\n## [1] \"character\"\n\n\n\nThis last case is an example of coercion, which happens automatically and often behind the scenes in R. When you attempt to combine different types of elements in the same vector, they are coerced to all be of the same type - the most restrictive type that can accommodate all of the elements. This takes place in a fixed order: logical → integer → double → character. For example, combining a character and an integer yields a character; combining a logical and a double yields a double.\nYou can also deliberately coerce a vector to be represented as a different base type by using an as.*() function, like as.logical(), as.integer(), as.double(), or as.character().\n\nx &lt;- c(3, 4, 5, 6, 7)\nx\n\n## [1] 3 4 5 6 7\n\ny &lt;- as.character(x)\ny\n\n## [1] \"3\" \"4\" \"5\" \"6\" \"7\"\n\n\nAnother way to create vectors is to use the sequence operator, :, which creates a sequence of values from spanning from the left side of the operator to the right, in increments of 1:\n\nx &lt;- 1:10\nx\n\n##  [1]  1  2  3  4  5  6  7  8  9 10\n\nx &lt;- 10:1\nx\n\n##  [1] 10  9  8  7  6  5  4  3  2  1\n\nx &lt;- 1.3:10.5\nx\n\n##  [1]  1.3  2.3  3.3  4.3  5.3  6.3  7.3  8.3  9.3 10.3\n\n\n\nNOTE: Wrapping an assignment in parentheses, as in the code block below, allows simultaneous assignment and printing to the console!\n\n\n(x &lt;- 40:45)\n\n## [1] 40 41 42 43 44 45\n\n\nWe can also create more complex sequences using the seq() function, which takes several arguments:\n\nx &lt;- seq(from = 1, to = 10, by = 2)\n# skips every other value\nx\n\n## [1] 1 3 5 7 9\n\nx &lt;- seq(from = 1, to = 10, length.out = 3)\n# creates 3 evenly spaced values\nx\n\n## [1]  1.0  5.5 10.0\n\n\n\n\nAttributes and Structure\nMany objects in R also have attributes associated with them, which we can think of as metadata, or data describing the object. Some attributes are intrinsic to an object. For example, a useful attribute to know about a vector object is the number of elements in it, which can be queried using the length() command.\n\nlength(x)\n\n## [1] 3\n\n\nWe can also get or assign arbitrary attributes to an object using the function attr(), which takes two arguments: the object whose attributes are being assigned and the name of the attribute.\n\n# we can assign arbitary attributes to the vector x\nattr(x, \"date collected\") &lt;- \"2019-01-22\"\nattr(x, \"collected by\") &lt;- \"Anthony Di Fiore\"\nattributes(x)  # returns a list of attributes of x\n\n## $`date collected`\n## [1] \"2019-01-22\"\n## \n## $`collected by`\n## [1] \"Anthony Di Fiore\"\n\nclass(attributes(x))  # the class of a list is 'list'\n\n## [1] \"list\"\n\n# a 'list' is another R data structure\nattr(x, \"date collected\")  # returns the value of the attribute\n\n## [1] \"2019-01-22\"\n\n\nFinally, every object in R also has a structure, which can be queried using the str() command.\n\nstr(x)  # structure of the variable x\n\n##  num [1:3] 1 5.5 10\n##  - attr(*, \"date collected\")= chr \"2019-01-22\"\n##  - attr(*, \"collected by\")= chr \"Anthony Di Fiore\"\n\nstr(mean)  # struture of the function mean\n\n## function (x, ...)\n\nstr(globalenv())  # structure of the global environment\n\n## &lt;environment: R_GlobalEnv&gt;\n\nstr(attributes(x))  # attribute names are stored as a list\n\n## List of 2\n##  $ date collected: chr \"2019-01-22\"\n##  $ collected by  : chr \"Anthony Di Fiore\"\n\n\n\nNOTE: The glimpse() function from the {dplyr} package also yields information on the structure of an object, sometimes in a more easily-readable format than str().\n\n\n\nCHALLENGE:\nTry some vector math using the console in RStudio:\n\nAssign a sequence of numbers from 15 to 28 to a vector, x.\n\n\nNOTE: There are at least two different ways to do this!\n\n\nThen, assign a sequence of numbers from 1 to 4 to a vector, y.\nFinally, add x and y. What happens?\n\n\n\nShow Code\nx &lt;- 15:28  # or x &lt;- c(15, 16, 17...)\ny &lt;- 1:4\n(x + y)\n\n\nShow Output\n##  [1] 16 18 20 22 20 22 24 26 24 26 28 30 28 30\n\n\n\n\nUse the up arrow to recall the last command from history and modify the command to store the result of the addition to a variable, z. What kind of object is z? Examine it using the class() function. What is the length of z?\n\nNow, think carefully about this output… there are two important things going on.\nFirst, R has used vectorized addition in creating the new variable. The first element of x was added to the first element of y, the second element of x was added to the second element of y, etc.\nSecond, in performing this new variable assignment, the shorter vector has been recycled. Thus, once we get to the fifth element in x we start over with the first element in y.\nThis means we can very easily do things like adding a constant to all of the elements in a vector or multiplying all the elements by a constant.\n\ny &lt;- 2\n# note that we can wrap a command in parentheses for simultaneous\n# assignment/operation and printing\n(z &lt;- x + y)\n\n##  [1] 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n\n(z &lt;- x * y)\n\n##  [1] 30 32 34 36 38 40 42 44 46 48 50 52 54 56\n\n\nMany function operations in R are also vectorized, meaning that if argument of a function is a vector, but the function acts on a single value, then the function will be applied to each value in the vector and will return a vector of the same length where the function has been applied to each element.\n\nx &lt;- 1:20\n(logx &lt;- log(x))\n\n##  [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n##  [8] 2.0794415 2.1972246 2.3025851 2.3978953 2.4849066 2.5649494 2.6390573\n## [15] 2.7080502 2.7725887 2.8332133 2.8903718 2.9444390 2.9957323\n\n(x2 &lt;- x^2)\n\n##  [1]   1   4   9  16  25  36  49  64  81 100 121 144 169 196 225 256 289 324 361\n## [20] 400\n\n(y &lt;- 4 * x + 3)\n\n##  [1]  7 11 15 19 23 27 31 35 39 43 47 51 55 59 63 67 71 75 79 83\n\n\nWe can use the {base} R function plot() to do some quick visualizations.\n\n# `plot()` takes values of x and y values as the first two arguments, and the\n# `type='o'` argument superimposes points and lines\nplot(x, logx, type = \"o\")\n\n\n\n\n\n\n\nplot(x, x2, type = \"o\")\n\n\n\n\n\n\n\nplot(x, y, type = \"o\")\n\n\n\n\n\n\n\n\n\n\nCHALLENGE:\n\nUse the rnorm() function to create a vector, s that contains a set of random numbers drawn from a normal distribution with mean 80 and standard deviation 10. Try doing this with n = 10, n = 100, n = 1000, n = 10000.\n\n\nHINT: Use ?rnorm or help(rnorm) to access the help documentation on how to use the rnorm() function.\n\nThen, use the hist() function to plot a histogram showing the distribution of these numbers.\n\n\nShow Code\ns &lt;- rnorm(n = 10000, mean = 80, sd = 10)\nhist(s)  # hist() plots a simple histogram of values for s\n\n\n\n\n\n\n\n\n\n\nUse the mean() and sd() functions to calculate the mean and standard deviation of s. Here, the whole vector is used as the argument of the function, i.e., the function applies to a set of values not a single value. The function thus returns a vector of length 1.\n\n\n\nShow Code\nmean(s)\n\n\nShow Output\n## [1] 80.15078\n\n\n\nShow Code\nsd(s)\n\n\nShow Output\n## [1] 10.06033",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Fundamentals of the ***R*** Language</span>"
    ]
  },
  {
    "objectID": "04-module.html#scripts-and-functions",
    "href": "04-module.html#scripts-and-functions",
    "title": "4  Fundamentals of the R Language",
    "section": "4.3 Scripts and Functions",
    "text": "4.3 Scripts and Functions\nAs mentioned previously, scripts in R are simply text files that store an ordered list of commands, which can be used to link together sets of operations to perform complete analyses and show results.\nFor example, you could enter the lines below into a text editor and then save the script in a file named “my_script.R” in a folder called src/ inside your working directory.\n\nx &lt;- 1:10\ns &lt;- sum(x)\nl &lt;- length(x)\nm &lt;- s/l\nprint(m)\n\n## [1] 5.5\n\n\nIf you save a script, you can then use the source() function (with the path to the script file of interest as an argument) at the console prompt (or in another script) to read and execute the entire contents of the script file. In RStudio you may also go to Code &gt; Source to run an entire script, or you can run select lines from within a script by opening the script text file, highlighting the lines of interest, and sending those lines to the console using the “Run” button or the appropriate keyboard shortcut, ⌘-RETURN (Mac) or control-R (PC).\n\nsource(\"src/my_script.R\")\n\n## [1] 5.5\n\n# assuming the file was saved with the '.R' extension...\n\nIn an R script, you might use several lines of code to accomplish a single analysis, but if you want to be able to flexibly perform that analysis with different input, it is good practice to organize portions of your code within a script into user-defined functions. A function is a bit of code that performs a specific task. It may take arguments or not, and it may return nothing, a single value, or any R object (e.g., a vector or a list, which is another data structure will discuss later on). If care is taken to write functions that work under a wide range of circumstances, then they can be reused in many different places. Novel functions are the basis of the thousands of user-designed packages that are what make R so extensible and powerful.\n\nCHALLENGE:\nTry writing a function!\n\nOpen a new blank document in RStudio\n\nFile &gt; New &gt; R Script\n\nType in the code below to create the say_hi() function, which adds a name to a greeting:\n\n\n# this function takes one argument, `x`, appends the value of that argument to\n# a greeting, and then prints the whole greeting\nsay_hi &lt;- function(x) {\n    hi &lt;- paste(\"Greetings, \", x, \"!\", sep = \"\")\n    return(hi)\n}\n\n\nNOTE: Here, the paste() command allows string concatenation. Alternatively, we could use paste0() and omit the sep= argument.\n\nIn general, the format for a function is as follows: function_name &lt;- function(&lt;arguments&gt;) {&lt;function code&gt;}\nYou can send your new function to the R console by highlighting it in the editor and hitting ⌘-RETURN (Mac) or control-ENTER (PC). This loads the function as an object into the working environment.\n\n\n\n\n\n\n\n\n\n\nNow we can create some test data and call the function. What are the results?\n\n\nname1 &lt;- \"Rick Grimes\"\nname2 &lt;- \"Ruth Bader Ginsburg\"\nsay_hi(name1)\n\n## [1] \"Greetings, Rick Grimes!\"\n\nsay_hi(name2)\n\n## [1] \"Greetings, Ruth Bader Ginsburg!\"\n\n\nYou can also save the function in a file, e.g., in the src/ folder inside your working directory, and then source(\"&lt;path&gt;\") it in code. Save your function script as “say_hi.R” and then run the following:\n\nsource(\"src/say_hi.R\")\nname3 &lt;- \"Charles Darwin\"\nsay_hi(name3)\n\n## [1] \"Greetings, Charles Darwin!\"",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Fundamentals of the ***R*** Language</span>"
    ]
  },
  {
    "objectID": "04-module.html#quitting-r-and-saving-your-work",
    "href": "04-module.html#quitting-r-and-saving-your-work",
    "title": "4  Fundamentals of the R Language",
    "section": "4.4 Quitting R and Saving your Work",
    "text": "4.4 Quitting R and Saving your Work\nWorking in RStudio, you can save script files (which, again, are just plain text files) using standard dialog boxes.\nWhen you go to quit R (by using the q() function or by trying to close RStudio), you may be asked whether you want to…\n“Save workspace image to &lt;path&gt;/.Rdata?”, where &lt;path&gt; is the path to your working directory.\nSaying “Save” will store all of the contents of your workspace in a single hidden file, named “.Rdata”. The leading period (“.”) makes this invisible to most operating systems, unless you deliberately make it possible to see hidden files.\n\nNOTE: I tend to NOT save my workspace images. You can change the default behavior for this by editing RStudio’s preferences and choosing “Always”, “Never”, or “Ask”.\n\n\n\n\n\n\n\n\n\n\nThe next time you start R, the workspace from “.RData” will be loaded again automatically, provided you have not changed your working directory and you have not unchecked “Restore .RData into workspace at startup” in preferences.\nA second hidden file, “.Rhistory”, will also be stored in the same directory, which will contain a log of all commands you sent to the console, provided you have not unchecked “Always save history”.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Fundamentals of the ***R*** Language</span>"
    ]
  },
  {
    "objectID": "04-module.html#updating-r",
    "href": "04-module.html#updating-r",
    "title": "4  Fundamentals of the R Language",
    "section": "4.5 Updating R",
    "text": "4.5 Updating R\nR has been under continuous and active development since its inception in the late 1990s, and several updates are made available each year. These update help to fix bugs, improve speed and computational efficiency, and add new functionality to the software. The following information on how to update R is based on this post from Stack Overflow\n\nStep 1: Get the latest version of R\n\nGo to the R Project website.\nClick on CRAN in the sidebar on the left.\nChoose the CRAN Mirror site that you like.\nClick on Download R for… (choose your operating system).\nFollow the installation procedures for your system.\nRestart RStudio.\n\nStep 2: Relocate your packages\n\nTo ensure that your packages work with your shiny new version of R, you need to:\n\nMove the packages from your old R installation into the new one.\nOn MacOS, this typically means moving all library folders from “/Library/Frameworks/R.framework/Versions/3.5/Resources/library” to “/Library/Frameworks/R.framework/Versions/4.3/Resources/library”\n\n\n\n\nNOTE: You should replace “3.5” and “4.3” with whatever versions you are upgrading from and to, respectively.\n\n\nOn Windows, this typically means moving all library folders from “C:\\Program Files\\R\\R-3.5\\library” to “C:\\Program Files\\R\\R-4.3\\library” (if your packages are installed at the system level) or from “C:\\Users\\&lt;user name&gt;\\R\\win-library\\3.5\\” to “C:\\Users\\&lt;user name&gt;\\R\\win-library\\4.3\\” (if your packages are installed at the user level)\n\n\nNOTE: You only need to copy whatever packages are not already in the destination directory, i.e., you do not need to overwrite your new {base} package, etc., with your old one.\n\n\nIf those paths do not work for you, try using installed.packages() to find the proper path names. These may vary on your system, depending on where you installed R\nNow you can update your packages by typing update.packages() in your RStudio console, and answering “y” to all of the prompts.\nFinally, to reassure yourself that you have done everything correctly, type these two commands in the RStudio console to see what you’ve got in terms of what version of R you are running, the number of packages you have installed, and what packages you have loaded:\n\n\nversion\npackageStatus()\n(.packages())",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Fundamentals of the ***R*** Language</span>"
    ]
  },
  {
    "objectID": "04-module.html#concept-review",
    "href": "04-module.html#concept-review",
    "title": "4  Fundamentals of the R Language",
    "section": "Concept Review",
    "text": "Concept Review\n\nCharacteristics of R objects: class(), mode(), typeof(), str(), attributes(), dplyr::glimpse()\nUsing scripts: source()\n“.RData” and “.Rhistory” files\nUpdating R and packages",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Fundamentals of the ***R*** Language</span>"
    ]
  },
  {
    "objectID": "05-module.html",
    "href": "05-module.html",
    "title": "5  Basics of Version Control",
    "section": "",
    "text": "5.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of Version Control</span>"
    ]
  },
  {
    "objectID": "05-module.html#objectives",
    "href": "05-module.html#objectives",
    "title": "5  Basics of Version Control",
    "section": "",
    "text": "To introduce the basics of working with version control systems in R, using git and GitHub",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of Version Control</span>"
    ]
  },
  {
    "objectID": "05-module.html#preliminaries",
    "href": "05-module.html#preliminaries",
    "title": "5  Basics of Version Control",
    "section": "5.2 Preliminaries",
    "text": "5.2 Preliminaries\n\nInstall this package in R: {usethis}",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of Version Control</span>"
    ]
  },
  {
    "objectID": "05-module.html#version-control-systems",
    "href": "05-module.html#version-control-systems",
    "title": "5  Basics of Version Control",
    "section": "5.3 Version Control Systems",
    "text": "5.3 Version Control Systems\nFor any of us who work with data files and associated analyses and documents over a long period of time, it can become very complicated to keep track of the “latest version” of what we’re working on. This is especially true if we are collaborating with others on a project and need to share these things back and forth. This is a problem that software developers have been dealing with for a long time, however, and there is a robust ecosystem of “version control systems” (VCSs) out there for dealing with this problem. The basic idea behind these systems is that all of the work on a particular project is stored in a repository (or repo), and as you work on and modify files and data for the project, you “commit” your changes periodically. The VCS keeps track of what changes between commits and allows you to roll back to previous versions if need be.\nYou can also branch a repository - basically, make a duplicate copy of it - and work on the new branch and then, later, merge your changes back into the main branch. Multiple people can each work on different branches simultaneously, and the software will take care of looking for and highlighting changes that occur on different branches so that they can be merged back in appropriately. This module will introduce you to one such system.\n\nNOTE: The source for some of the information covered below, along with a host of other valuable information about using R and git, is provided on the web book Happy Git and GitHub for the useR by Jenny Bryan (RStudio).",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of Version Control</span>"
    ]
  },
  {
    "objectID": "05-module.html#first-steps-with-git-and-github",
    "href": "05-module.html#first-steps-with-git-and-github",
    "title": "5  Basics of Version Control",
    "section": "5.4 First Steps with git and GitHub",
    "text": "5.4 First Steps with git and GitHub\n\nInstalling git\nOne of the most popular and frequently used VCSs is git.\n\nDownload and install git for your operating system. This will put the appropriate software on your machine.\n\n\n\n\n\n\n\n\n\n\n\nNOTE: To install on MacOS, binary installers may not be available for the newest version of git. Thus, you may need to first install the packahe manager software Homebrew and then run brew install git at the command line. Visit https://brew.sh/ for instructions on installing Homebrew.\n\nNote that git is simply a bit of software running on your own computer that watches the contents of particular user-specified folders.\nLet us now check if you have installed correctly…\n\nIn RStudio, go to the Tools menu and select Terminal &gt; New Terminal or, if it is visible, click on the Terminal tab in the lower left pane of RStudio interface. In the terminal window, type, which git. On MacOS you should see something like: /usr/bin/git or /usr/local/bin/git, which is the path to your git executable file. On Windows, you should see something like: /cmd/git\n\n\n(base) ad26693 🐵  $ which git\n/usr/bin/git\n\n\nNOTE: Your terminal prompt may look different than how I have set mine up. My prompt ends with $, which is typical for the bash shell on MacOS. You may see, for example, a prompt that ends in %, which is typical for the zsh shell.\n\n\nIn the same terminal, type git --version to see which version of git you are running. You should see something like git version 2.39.5.\n\n\n(base) ad26693 🐵  $ git --version\ngit version 2.39.5 (Apple Git-154)\n\nRunning the git --version command or the command git config on MacOS may also prompt you to install a set of developer command line tools… this is okay (and good!) to accept. Doing so will install the Xcode Command Line Tools. You can also install these using the command xcode-select --install at the terminal prompt.\n\nNOTE: See also Chapter 6 of the web book, Happy Git and GitHub for the useR\n\n\n\nRegistering a GitHub Account\nThe git software we just installed is strictly a command-line tool and is a bit difficult to pick up from scratch. However, the remote repository hosting service GitHub provides an easy to use web-based graphical interface for repository management and version control. GitHub offers the distributed version control and source code management functionality of git plus some additional features. We will get introduced to the main features of git by using GitHub.\n\nGo to GitHub.com, choose Sign up for GitHub and create your own account. You will be asked to provide an username and email address and to select a password.\n\n\n\n\n\n\n\n\n\n\n\n\nTelling git Who You Are\nThe git VCS keeps track of who makes changes to any files in a watched repository. We thus need to tell git (on your local computer) who you are so that when you make changes to a repository, either locally or remotely, they are associated with a particular user name and email. To do this within RStudio, again select Tools &gt; Terminal &gt; New Terminal (which opens a new terminal window in the bottom left pane of the IDE) or Tools &gt; Shell…, which will open up an external terminal window. Then type in the following replacing  and  with the name and the email addressed associated with the GitHub account you just set up.\n\ngit config --global user.name \"&lt;your name&gt;\"\ngit config --global user.email \"&lt;your email address&gt;\"\n\n\nNOTE: Your name and email address do not need to be in quotes unless there is a space in one of them.\n\nAlternatively, you can enter these commands directly in a terminal window that you open yourself, rather than one opened from within RStudio (e.g., by opening Applications/Utilities/Terminal.app on MacOS).\n\nNOTE: Under this setup, git is now set to link any commits to the username associated with the email address used to tag your commits, even if you enter a different user name in the --global options here. If you use an email address that is not already associated with a GitHub account, then the username entered here in the local config will appear associated with your commits.\n\nThe command…\n\ngit config --global --list\n\n… can be used to check if you set things up correctly.\nAlternatively, you can set things up from within R, rather than using a terminal, as follows:\n\n# uncomment the following line, if needed, to install the {usethis} package\n# install.packages('usethis')\n\nlibrary(usethis)\nuse_git_config(user.name = \"your name\", user.email = \"your email address\")\ndetach(package:usethis)\n\n\nNOTE: See also Chapter 7 of the web book Happy Git and GitHub for the useR\n\n\n\nAuthenticating Your GitHub Account\nBefore you can access certain resources and functionality on GitHub, you will need to “authenticate” your access to GitHub from each local machine that you might work on. Basically, this process involves providing or confirming your access credentials that prove you are who you say you are when accessing GitHub. Access credentials can include a user name and password (often coupled with 2-factor authentication), a “personal access token”, and/or an SSH key. Depending on whether we are connecting to GitHub via HTTPS (“hypertext transfer protocol secure”) or SSH (“secure shell”), we will need to use different methods of authentication (see further details below).\nTo connect to GitHub via HTTPS (which is the way I typically recommend), we will need to authenticate using a “personal access token”, or PAT. When we then try to connect to GitHub from git and are prompted for a password, we would enter this personal access token (PAT) instead. (Password-based authentication for connecting to GitHub was removed a few years back, and using a PAT is more secure.)\nTo create a personal access token, follow the steps below:\n\nStep 1:\nMake sure your email address is verified in GitHub. You probably will have done this already if you have set up a GitHub account.\n\nIn the upper-right corner of any page on GitHub, click your profile photo, then click “Settings”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the left sidebar, under the “Access” section, click “Emails”.\nUnder your email address, click “Resend verification email”.\n\nGitHub will then send you an email with a link in it. After clicking that link, you will be taken to your GitHub dashboard and see a confirmation banner.\n\nNOTE: If you have already verified your email, the “Resend verification email” option may not appear.\n\n\n\nStep 2:\nGenerate a new PAT.\n\nAgain, in the upper-right corner of any page on GitHub, click your profile photo, then click “Settings”\nIn the left sidebar of your profile page, scroll to the bottom and click “Developer settings”\n\n\n\n\n\n\n\n\n\n\n\nIn the left sidebar, expand the section on “Personal access tokens”.\n\n\n\n\n\n\n\n\n\n\n\nThere are two types of tokens you can create, “fine-grained” and “classic”, either of which is fine to create. The former offers the opportunity to finely tune control of what actions on GitHub you would be able to access through R, but the latter is easier to set up. Choose “Generate New Token” and select “classic”…\n\n\n\n\n\n\n\n\n\n\n\nGive your token a descriptive name in the “Note” field.\nSet an expiration date for the token.\nSelect scope of permissions you would like to grant this token. To use your token to access repositories from the command line and perform other actions with repositories, select the “repo” checkbox plus any other actions you would like to be able to control.\n\n\n\n\n\n\n\n\n\n\n\nScroll to the bottom of the page and click the green “Generate token” button.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe token will be a string of 40 random letters and digits. Once it has been created, copy and store it in a safe place, like a password manager. You should enter the token instead of your git password when performing operations over HTTPS. Personal access tokens can only be used for HTTPS git operations. If you instead want to use SSH, you will have to set that up using an RSA key (see details below for how to do this within RStudio).\n\n\n\nCaching Your GitHub Credentials\nIf you are not prompted for your username and password, your GitHub credentials may already be cached on your computer. If needed, you can update your credentials in your computer’s keychain to replace your old password with the token.\nIf you are running MacOS, there are several ways you can explicitly cache your credentials if you find that you are asked repeatedly for them when trying to connect to GitHub. Both require that the Homebrew package manager is installed. Visit https://brew.sh/ for instructions on installing Homebrew.\n\nUsing the GitHub CLI (Command Line Interface)\nThe GitHub CLI will automatically store your git credentials for you when you choose HTTPS as your preferred protocol for git operations and answer “yes” to the prompt asking if you would like to authenticate to git with your GitHub credentials.\n\nInstall the GitHub CLI by running brew install gh at a command prompt in a terminal window.\nIn the command line, enter gh auth login, then follow the prompts.\nWhen prompted for your preferred protocol for git operations, select HTTPS\nWhen asked if you would like to authenticate to git with your GitHub credentials, enter “Y”\n\n\n\nUsing the git Credential Manager (GCM)\ngit Credential Manager (GCM) is another way to store your credentials securely and connect to GitHub over HTTPS. With GCM, you do not have to manually create and store a personal access token, as GCM manages authentication on your behalf, including 2FA (two-factor authentication).\n\nInstall GCM by running the following commands at a terminal command prompt:\n\n\nbrew tap microsoft/git\nbrew install --cask git-credential-manager-core\n\nThe next time you clone an HTTPS URL that requires authentication, e.g., for a private repository, git will prompt you to log in using a browser window. You may be asked to authorize an “OAuth app”. If your account or organization requires two-factor authorization, you will also need to complete the 2FA challenge.\nOnce you’ve authenticated successfully, your credentials will be stored in your macOS keychain and will be used every time you clone an HTTPS URL. git will not require you to type your credentials in the command line again unless you change your credentials.\nIf you are running Windows, GCM is included with the installer for Git for Windows. During installation you will be asked to select a credential helper, with GCM being set as the default.\nThe information above was pulled from the authentication and account security sections of GitHub’s documentation. See those links for more details and recommendations for troubleshooting any problems.\nUse can also use the {usethis} and {gitcreds} packages to generate new PATs and to register your credentials with git\n\nCreate a GitHub PAT via R by running: usethis::create_github_token(). This command will access a page in your browser for setting up a new (classic) token, pre-populated with appropriate scopes for working in R\nCopy and store the token in a safe place, such as a password manager\nUse the command gitcreds::gitcreds_set() to register your token with git.\nUse the command usethis::git_sitrep() to get the rundown on your current git credentials.\n\nTroubleshooting: If you are having problems, you can try the following two steps, after generating and saving your PAT:\n\nRun credentials::git_credential_forget() to clear the credentials cache\nRun credentials::set_github_pat() and follow the prompts, which may involving pasting your saved token into one of the prompts.\n\n\n\n\nCreating a Remote Repository\nNow, we will begin demonstrating how a VCS works by first setting up and working with a remote repository (colloquially, a “repo”) hosted on GitHub. You can do this either by following the instructions laid out in the “Hello World” GitHub guide or as below:\n\nSign in to GitHub in a web browser, navigate to the “Repositories” tab on your user dashboard, and press the green “NEW” button.\n\n\n\n\n\n\n\n\n\n\n\nEnter a name for your repository (e.g., “test-repo”). By default, the repository will be designated as a “public” one. You can create “private” repositories, too, but this typically requires paying a hosting fee.\n\n\nNOTE: Do not include spaces in your repository name!\n\n\nIt is also a good idea to click the “Add a README file” checkbox under “Initialize this repository with:” so that your repository includes at least one file in it. A README file serves as a nice, introductory landing page for your repo. By creating at least one file in your repo, you will also set a default branch, named “main”, for\nWhen you are done, click the large green “Create repository” button.\n\n\nNOTE: It is also good to click the checkbox for “Add .gitignore” and select “.gitignore template R”. This will create a hidden file in which you can specify files within your repo that you DO NOT want or need to keep under version control.\n\n\n\n\n\n\n\n\n\n\nCongratulations! You’ve just set up your first GitHub hosted repository!\n\n\nChanges and Commits\n\nAs a first step to working with version control, let’s make some edits to the remote “README” file in your repository using the browser-based Markdown editor included in GitHub. Clicking the pencil icon at the top right of the “README” file will bring up the editor…\n\n\n\n\n\n\n\n\n\n\n\nYou can then type in edits, using Markdown styling.\n\n\n\n\n\n\n\n\n\n\n\nNOTE: Markdown is essentially a set of rules for how to easily style plain text files in such a way that can be easily converted and rendered in HTML, the structural language of the web. This module, and this entire website, for example, were written in RStudio using a particular version of Markdown called “Quarto Markdown”. GitHub has a nice, short tutorial that you can follow about “Mastering Markdown”. There is also a nice GitHub guide on “Documenting your Projects on GitHub” that provides a useful overview of the benefits of good documentation.\n\n\nWhen you are done editing, commit the changes to your remote “README” file by scrolling to the bottom of the editor window and clicking the “Commit Changes” button. Note that every commit you make to a repository must have some sort of brief, descriptive message associated with it. Here, GitHub has populated the message field with default text (“Update README.md”), but you can change this and, optionally, add a fuller message as well.\n\n\n\n\n\n\n\n\n\n\n\n\nWorking with Branches\nSo far, all of the changes you have made have been to the main branch of your repository, but one of the powerful features of git is that you can create different versions or branches of your repository to try out new things and then merge these back into the main branch. This feature - along with automated checking for merge conflicts created when different modifications have been made on two different branches - is what makes git and other VCSs so valuable for software development.\nHere, we are going to create a new branch of our repository, edit a file in that new branch, and then merge the changes back into the main branch.\n\nCreate a new branch of your repository (e.g., “readme-edits”) by opening the “branch” popdown menu, typing a new branch name, and then clicking on the “Create branch:” text. This will switch you over to the new branch.\n\n\n\n\n\n\n\n\n\n\n\nUsing the same procedure as above, make some edits to the “README” file on your new branch and then commit those changes. E.g., add a new section to your Markdown file…\n\nTo merge changes from the new branch back into the main branch, we now need to [1] compare changes between branches, [2] create what is called a “pull request”, and [3] pull changes from the new branch back into the main branch. Along the way, if there are any differences between the two branches that cannot be merged without “conflicts” (e.g., cases where the same section of a particular file has been modified in both branches), then these will be highlighted and a merge prevented until the conflict is resolved.\n\nStep 1\n\nReturn to the main branch by selecting the link for the repo and then confirm that you are on the main branch by selecting it from the branches popdown menu.\nThen select “Compare & pull request” to initiate a new pull request.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 2\n\nSelect the branches to compare. Choose main as the “base” branch (the branch we are comparing to and merging into) and readme-edits as the “compare” or “head” branch (the branch we are currently working in, where our most recent changes have been made).\n\n\nNOTE: You should notice that when we shifted over to the readme-edits branch, GitHub switched the “head” branch from main to readme-edits.\n\n\n\n\n\n\n\n\n\n\nAfter making these selections, scroll to the bottom of the window… there you should see you a diffs (for “differences”) section that summarizes the differences between the main (base) and compare (head) versions.\n\n\n\n\n\n\n\n\n\n\n\nStep 3\n\nInitialize the pull request by scrolling back up and pressing the green “Create pull request” button.\n\n\n\n\n\n\n\n\n\n\n\n\nStep 4\n\nSet up and then confirm the merge by pressing the green “Merge pull request” and then “Confirm merge” buttons.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 5\n\nOnce the merge has been completed, you can delete the new branch.\n\n\n\n\n\n\n\n\n\n\n\nNOTE: The “Hello World” GitHub guide also covers basics of working with branches and merging.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of Version Control</span>"
    ]
  },
  {
    "objectID": "05-module.html#connecting-git-and-github",
    "href": "05-module.html#connecting-git-and-github",
    "title": "5  Basics of Version Control",
    "section": "5.5 Connecting git and GitHub",
    "text": "5.5 Connecting git and GitHub\nNow that we some familiarity with working with a remotely hosted repository, our next step in developing a git/GitHub workflow is to make a clone of that repository on one or more local computer(s). We can then work on and commit changes locally via git and then, when we are ready, we can “push” those changes up to the remotely hosted repository on GitHub.\nSimilarly, once a local repository under version control has been created and connected to a remotely hosted version, we can also make changes remotely and then “pull” those changes down to our local repository to keep them in sync.\nIt is very easy to do this process through the RStudio IDE, as we will see below, but we are going to first do it through the command line to show you all of the steps that RStudio facilitates.\n\nCloning a Remote Repository\nThere are two ways to connect between remote and local git repositories, via either HTTPS (which stands for “hypertext transfer protocol”) or SSH (which stands for “secure shell”). Our first steps will use the first of these approaches and will create a local “cloned” copy of a remote repository we have hosted on GitHub.\n\nOpen a terminal shell. You can either do this directly from your operating system or you can access a shell from within RStudio by choosing Tools &gt; Terminal &gt; New Terminal or Tools &gt; Shell…. Again, the former command opens a new terminal within the RStudio IDE, while the latter opens an external terminal window.\nUsing the UNIX and DOS shell command cd (for “change directories”), navigate into the folder that you want your cloned repository to be created in. I typically create new repos in a dedicated folder called Repos/ that I use for development work, which I keep in my main user folder on MacOS (e.g., “~/Development/Repos”).\n\n\n(base) ad26693 🐵  $ cd ~/Development/Repos\n\n\nNOTE: Here, I am using the shortcut ~ operator to access my user home directory. You can, instead, to use the full path to your home directory, e.g., “/Users/ad26693/Desktop/Repos”.\n\n\nNow open a web browser, go to the landing page for your repository on GitHub.com, click the green button that says “Code”, then select the “HTTPS” tab and copy the web URL that shows up in the text box by clicking on the tiny clipboard icon.\n\n\n\n\n\n\n\n\n\n\nThe web URL should include your GitHub username and the name of your the repository you are cloning and look something like…\nhttps://github.com/&lt;your user name&gt;/&lt;your repository name&gt;.git\ne.g., https://github.com/difiore/test-repo.git\n\nReturn to the terminal window in RStudio or to the external shell prompt and type: git clone followed by the copied URL. For example…\n\n\n(base) ad26693 🐵  $ git clone https://github.com/difiore/test-repo.git\n\n\nNOTE: Here, you may be asked for your GitHub username and password… if so, enter you “personal access token” instead of the password.\n\nThe output should look something like:\n\nCloning into 'test-repo'...\nremote: Enumerating objects: 11, done.\nremote: Counting objects: 100% (11/11), done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 11 (delta 1), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (11/11), done.\nResolving deltas: 100% (1/1), done.\n\nIf you then navigate into the newly created local directory using the cd command, you can list and look at the cloned files. To do so, at the shell prompt type…\n\ncd test-repo (to change into the correct directory)\nls -a (to list all the files in the directory)\nhead README.md (shows the first few lines of the file “README.md”)\ngit remote show origin (shows information about the remote repository, including the branch that “push” and “fetch” commands will be applied to and which branch is being tracked locally)\n\nThe output should look something like…\n\n(base) ad26693 🐵  $ cd test-repo/\n(base) ad26693 🐵  $ ls -a\n.     ..    .git    .gitignore    README.md\n(base) ad26693 🐵  $ head README.md\n# test-repo\n\nI am making some edits to this README file using Markdown!\n\n## This is a level 2 heading\n\nI can use simple text formating to make **bold** or *italicized* text!\n\n## Added this new section on a branch\n(base) ad26693 🐵  $ git remote show origin\n* remote origin\n  Fetch URL: https://github.com/difiore/test-repo.git\n  Push  URL: https://github.com/difiore/test-repo.git\n  HEAD branch: main\n  Remote branches:\n    main         tracked\n    readme-edits tracked\n  Local branch configured for 'git pull':\n    main merges with remote main\n  Local ref configured for 'git push':\n    main pushes to main (up to date)\n\n\n\nMaking and Pushing Local Changes\nNow, edit one of the local files in your repo. You can do this by opening the “README.md” file in any text editor (e.g., use the shell command open README.md, make some changes, and save) or by using the shell commands echo and &gt;&gt; (which redirects output to a file instead of the command prompt) to add text to the end of the file (e.g., echo \"Here is some new text I am adding from the shell to update the README file.\" &gt;&gt; README.md).\nYou can also do this by navigating to the “README.md” file through the normal Windows or MacOS file manager, opening it up, and editing it with any plain text text editor like Visual Studio Code or BBEdit.\nIf you now type git status at the shell prompt, you will see a message that the “README.md” file has been changed:\n\n(base) ad26693 🐵  $ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n  modified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nTo propagate our changes back up to the remote repository, we now need to do three things: [1] First, we need to “stage” or “add” the files to a queue of local changes. [2] We then need to “commit” those changes to our local repository so that git acknowledges that changes have been made and approved. [3] Finally, we then need to “push” the committed changes up across the internet to the remote repository hosted on GitHub. These are done with the git commands add, commit, and push in the shell as follows:\n\n(base) ad26693 🐵  $ git add -A\n(base) ad26693 🐵  $ git commit -m \"A commit from my local repo\"\n[main e724f84] A commit from my local repo\n 1 file changed, 1 insertion(+)\n \n(base) ad26693 🐵  $ git push\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 387 bytes | 387.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo https://github.com/difiore/test-repo.git\n   280fb0a..e724f84  main -&gt; main\n\n\nNOTE: The -A argument following the git add command means to stage all files in the repo that have changed since the last commit (in this case, we have only one, “README.md”). The -m argument following git commit indicates the message we want to include with our commit. It is necessary to include SOME message with each commit, and it is good practice to include a short description of what the commit includes, e.g., “Updating README file”.\n\nTo confirm that your edits have in fact been pushed up successfully, return to the landing page for your repository on GitHub in your web browser and hit refresh… you should see that the “README.md” file has been updated with new text!\n\n\n\n\n\n\n\n\n\nAnd if you click on the “commits” history on the right hand site of message block above the updated README file, you should see one with the message “A commit from my local repo”.\n\n\n\n\n\n\n\n\n\n\nNOTE: See also Chapters 9 to 12 of the web book, Happy Git and GitHub for the useR\n\n\n\nPulling Changes from GitHub\nSimilarly, we can make edits to files in a remote repository on GitHub using the service’s web-based Markdown editor and then then “pull” those down to our local repository.\n\nIn your web browser, navigate to the page for your repository (e.g., “test-repo”) and again click on the pencil icon at the top right of the “README” file in a remote repository to bring up the editor.\n\n\n\n\n\n\n\n\n\n\n\nAdd some new text to the file and then scroll to the bottom of the page and “commit” your changes - remember that you need to enter a commit message in the text box (or accept the default “Update README.md” that is auto-filled).\nReturn to the shell prompt inside the local directory for your repository and enter the command git pull. You should see something like the following, indicating that the main branch of the local repository has been “fast-forwarded” to the state of the remote main branch that is being tracked:\n\n\n(base) ad26693 🐵  $ git pull\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 730 bytes | 182.00 KiB/s, done.\nFrom https://github.com/difiore/test-repo\n   e724f84..8734542  main       -&gt; origin/main\nUpdating e724f84..8734542\nFast-forward\n README.md | 2 ++\n 1 file changed, 2 insertions(+)\n\nIf you run the command git pull and the local repo is in sync with the version hosted on GitHub, you should see something like the following:\n\n(base) ad26693 🐵  $ git pull\nAlready up to date.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of Version Control</span>"
    ]
  },
  {
    "objectID": "05-module.html#additional-useful-information",
    "href": "05-module.html#additional-useful-information",
    "title": "5  Basics of Version Control",
    "section": "5.6 Additional Useful Information",
    "text": "5.6 Additional Useful Information\n\nUsing the Shell\nRStudio provides an interface to the most common version control operations including managing changelists, “diffing” files, committing, and viewing history. While these features cover basic everyday use of git, as we have seen above, we may also occasionally need to use the command line in either a system shell to access all of the underlying functionality of git.\nRStudio includes functionality to make it very straightforward to use various system shells with projects under version control. This includes:\n\nYou can use the Tools &gt; Terminal &gt; New Terminal and Tools &gt; Shell… commands to open a new terminal within RStudio or a new system shell window with the working directory already initialized to your project’s root directory.\nWhen using git on Windows, these command by default should open the Git Bash shell, which is a port of the Unix bash shell to Windows that has been specially configured for use with a version of git called MSYS Git. Note that you can disable this behavior and use the standard Windows command prompt instead choosing using Tools &gt; Global Options and selecting an alternative terminal in the Terminal section).\n\n\n\nUsing SSH instead of HTTPS\nRemote repositories under version control can be accessed using a variety of internet file transfer protocols, including HTTPS (the protocol used above) and SSH (“secure shell”), a different file transfer protocol that does not require sending a user name and email address for authentication with every information transfer request. Typically, the authentication for an SSH connection is done using what are know as public/private RSA key pairs. This type of authentication requires two steps:\n\nGenerating a public/private key pair\nProviding the public key to the hosting provider (e.g., GitHub or another service)\n\nWhile Linux and Mac OSX both include SSH as part of the base system, Windows does not. As a result the standard Windows distribution of git (MSYS Git, referenced above) also includes an SSH client.\nIf you are interested in using SSH for connecting with GitHub, you can do the following within RStudio:\n\nStep 1\n\nCreate an RSA Key\n\nIn the “Git/SVN” tab of the Tools &gt; Global Options dialog box, press the button Create RSA key, which will create a new code that you will need for using SSH to send and receive data from remote servers as an alternative to the somewhat less secure HTTPS protocol we have already seen.\n\n\n\n\n\n\n\n\n\n\n\nStep 2\n\nView and Copy the RSA Key\n\nFrom the “Git/SVN” tab of the Tools &gt; Global Options dialog box, press the text link View public key, copy the displayed key, and close out of the dialog box.\n\n\n\n\n\n\n\n\n\n\n\nStep 3\n\nSet Up your GitHub Account for SSH\n\nGo to your GitHub account online, open your profile/account settings, and then select the “SSH & GPG keys” tab.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick “New SSH key”, fill out a title for the new key (e.g., “Connect to GitHub from RStudio”), paste in the public key that you copied from RStudio (see above), and then click “Add SSH key” at the bottom of the window.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now be set up to use SSH in lieu of HTTPS URLs for cloning repositories and for pushing to/pulling from remote repositories on GitHub. These URLs take the form of git@github.com:&lt;your user name&gt;/&lt;your repository name&gt;.git\n\n\nStep 4\n\nClone the remote repository\n\nThe process is essentially the same as we used above for cloning via HTTPS.\n\nOpen a web browser, go to your repository on GitHub.com, click the green button that says “Clone or download” (but now choose “Clone with SSH”), and copy the URL that shows up in the text box.\n\n\n\n\n\n\n\n\n\n\n\nGo to a shell prompt, cd to the directory that you want the repository to be downloaded into, and type: git clone followed by the copied SSH URL, e.g., git clone git@github.com:&lt;your user name&gt;/&lt;your repository name&gt;.git\n\nThe output should look something like:\n\n(base) ad26693 🐵  $ git clone git@github.com:difiore/test-repo.git\nCloning into 'test-repo'...\nThe authenticity of host 'github.com (140.82.113.3)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n\nHere, you can answer yes and hit .\n\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\nremote: Enumerating objects: 17, done.\nremote: Counting objects: 100% (17/17), done.\nremote: Compressing objects: 100% (15/15), done.\nremote: Total 17 (delta 3), reused 3 (delta 1), pack-reused 0\nReceiving objects: 100% (17/17), done.\nResolving deltas: 100% (3/3), done.\n\n\n\n\nSwitching Transfer Protocols\nWe can check what protocol you are using to connect to a remote repository by cding into the repository and then typing git remote -v. You should then see something like:\n\n(base) ad26693 🐵  $ git remote -v\norigin  git@github.com:difiore/test-repo.git (fetch)\norigin  git@github.com:difiore/test-repo.git (push)\n\nTo change the protocol we use, we simply point git to the URL associated with the desired transfer protocol. The following commands switch us from using SSH to HTTPS, then back.\n\n(base) ad26693 🐵  $ git remote set-url origin https://github.com/difiore/test-repo.git\n(base) ad26693 🐵  $ git remote -v\norigin  https://github.com/difiore/test-repo.git (fetch)\norigin  https://github.com/difiore/test-repo.git (push)\n(base) ad26693 🐵  $ git remote set-url origin git@github.com:difiore/test-repo.git\n(base) ad26693 🐵  $ git remote -v\norigin  git@github.com:difiore/test-repo.git (fetch)\norigin  git@github.com:difiore/test-repo.git (push)\n\n\n\nUsing git with Windows\nSometimes, getting git set up and working properly on Windows machines can be a bit tricky, but I have included information below that might be helpful if you experience difficulties. These notes and procedures were useful for me to install git on a Windows 10 PC and to connect it successfully with RStudio.\n\nSome Notes\n[1] When you install git and you are going through the installation dialog boxes, you can keep the defaults on all of them - just be sure to confirm that…\n\nIn the box about “Adjusting your PATH environment” you check the radio button to say “Git from the command line and also from 3rd party software”\n\n\n\n\n\n\n\n\n\n\n\nIn the box about “Configuring the terminal editor to use with Git Bash” you check the radio box that says “Use MinTTY (the default terminal of MSYS2)”\n\n\n\n\n\n\n\n\n\n\n\nNOTE: As part of its installation on a Windows PC, git will also install another piece of software, Git Bash, which is basically on alternative “shell” program you can use to access your computer’s OS directly. It is analogous (but with somewhat different functionality) to the Windows COMMAND PROMPT and the Windows POWER SHELL.\n\n[2] If you poke around the directory system on your Windows machine, you will find that when you install git it appears to put four, slightly different git.exe files on your computer. Here is a summary of what I think they are and how I think they function, based on searches on StackOverflow\nFile 1. C:\\Program Files\\Git\\bin\\git.exe\nWhen you open RStudio after installing git and then go to Tools &gt; Global Options and select the Git/SVN section, you should see the path above appear in the text box for “Git executable”.\nI am not entirely sure that this is the case, but I THINK this git.exe file simply links an executable file that is actually stored in a different place (see File 2. below), but this is where many programs will expect to find the git executable by default.\nRStudio should find and fill in this path by itself, but if it does not, then click the “Browse” button next to the text box and browse to select this file: “C:Files.exe”\nFile 2. C:\\Program Files\\Git\\cmd\\git.exe\nThis is the executable file that is accessible via a PATH environmental variable that should get added to your Windows environment automatically when you installed the git software with the defaults noted above.\nThus, after installing git and restarting your computer, when you then choose Tools &gt; Shell… or Tools &gt; Terminal &gt; New Terminal from RStudio and type which git in the shell that opens up, it should be THIS executable which is called and returned. That is, if you access the shell or terminal from RStudio and type which git you should get /cmd/git.\n\n\n\n\n\n\n\n\n\nFile 3. C:\\Program Files\\Git\\mingw64\\bin\\git.exe\nThis version of the git executable is what opens if you directly open the Git Bash shell, rather than opening it from within RStudio.\nAfter installing git, you can access Git Bash from the Windows start menu (i.e., the menu that pops up from clicking the Windows icon at the bottom left of your Windows desktop). If you select Git &gt; Git Bash from the start menu, a shell window will open up, and if you then type which git there, it will return /mingw64/bin. Honestly, I have no idea why accessing the Git Bash shell this way rather than through RStudio runs a different instance of git!\n\n\n\n\n\n\n\n\n\nFile 4. C:\\Program Files\\Git\\mingw64\\libexec\\git-core\\git.exe\nThis is another version of the executable that is used by the Git Bash shell. I think it probably just points to the one listed in File 3.\nThe fact that multiple versions of slightly different git executables are installed in different places means that we need to be careful that the right one is used when we try to access git from RStudio. Below, I have tried to distill what we need to know to get things to work for Windows users.\nThus, with the above in mind, if you are having issues with your git installation for Windows, try the following…\n\n\nPreliminaries\nConfirm that your “HOME”” environmental variable is set to the root of your user folder. To do this, open the Environmental Variables Control Panel, look in the top panel (“User variables for USERNAME”) and confirm that there is a “HOME” variable and it has the path to your user folder. If not, create a new variable called “HOME” and enter the path or modify the path.\n\nNOTE: When I set up my Windows machine, there was no “HOME” variable yet specified… I had to create one. Setting this is important because the git config --global commands you will run below set up and then look for an invisible file, .gitconfig, at the root of your home folder.\n\n\n\nStep 1\nDownload git for Windows from the git website.\nInstall it using the default settings in the installation dialog boxes. This should add C:\\Program Files\\Git\\cmd to your Windows PATH (which contains a list of directories that is loaded into your Windows environment when you either start up Windows or log in, which tells Windows where to search for any installed executable software it is asked to run).\n\n\nStep 2\nLog out of Windows and log in again or completely restart Windows.\nWe need to log out and log in again or restart Windows to have the PATH environmental variable updated. This, I think, is one of the issues folks were having.\n\n\nStep 3\nStart up RStudio and check that the path to the git executable in Tools &gt; Global Options &gt; Git/SVN is set to C:\\Program Files\\Git\\bin\\git.exe I think it should be set automatically, but if not, click the “Browse” button next to the text box and find this path and then restart RStudio.\n\n\n\n\n\n\n\n\n\n\nNOTE: The git icon and tab will likely NOT YET APPEAR in your RStudio IDE.\n\n\n\nStep 4\nIn Tools &gt; Global Options &gt; Terminal, make sure that new terminals are set to open with Git Bash rather than some other shell. You can set this in the pop down menu “New terminals open with…” There seemed to be an issue that some folks had where new terminal windows were opening at the COMMAND PROMPT, which is not what we want but is easily corrected.\n\n\n\n\n\n\n\n\n\n\n\nStep 5\nChoose Tools &gt; Shell… or Tools &gt; Terminal &gt; New Terminal and confirm that you are opening in the Git Bash shell. This should be the case if you have done step 4 above. The command prompt will read something like…\n\nIn green: YOUR.USERNAME@YOUR.COMPUTER NAME\nIn purple: MSYS (the default name for the MinTTY Git Bash shell)\nIn orange: The name of the directory/repository you are currently in (i.e., your current working directory)\nThe typical bash command prompt: $\n\n\n\n\n\n\n\n\n\n\n\nNOTE: If your current directory is under version control (e.g., if you are opening a shell for a project that you are already managing with git) then the name of the branch you are on will be listed in in blue parentheses.\n\n\n\n\n\n\n\n\n\n\n\n\nStep 6\nConfirm that git is available by typing which git. It should return /cmd/git\n\n\n\n\n\n\n\n\n\n\n\nStep 7\nSet your git identity as instructed above by typing the following at the command prompt:\n\ngit config --global user.name \"&lt;your name&gt;\"\ngit config --global user.email \"&lt;your email address&gt;\"\n\n\nNOTE: Your name and email address do not need to be in quotes unless there is a space in one of them.\n\n\n\nStep 8\nCheck your configuration by typing the following at the command prompt:\n\ngit config --list\n\nYou should get a list of settings that includes at least two settings, user.name and user.email, that match what you just entered.\n\n\n\n\n\n\n\n\n\n\n\nStep 9\nReturn to RStudio and start a new project (File &gt; New Project) from a “New Directory” (e.g., “test-repo”).\nCheck the box indicating that you want to “Create a git repository”, RStudio should close and reopen and the git icon and git tab should now appear in the IDE. Also, if you now open a project that is already under version control (e.g., that you clone from GitHub), then these should also appear.\n\n\n\n\n\n\n\n\n\nVoíla!!! You should now be ready to go! Try creating a new file in your project and then committing it, as described above.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of Version Control</span>"
    ]
  },
  {
    "objectID": "05-module.html#concept-review",
    "href": "05-module.html#concept-review",
    "title": "5  Basics of Version Control",
    "section": "Concept Review",
    "text": "Concept Review\n\nSetting up git\nSetting up GitHub\nWorking in the Terminal/Shell\nCloning a remote repository\ngit basics\n\nStaging and committing changes to a repository\nPushing to and pulling from a remote repository",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basics of Version Control</span>"
    ]
  },
  {
    "objectID": "06-module.html",
    "href": "06-module.html",
    "title": "6  Reproducible Research",
    "section": "",
    "text": "6.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "06-module.html#objectives",
    "href": "06-module.html#objectives",
    "title": "6  Reproducible Research",
    "section": "",
    "text": "In the last module, we introduced the concept of version control and looked at tools for interfacing between between a repository maintained remotely on GitHub and a local repository, using the version control system, git. Now, we are going to learn how we can use RStudio to manage the git/GitHub version control workflow. An additional objective of this module is to promote the ideas of reproducible research practice and literate programming by introducing you to RMarkdown and Quarto, which are both plain-text document formats that allow us to mix text and code in a flexible way and to generate a variety of nicely rendered outputs (e.g., websites, books, PDFs, presentations, and other media formats).",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "06-module.html#preliminaries",
    "href": "06-module.html#preliminaries",
    "title": "6  Reproducible Research",
    "section": "6.2 Preliminaries",
    "text": "6.2 Preliminaries\nAs a first step, if you haven’t done so already in Module 02, open the Preferences pane in RStudio (MacOS), go to the Git/SVN section, and make sure that the checkbox “Enable version control interface for RStudio projects” is selected. Alternatively, you can access the same dialog box by choosing Global Options from the Tools menu (MacOS and PC).\n\n\n\n\n\n\n\n\n\nIn this dialog box, also confirm that the path to your git executable is filled in and correct. If you have already successfully installed git, this should be filled with something like “/usr/bin/git” (on MacOS or Linux) or “C:\\Program Files\\Git\\bin\\git.exe” on Windows). If it is not, then you can try troubleshooting by following the recommendations in Chapters 13 and 14 of the web book Happy Git and GitHub for the useR.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "06-module.html#backstory",
    "href": "06-module.html#backstory",
    "title": "6  Reproducible Research",
    "section": "6.3 Backstory",
    "text": "6.3 Backstory\nReproducible research refers to the practice of conducting and disseminating scientific research in a way that makes data analysis (and scientific claims more generally) more transparent and repeatable Academics already have means of sharing methods and results generally, through publications (although perhaps typically in less than complete detail), and we can share the data on which those our analyses are based by depositing them in some form of online repository (e.g., via “supplementary information” that accompanies an article or by posting datasets to repositories like the Dryad Digital Repository or Figshare.\nBut how do we share the details of exactly how we did an analysis? And how can we ensure that it is possible for us to go back, ourselves, and replicate a particular analysis or data transformation? One solution is to integrate detailed text describing a workflow and analytical source code (such as R scripts) together in the same document.\nThis idea of tying together narrative, logic, specific code, and data (or references to them) in a single document stems from the principle of literate programming developed by Donald Knuth. Applied to scientific practice, the concept of literate programming means documenting both the logic behind and analysis and the code used to implement that analysis using computer software. This documentation allows researchers to return to and re-examine their own thought processes at any later time, and also allows them to share their thought processes so that others can understand how an analysis was performed. The upshot is that our scholarship can be better understood, recreated, and independently verified.\nThis is exactly the point of an RMarkdown or Quarto document and of other, similar document formats (e.g., R Notebooks, iPython Notebooks, or Julia Notebooks).\nSo, how does this work?\nFirst, as we saw in the last module, Markdown, is simply a formal way of styling a plain text document so that it can be easily rendered into HTML or PDF files for sharing or publishing. It is based on using some simple formatting and special characters to tag pieces of text such that a parser knows how to convert a plain text document into HTML or PDF. This link takes you to a classic description of Markdown, its syntax, and the philosophy behind it written by John Gruber, Markdown’s creator. There are now several different “dialects” of Markdown that have been developed, derived from Gruber’s original suggestions, including a specific one used on GitHub called “GitHub Flavored Markdown”, or GFM. A guide to this dialect is provided as a PDF here and is available online at this link.\nRMarkdown and Quarto documents are very similar extensions of standard Markdown that allows you to embed chunks of R code (or code blocks of other programming languages, e.g., Python, Latex), along with additional parsing instructions and options for running code, in a plain text file. During the parsing and rendering (or “knitting”) stage, when the text file is being converted to HTML or PDF format, the output of running the embedded code can also be included.\nRMarkdown uses the package {knitr} to produce intermediate files that can then be translated into a variety of formats, including HTML, traditional Markdown, PDFs, MS Word documents, web presentations, and others. A cheatsheet on RMarkdown syntax (which, again, is very similar to Markdown) can be found here. Quarto documents use a separate piece of independent software, quarto (along with {knitr}, in some cases), to do the same thing. An overview and useful definitive guide to all you can do with Quarto can be found here\nIt is important to stress that Markdown (“.md”), RMarkdown (“.Rmd”) and Quarto (“.qmd”) files ARE JUST PLAIN TEXT files! They are easy to work with, easy to share, easy to edit, easy to put under version control, and robust to changes in proprietary file formats!\nAs a demonstration of reproducible research workflow and best practices, we are going to create a new R project and corresponding repository that we will track with version control using git. Within that project, we then are going to create an RMarkdown document in which you can take notes or practice coding during class today.\nAs we have seen already, git, at its heart, is a command-line tool, but both local (on your computer) and hosted (e.g., on GitHub) git repositories can be managed using a dedicated git client GUI, such as GitHub Desktop, GitUp, GitKraken, SourceTree, or a host of others. Importantly for us, though, RStudio is designed to also function as a powerful git client. We will explore several ways of setting up RStudio to manage both local and remote copies of a git repository and of keep them in sync.\n\nNOTE: See also Chapters 8 and 12 of the web book Happy Git and GitHub for the useR for more information on managing git and GitHub through RStudio.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "06-module.html#organizing-work-with-r-projects",
    "href": "06-module.html#organizing-work-with-r-projects",
    "title": "6  Reproducible Research",
    "section": "6.4 Organizing Work with R Projects",
    "text": "6.4 Organizing Work with R Projects\nThe easiest way to get RStudio to play nicely with git and GitHub for version control - and a recommended best practice - is to organize your work in RStudio using projects. You can think of an R project as a convenient workspace that is associated with its own working directory, data files, scripts, images, history log, etc. We might, for example, create a separate R project for each manuscript that we are working on.\n\nNOTE: Not surprisingly, the idea of an RStudio “project” (i.e., an organizing workspace and its associated files) and a “repo” (a directory that is under version control) go together nicely. It is, however, totally possible to create RStudio projects without having them be under version control, and it is also quite possible to use git or another VCS to track changes to files in a directory without there being an associated RStudio project!\n\nBasically, creating an RStudio project means creating a special text file (“.Rproj”) that stores settings for particular RStudio setup and session. When we open an “.Rproj” file, the working directory is automatically set to the root directory for the project (i.e., the directory in which the actual “.Rproj” file is stored), which makes organizing and navigating around the computer’s filesystem, either from the command line or in R scripts within the project, much easier.\n\nWorkflows for Creating Projects\nFor the sake of security, reproducibility, and collaboration, it makes a lot of sense for us to have all of our data science/data analysis projects both be under version control (e.g., using git) and hosted remotely on a secure and reliable platform (e.g., GitHub) that we and collaborators can access from different locations. There are multiple ways we can accomplish this.\nFor example, we could begin by setting up a new repository remotely, as we did in Module 05, and then “clone” it to our local computer and establish it as a version-controlled RStudio project. Alternatively, we could first create a new version-controlled RStudio project in a local directory and then push it up to GitHub or some other hosting site. [For either of these scenarios, we could also begin with either a new (empty) repository or with one that already has files in it.] We will go through all of these methods below, but I personally think the first process - beginning with a remote repository - is the easiest and most intuitive, but I describe all of these approaches further below.\n\nMethod 1: Create a new RStudio project by cloning from a remote repository\nPerhaps the easiest way to get RStudio working nicely with git and GitHub is by creating a new repository on GitHub and then “cloning” this remote repository to a local computer and placing it under version control.\n\nNOTE: Before completing the following, you should make sure to delete any existing local version of the remote repository that you might have cloned previously, e.g., by moving it to the Trash on MacOS or the Recycle Bin on Windows. This is because if you try to clone a remote repository into an existing directory, you will get an error!\n\n\nStep 1\n\nFirst, as described in Module 05, go to your user profile in GitHub and create a new repository.\n\nYou will need to specify a repository name (with no spaces), whether it is a public or private repository, and whether to initialize the repository with one or more files already in it. I recommend initializing with both a “README” file and with a “.gitignore” file. You can also choose to use an R template to follow for the “.gitignore” file. The “.gitignore” file is simply a text document the provides git with a list of files that you ask it NOT to track changes to. These are typically either very large files (e.g., data files) or various hidden files that are either unnecessary or undesirable to track every single change to.\n\nOnce your repository is created, go to the green “Code” popdown menu and click the clipboard icon to copy the repository’s HTTPS URL. This is the same process we used in Module 05 for cloning a remote repository, and the URL is likely to be https://github.com/ followed by &lt;your user name&gt;/&lt;your repository name&gt;).\n\n\n\nStep 2\n\nFrom the File menu in RStudio, choose New Project and select to “Checkout a project from a version control repository”…\n\n\nNOTE: This step can also be done from the popdown menu located at the top right of the RStudio IDE.\n\n\n\n\n\n\n\n\n\n\n\nChoose the top item, “Clone a project from a Git repository”…\n\n\n\n\n\n\n\n\n\n\n\nIn the subsequent dialog box, paste in the “Repository URL:” you copied in Step 1.\n\nYou can choose what parent folder to clone the repository into using the “Create project as a subdirectory of:” field (e.g., ~/Development/Repos). In most cases, the “Project directory name:” field will be filled in automatically, as the name of the remote repository you are cloning.\n\n\n\n\n\n\n\n\n\nHitting the “Create Project” button will download the repository from GitHub into a new directory on your local computer. RStudio will close and reopen, after which the working directory will be set to the new local repository directory, which you can confirm by typing getwd() at the R console prompt. The local directory is now set up to be tracked by git on your local computer and should be connected to GitHub.\nSelecting the Files tab in RStudio will then show you all of the files in the newly created local repository, which should now contain a “.gitignore” file and an “.Rproj” file with the name of your project (e.g., “test-repo.Rproj”), in addition to the “README.md” file you created on GitHub.\nYou should now also see a “Git” tab in the upper right pane of the RStudio IDE, and that tab should list the “.Rproj” file associated with the status ?, indicating that it has not yet been added, committed, or synced with the remote repository. The other two files (“.gitignore” and “README.md”) are already in sync.\n\n\n\n\n\n\n\n\n\n\n\nOther Notes\nThis process works identically if you want to clone a repo from GitHub that already has other files in it besides “.gitignore” and “README.md”. In that case, RStudio will simply just create the “.Rproj” file and modify any existing “.gitignore” file to also include one or more other files that it recommends that git not track, e.g., “.Rproj.user”. The new “.Rproj” file and modified “.gitignore” file, which were created locally, should appear under the “Git” tab with with the status ? until you add, commit, and push them.\nThe process also works the same if you set up an empty repo on GitHub, in which case you will have seen the window below immediately upon creating the repository:\n\n\n\n\n\n\n\n\n\nHere, grabbing the URL from the “Quick setup” section and using that to set up a new project is RStudio is exactly the same process as we followed above.\n\nNOTE: You could also, in a terminal window, navigate to where you want the remote project to be cloned and follow either the “… or create” or “… or push” instructions listed. Doing so will link a local directory to the remote repo you created on GitHub BUT you will then not have created that as an RStudio project and would need to follow up with other instructions below about creating a new project from an existing local directory.\n\n\n\n\nMethod 2: Creating a new RStudio project under version control in a new directory\n\nIn RStudio, select File &gt; New project and click New Directory.\n\n\n\n\n\n\n\n\n\n\n\nChoose the project type as “New Project”, then name the directory and choose where you would like it to be stored, checking the box marked Create a git repository, and pressing “Create Project”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRStudio will create a new directory for you with an “.Rproj” file (with the name of your project) and a “.gitignore” file inside of it. This directory is now being tracked by git and RStudio. You can now create and edit files in this new directory and stage and commit them locally directly from RStudio. See the section below on “Modifying Files Locally” in RStudio.\n\n\nNOTE: It is important to remember that this project is still only under local version control… you will not yet be able to push changes up to GitHub. To do that, see the section below on “Connecting a Local Repo to GitHub”.\n\n\n\nMethod 3: Creating a new RStudio project in an existing directory\nIf you have an existing directory on your local computer that is already under git version control, then you can simply create a new RStudio project for that directory, and version control features will be automatically enabled. To do this:\n\nExecute the New Project command (from the File menu)\nChoose to create a new project from an Existing Directory\n\n\n\n\n\n\n\n\n\n\n\nSelect the appropriate directory and then click Create Project\n\nNew “.Rproj” and “.gitignore” files will be created inside of that directory, and RStudio’s version control features will then be available for that directory. Now, you can edit files currently in the directory or create new ones, as well as stage and commit them to the local repository directly from RStudio. See the section below on “Modifying Files Locally” in RStudio.\nIf you create a new project for a directory that was not already under version control, you can enable version control within RStudio by choosing Tools &gt; Project Options to open the Project Options dialog box. Once there, go to the Git/SVN section and choose “Git” from the “Version control system” popdown menu, and then confirm that you want to set up version control for the project. You can also enable version control for a new project in a directory not formerly under version control by running the use_git() command from the {usethis} package. In either case, again, new “.Rproj” and “.gitignore” files will be created inside that directory, and RStudio’s version control features will then be available.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE: Again, it is important to remember that local projects created via Method 2 and Method 3 are still only under local version control… you will not yet be able to push any additional files you add to the project directory or changes to local files up to GitHub. To do that, see the section below on “Connecting a Local Repo to GitHub”.\n\n\n\n\nConnecting a Local Repo to GitHub\nTo create a new remote repository on GitHub into which you can push the contents of an existing local repository, e.g., one created by Method 2 or Method 3 above, so that it is also backed-up off site and accessible to you or collaborators working at different locations, you have a couple of different options (see also Chapter 17 of the web book Happy Git and GitHub for the userR).\n\nOption 1: Use the {usethis} package to create a new remote repository on GitHub from within RStudio\n\nStep 1\n\nMake sure you have configured a GitHub Personal Access Token (PAT) using the process outlined in Module 5.\n\nBriefly… - Login to your GitHub account and go to the Settings tab. Then select Developer Settings and then Personal Access Tokens. - Select Generate new token, create a new “classic” token, and give it a nickname that reminds you of the intended purpose (e.g., “GitHub Access from R”). - Pick a scope that confers the privileges you need, e.g., repo, and then press the green “Generate Token” button. - Copy this token to a safe place, and register this credential with git using one of the methods outlined in Module 5\n\n\nStep 2\n\nCreate a remote repository on GitHub and push a local repository to it:\n\nOpen the RStudio project that you want to create a remote repository for. This project needs to be under version control already and include at least one commit.\nAt the R console prompt within the project’s working directory, type usethis::use_github(protocol=\"https\")\nAnswer the question about whether the suggested name for the remote repository is adequate.\nThis should create a new repository on GitHub, add it as a remote origin/main, set up a tracking branch, and open it in your browser.\n\n\nFrom within RStudio, you can now add or edit files to the project, locally commit any changes you make to those files, and push them up to GitHub as described above.\n\n\n\nOption 2: Set up a dummy remote repository on GitHub and push to it from within RStudio\n\nGo to the GitHub website and create a new, empty repository. You can use the same name as that of the RStudio project you want to push up, or you can create a different one.\n\n\n\n\n\n\n\n\n\n\n\nNOTE: In setting up the repository on GitHub, you should choose not to initialize the remote repository you are going to be pushing to with either a “README” or “.gitignore” file!\n\n\nFrom the Git tab in RStudio, select the New Branch icon.\n\n\n\n\n\n\n\n\n\n\n\nClick “Add remote”, paste in the URL for your dummy remote repository in the text field, and type in “origin” for the name of the remote branch.\nClick “Add”. We should be back in the “New Branch” dialog box. Enter main as the branch name (to push from the local main branch to a remote main), and make sure “Sync branch with remote” button is checked.\nClick “Create” and in the next dialog box, choose “Overwrite”. This should push your local repository main branch up to the remote main branch.\n\n\n\nOption 3: Set up a dummy remote repository on GitHub and push to it from a terminal shell\n\nAs in Option 2, go to the GitHub website and create a new, empty repository. You can use the same name as that of the RStudio project you want to push up, or you can create a different one.\n\n\n\n\n\n\n\n\n\n\n\nNOTE: Here, again, you should choose not to initialize the remote repository you are going to be pushing to with either a “README” or “.gitignore” file!\n\n\nFrom the next screen, select the desired transfer protocol you want to use under the Quick setup... option at the top (HTTPS or SSH). Then, scroll down to the option: ...or push an existing repository from the command line.\n\n\n\n\n\n\n\n\n\n\n\nCopy the lines of code listed there and then return to RStudio.\nIn RStudio, open the project that you want to push to GitHub and click Tools &gt; Terminal &gt; New Terminal or Tools &gt; Shell… to open a terminal window. Alternatively, open a separate terminal window and navigate to the root of the directory of the repository you wish to push.\n\n\nNOTE: It is important that you run these lines of code from within the directory that you wish to push to GitHub. When you open a new terminal or shell from within RStudio, you should be in the correct directory, as those processes open the shell in the current working directory. If not, though, use shell commands (i.e., cd) to navigate into the correct directory.\n\nAt the shell prompt, enter the lines of code you copied.\ngit remote add origin https://github.com/&lt;your user name&gt;/&lt;your repository name&gt;.git\ngit branch -M main\ngit push -u origin main\nThe first line tells git the remote URL that you are going to push to, the second makes sure you are on the main branch of the repository, and the third pushes your local repository main branch up to the remote main branch.\nCongratulations! You have now pushed commits from a local repository to GitHub, and you should be able to see those files in your remote GitHub repository online. The “Pull” (blue down arrow) and “Push” (green up arrow) buttons in RStudio should now also work.\n\nIMPORTANT: Remember, after each commit you do via RStudio (or via the command line), you will have to push to GitHub manually. This does not happen automatically!\n\n\nNOTE: Additional information on using projects in RStudio is available here.\n\n\n\n\nTroubleshooting\nMost of the time, the installation and setup instructions provided in Module 05 and this module for getting git and RStudio to work together work just fine, but sometimes you may have issues. The most common problem I have seen is when RStudio is unable to find your proper git installation, either because the path to the correct git executable did not get written into your shell profile when you installed git or because the correct path to git has not be set properly in RStudio.\nChapters 13 and 14 of the web book Happy Git and GitHub R offer a number of suggestions for how to troubleshoot these problems, but some things to check are:\n\nIs git installed correctly? An easy way to test this is to enter git in a terminal shell. If you get a complaint about git not being found, it means either installation was unsuccessful or that the path to the git program is not on your PATH in your shell profile. Try reinstalling git and then either logging out of your computer and logging in again or restarting.\nIs the proper path to git set in RStudio? InRStudio, go to Tools &gt; Global Options and select the “Git/SVN” tab and make sure that the box “Git executable” points to the executably file for your git installation. On macOS and Linux operating systems, the path usually is “/usr/bin/git” (on MacOS or Linux) and on Windows operating systems it is usually “C:\\Program Files\\Git\\bin\\git.exe”. Sometimes, git will be installed in a slightly different place, most commonly (on MacOS) in “/usr/local/bin/git”, in which case you will need to change the path in the dialog box. To find the correct path, type which git in a terminal shell and then enter that in the ““Git executable” box.\n\n\nNOTE: If you make any changes, e.g., if you reinstall git, you will likely need to open a new shell window (so that your updated PATH gets read and your computer can find git). You may also need to also either log out of your commputer and log in again or restart your computer. If you make changes in the RStudio IDE, e.g., if you change the path to your git executable via the Tools &gt; Global Options &gt; Git/SVN tab, you will need to completely RESTART RStudio, and you may need to also log out and back in or restart your computer.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "06-module.html#working-with-projects-in-rstudio",
    "href": "06-module.html#working-with-projects-in-rstudio",
    "title": "6  Reproducible Research",
    "section": "6.5 Working with Projects in RStudio",
    "text": "6.5 Working with Projects in RStudio\nOnce you have a project set up in RStudio and under version control, git will be watching your local project directory for any changes that you might make to what is contained in that directory or to the files therein. For example, if you add a file to the directory, it will show up in the Files tab, and if you delete a file, it will disappear from that list. Thus, you can drag and drop files and directories into and out of the project repo and git will keep track of them.\nNow, you can edit existing files in the repository (e.g., the “README.md” file), create one or more new scripts (“.R”), RMarkdown (“.Rmd”) files, or Quarto (“.qmd”) documents, add other files and folders (e.g., data files) to your repository and git will keept track of them.\n\nModifying Files Locally\nWithin RStudio, click on the “README.md” file to open it in the text editor panel of the IDE. Make some changes to this file (e.g., add the line, “And here is some new text I am adding in the RStudio IDE.”) and then save your changes. When you do, the “README.md” file should show up in the Git tab with a blue “M” next to it, indicating that it has been “modified”.\nWe can commit these changes to the local repository and push them up to GitHub as follows:\n\nClick the Git tab in upper right pane.\nCheck the Staged box next to the “README.md” file, which will get the file ready to commit to your local repository. If you have not already done so, you should also stage the “.gitignore” and “.Rproj” files.\n\n\nNOTE: The “.gitignore” file that was created when you activated version control is basically a list of files that you want git to ignore and not worry about tracking changes to. By default, it includes the names of several files, e.g., “.Rhistory” and “.RData”, which can be quite large and are not necessarily that important to track all changes to. You can also add to the “.gitignore” document the names of any other files in your working directory that you do not want git to track. These files can sit in your local working directory, unstaged and uncommitted, with no problems.\n\nAfter being staged, the status of the files should turn to a green A (for “added”).\n\nClick the “Commit” button. You will see a new, “Review Changes” window open up with the names of the files in your directory in the upper left pane. Selecting any of these will show you, in the lower pane, an overview of the differences between current version of the file and the version that was most recently previously committed.\n\n\n\n\n\n\n\n\n\n\n\nEnter an identifying “Commit message” in the box in the upper right pane, e.g., “First commit from RStudio” and then click “Commit”.\n\nA window will pop up confirming what you have just done, which you can then close.\n\n\n\n\n\n\n\n\n\nIf you now select the History tab in the “Review Changes” window, you can see the history of commits. Selecting any of the nodes in the commit history will show you (in the lower pane) the files involved in the commit and how the content of those files has changed since your last commit. For example, the node associated with your initial commit will show you the initial file contents, while subsequent nodes highlight where a new version differs from the previous one.\n\n\nPushing Changes to a Remote Repo\n\nWith your commits completed, the files disappear from the “Review Changes” window and from the Git tab in RStudio window (meaning they have all been committed locally). You should now be able to pass all of your local changes up to GitHub by clicking the green “Push” (up arrow) button. This updates the remote copy of your repository and makes it available to collaborators or to you, working on a different local computer.\n\n\n\n\n\n\n\n\n\n\nYou should see a dialog box like the following indicating success:\n\n\n\n\n\n\n\n\n\n\n\nConfirming Changes\nFinally, you can confirm that the local changes were indeed sent up to the remote repository on GitHub by going back to the page for the repository in your web browser and hitting refresh… again, you should see that the “README.md” file has been updated with new text and, if you click on the “commits” tab, you should see one with the message “Commit from RStudio”.\n\n\n\n\n\n\n\n\n\n\n\nCHALLENGE\nCreate and save a completely new text document in your current working directory/test repository - the content does not matter… be creative and try some markdown formatting! Save it as a file with the extension “.md” (for “markdown”), then commit that file to the local clone of your repository and push it from your local repository up to the main branch on GitHub.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "06-module.html#deleting-repositories",
    "href": "06-module.html#deleting-repositories",
    "title": "6  Reproducible Research",
    "section": "6.6 Deleting Repositories",
    "text": "6.6 Deleting Repositories\nIf you want to get rid of a local repository, you can simply send it to the Trash (on MacOS) or Recycle Bin (on Windows) and throw it away. It is just a regular, self-contained directory, and your local git executable will no longer track it.\nIf you want to get rid of a remote repository on GitHub, navigate to the repository’s web page in a browser, click on “Settings” tab, scroll down to bottom of the page in the “Danger Zone” section, and select the option “Delete this repository”. You will be asked to type in the repository name to confirm that you want to delete it and will likely have to enter your GitHub password.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "06-module.html#additional-resources",
    "href": "06-module.html#additional-resources",
    "title": "6  Reproducible Research",
    "section": "6.7 Additional Resources",
    "text": "6.7 Additional Resources\nThe web book Happy Git and GitHub for the useR by Dr. Jenny Bryan (an important contributor to a number of key R packages) is an excellent source of information about how to set up and troubleshoot your RStudio/git/GitHub workflow… I encourage you to check it out!",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "06-module.html#concept-review",
    "href": "06-module.html#concept-review",
    "title": "6  Reproducible Research",
    "section": "Concept Review",
    "text": "Concept Review\n\nRMarkdown documents\nCreating R Projects (3 ways)\n\nCreating a project from a remote repository under version control (Method 1)\nCreating a brand new project locally (Method 2)\nCreating a project from an existing local repository under version control (Method 3)\n\nConnecting a local repository and a remote repository on GitHub (2 ways)\n\nLESS COMPLICATED (Corresponding to Method 1): Start by setting up a repository on GitHub and then clone the repository locally (see above). Once created, you can copy files into it, stage and commit those files, and push them to GitHub\nMORE COMPLICATED (Corresponding to Method 2 and Method 3): Start by setting up a local repository under version control and then set up and connect to a remote repository on GitHub. See Chapter 17 of the web book Happy Git and GitHub for the useR for additional instructions to use for following this workflow.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research</span>"
    ]
  },
  {
    "objectID": "07-module.html",
    "href": "07-module.html",
    "title": "7  Additional Data Structures in R",
    "section": "",
    "text": "7.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#objectives",
    "href": "07-module.html#objectives",
    "title": "7  Additional Data Structures in R",
    "section": "",
    "text": "The objective of this module is to introduce additional fundamental data structures in R (matrices, arrays, lists, data frames, and the like) and to learn how to extract, filter, and subset data from them.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#preliminaries",
    "href": "07-module.html#preliminaries",
    "title": "7  Additional Data Structures in R",
    "section": "7.2 Preliminaries",
    "text": "7.2 Preliminaries\n\nGO TO: https://github.com/difiore/ada-2024-datasets, select the “random-people.csv” file, then press the “Download” button and save the file to your local computer (e.g., on your desktop).\n\n\n\n\n\n\n\n\n\n\nAlternatively, you can press the “Raw” button, highlight, and copy the text to a text editor, and save it. RStudio, as we have seen, has a powerful built-in text editor. There are also a number of other excellent text editors that you download for FREE (e.g., BBEdit for MacOS, Notepad++ for Windows, or Visual Studio Code for either operating system). - Install and load these packages in R: {tidyverse} (which includes {ggplot2}, {dplyr}, {readr}, {tibble}, and {tidyr}, plus others, so they do not need to be installed separately) and {data.table}",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#matrices-and-arrays",
    "href": "07-module.html#matrices-and-arrays",
    "title": "7  Additional Data Structures in R",
    "section": "7.3 Matrices and Arrays",
    "text": "7.3 Matrices and Arrays\nSo far, we have seen several way of creating vectors, which are the most fundamental data structures in R. Today, we will explore and learn how to manipulate other fundamental data structures, including matrices, arrays, lists, and data frames, as well as variants on data frames (e.g., data tables and “tibbles”.)\n\nNOTE: The kind of vectors we have been talking about so far are also sometimes referred to as atomic vectors, and all of the elements of a vector have to have the same data type. We can think of lists (see below) as a different kind of vector, where the elements can have different types, but I prefer to consider lists as a different kind of data structure. Wickham (2019) Advanced R, Second Edition discusses the nuances of various R data structures in more detail.\n\nMatrices and arrays are extensions of the basic vector data structure, and like vectors, all of the elements in an array or matrix have to be of the same atomic type.\nWe can think of a matrix as a two-dimensional structure consisting of several atomic vectors stored together, but, more accurately, a matrix is essentially a single atomic vector that is split either into multiple columns or multiple rows of the same length. Matrices are useful constructs for performing many mathematical and statistical operations. Again, like 1-dimensional atomic vectors, matrices can only store data of one atomic class (e.g., numerical or character). Matrices are created using the matrix() function.\n\nm &lt;- matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2)\nm\n\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\n\n\nMatrices are typically filled column-wise, with the argument, byrow=, set to FALSE by default (note that FALSE is not in quotation marks). This means that the first column of the matrix will be filled first, the second column second, etc.\n\nm &lt;- matrix(data = c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3, byrow = FALSE)\nm\n\n##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\n\n\nThis pattern can be changed by specifying the byrow= argument as TRUE.\n\nm &lt;- matrix(data = c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3, byrow = TRUE)\nm\n\n##      [,1] [,2] [,3]\n## [1,]    1    2    3\n## [2,]    4    5    6\n\n\nYou can also create matrices by binding vectors of the same length together either row-wise (with the function rbind()) or column-wise (with the function cbind()).\n\nv1 &lt;- c(1, 2, 3, 4)\nv2 &lt;- c(6, 7, 8, 9)\nm1 &lt;- rbind(v1, v2)\nm1\n\n##    [,1] [,2] [,3] [,4]\n## v1    1    2    3    4\n## v2    6    7    8    9\n\n\n\nm2 &lt;- cbind(v1, v2)\nm2\n\n##      v1 v2\n## [1,]  1  6\n## [2,]  2  7\n## [3,]  3  8\n## [4,]  4  9\n\n\nStandard metadata about a matrix can be extracted using the class(), dim(), names(), rownames(), colnames() and other commands. The dim() command returns an vector containing the number of rows at index position 1 and the number of columns at index position 2.\n\nclass(m1)\n\n## [1] \"matrix\" \"array\"\n\nclass(m2)\n\n## [1] \"matrix\" \"array\"\n\n\n\ndim(m1)\n\n## [1] 2 4\n\ndim(m2)\n\n## [1] 4 2\n\n\n\ncolnames(m1)\n\n## NULL\n\nrownames(m1)\n\n## [1] \"v1\" \"v2\"\n\n\n\nNOTE: In this example, colnames are not defined for m1 since rbind() was used to create the matrix.\n\n\ncolnames(m2)\n\n## [1] \"v1\" \"v2\"\n\nrownames(m2)\n\n## NULL\n\n\n\nNOTE: Similarly, in this example, rownames are not defined for m2, since cbind() was used to create the matrix.\n\nAs we saw with vectors, the structure (str()) and glimpse (dplyr::glimpse()) commands can be applied to any data structure to provide details about that object. These are incredibly useful functions that you will find yourself using over and over again.\n\nstr(m1)\n\n##  num [1:2, 1:4] 1 6 2 7 3 8 4 9\n##  - attr(*, \"dimnames\")=List of 2\n##   ..$ : chr [1:2] \"v1\" \"v2\"\n##   ..$ : NULL\n\nstr(m2)\n\n##  num [1:4, 1:2] 1 2 3 4 6 7 8 9\n##  - attr(*, \"dimnames\")=List of 2\n##   ..$ : NULL\n##   ..$ : chr [1:2] \"v1\" \"v2\"\n\n\nThe attributes (attributes()) command can be used to list the attributes of a data structure.\n\nattributes(m1)\n\n## $dim\n## [1] 2 4\n## \n## $dimnames\n## $dimnames[[1]]\n## [1] \"v1\" \"v2\"\n## \n## $dimnames[[2]]\n## NULL\n\nattr(m1, which = \"dim\")\n\n## [1] 2 4\n\nattr(m1, which = \"dimnames\")[[1]]\n\n## [1] \"v1\" \"v2\"\n\nattr(m1, which = \"dimnames\")[[2]]\n\n## NULL\n\n\nAn array is a more general atomic data structure, of which a vector (with 1 implicit dimension) and a matrix (with 2 defined dimensions) are but examples. Arrays can include additional dimensions, but (like vectors and matrices) they can only include elements that are all of the same atomic data class (e.g., numeric, character). The example below shows the construction of a 3 dimensional array with 5 rows, 6 columns, and 3 “levels”). Visualizing higher and higher dimension arrays, obviously, becomes challenging!\n\na &lt;- array(data = 1:90, dim = c(5, 6, 3))\na\n\n## , , 1\n## \n##      [,1] [,2] [,3] [,4] [,5] [,6]\n## [1,]    1    6   11   16   21   26\n## [2,]    2    7   12   17   22   27\n## [3,]    3    8   13   18   23   28\n## [4,]    4    9   14   19   24   29\n## [5,]    5   10   15   20   25   30\n## \n## , , 2\n## \n##      [,1] [,2] [,3] [,4] [,5] [,6]\n## [1,]   31   36   41   46   51   56\n## [2,]   32   37   42   47   52   57\n## [3,]   33   38   43   48   53   58\n## [4,]   34   39   44   49   54   59\n## [5,]   35   40   45   50   55   60\n## \n## , , 3\n## \n##      [,1] [,2] [,3] [,4] [,5] [,6]\n## [1,]   61   66   71   76   81   86\n## [2,]   62   67   72   77   82   87\n## [3,]   63   68   73   78   83   88\n## [4,]   64   69   74   79   84   89\n## [5,]   65   70   75   80   85   90\n\n\n\nSubsetting\nYou can reference or extract select elements from vectors, matrices, and arrays by subsetting them using their index position(s) in what is knows as bracket notation ([ ]). For vectors, you would specify an index value in one dimension. For matrices, you would give the index values in two dimensions. For arrays generally, you would give index values for each dimension in the array.\nFor example, suppose you have the following vector:\n\nv &lt;- 1:100\nv\n\n##   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n##  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n##  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n##  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n##  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n##  [91]  91  92  93  94  95  96  97  98  99 100\n\n\nYou can select the first 15 elements using bracket notation as follows:\n\nv[1:15]\n\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n\nYou can also supply a vector of index values as the argument to [ ] to use for subsetting:\n\nv[c(2, 4, 6, 8, 10)]\n\n## [1]  2  4  6  8 10\n\n\nSimilarly, you can also use a function or a calculation to subset a vector. What does the following return?\n\nv &lt;- 101:200\nv[seq(from = 1, to = 100, by = 2)]\n\n##  [1] 101 103 105 107 109 111 113 115 117 119 121 123 125 127 129 131 133 135 137\n## [20] 139 141 143 145 147 149 151 153 155 157 159 161 163 165 167 169 171 173 175\n## [39] 177 179 181 183 185 187 189 191 193 195 197 199\n\n\nAs an example for a matrix, suppose you have the following:\n\nm &lt;- matrix(data = 1:80, nrow = 8, ncol = 10, byrow = FALSE)\nm\n\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n## [1,]    1    9   17   25   33   41   49   57   65    73\n## [2,]    2   10   18   26   34   42   50   58   66    74\n## [3,]    3   11   19   27   35   43   51   59   67    75\n## [4,]    4   12   20   28   36   44   52   60   68    76\n## [5,]    5   13   21   29   37   45   53   61   69    77\n## [6,]    6   14   22   30   38   46   54   62   70    78\n## [7,]    7   15   23   31   39   47   55   63   71    79\n## [8,]    8   16   24   32   40   48   56   64   72    80\n\n\nYou can extract the element in row 4, column 5 and assign it to a new variable, x, as follows:\n\nx &lt;- m[4, 5]\nx\n\n## [1] 36\n\n\nYou can also extract an entire row or an entire column (or set of rows or set of columns) from a matrix by specifying the desired row or column number(s) and leaving the other value blank.\n\nx &lt;- m[4, ]  # extracts 4th row\nx\n\n##  [1]  4 12 20 28 36 44 52 60 68 76\n\n\n\n\nCHALLENGE\n\nGiven the matrix, m, above, extract the 2nd, 3rd, and 6th columns and assign them to the variable x\n\n\n\nShow Code\nx &lt;- m[, c(2, 3, 6)]\nx\n\n\nShow Output\n##      [,1] [,2] [,3]\n## [1,]    9   17   41\n## [2,]   10   18   42\n## [3,]   11   19   43\n## [4,]   12   20   44\n## [5,]   13   21   45\n## [6,]   14   22   46\n## [7,]   15   23   47\n## [8,]   16   24   48\n\n\n\n\nGiven the matrix, m, above, extract the 6th to 8th row and assign them to the variable x\n\n\n\nShow Code\nx &lt;- m[6:8, ]\nx\n\n\nShow Output\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n## [1,]    6   14   22   30   38   46   54   62   70    78\n## [2,]    7   15   23   31   39   47   55   63   71    79\n## [3,]    8   16   24   32   40   48   56   64   72    80\n\n\n\n\nGiven the matrix, m, above, extract the elements from row 2, column 2 to row 6, column 9 and assign them to the variable x\n\n\n\nShow Code\nx &lt;- m[2:6, 2:9]\nx\n\n\nShow Output\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n## [1,]   10   18   26   34   42   50   58   66\n## [2,]   11   19   27   35   43   51   59   67\n## [3,]   12   20   28   36   44   52   60   68\n## [4,]   13   21   29   37   45   53   61   69\n## [5,]   14   22   30   38   46   54   62   70\n\n\n\n\n\nOverwriting Elements\nYou can replace elements in a vector or matrix, or even entire rows or columns, by identifying the elements to be replaced and then assigning them new values.\nStarting with the matrix, m, defined above, explore what will be the effects of operations below. Pay careful attention to row and column index values, vector recycling, and automated conversion/recasting among data classes.\n\nm[7, 1] &lt;- 564\nm[, 8] &lt;- 2\nm[2:5, 4:8] &lt;- 1\nm[2:5, 4:8] &lt;- c(20, 19, 18, 17)\nm[2:5, 4:8] &lt;- matrix(data = c(20:1), nrow = 4, ncol = 5, byrow = TRUE)\nm[, 8] &lt;- c(\"a\", \"b\")",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#lists-and-data-frames",
    "href": "07-module.html#lists-and-data-frames",
    "title": "7  Additional Data Structures in R",
    "section": "7.4 Lists and Data Frames",
    "text": "7.4 Lists and Data Frames\nUnlike vectors, matrices, and arrays, two other data structures - lists and data frames - can be used to group together a heterogeneous mix of R structures and objects. A single list, for example, could contain a matrix, vector of character strings, vector of factors, an array, even another list.\nLists are created using the list() function where the elements to add to the list are given as arguments to the function, separated by commas. Type in the following example:\n\ns &lt;- c(\"this\", \"is\", \"a\", \"vector\", \"of\", \"strings\")\n# this is a vector of character strings\nm &lt;- matrix(data = 1:40, nrow = 5, ncol = 8)  # this is a matrix\nb &lt;- FALSE  # this is a boolean variable\nl &lt;- list(s, m, b)\nl\n\n## [[1]]\n## [1] \"this\"    \"is\"      \"a\"       \"vector\"  \"of\"      \"strings\"\n## \n## [[2]]\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n## [1,]    1    6   11   16   21   26   31   36\n## [2,]    2    7   12   17   22   27   32   37\n## [3,]    3    8   13   18   23   28   33   38\n## [4,]    4    9   14   19   24   29   34   39\n## [5,]    5   10   15   20   25   30   35   40\n## \n## [[3]]\n## [1] FALSE\n\n\n\nSubsetting Lists\nYou can reference or extract elements from a list similarly to how you would from other data structure, except that you use double brackets ([[ ]]) to reference a single element in the list.\n\nl[[2]]\n\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n## [1,]    1    6   11   16   21   26   31   36\n## [2,]    2    7   12   17   22   27   32   37\n## [3,]    3    8   13   18   23   28   33   38\n## [4,]    4    9   14   19   24   29   34   39\n## [5,]    5   10   15   20   25   30   35   40\n\n\nAn extension of this notation can be used to access elements contained within an element in the list. For example:\n\nl[[2]][2, 6]\n\n## [1] 27\n\nl[[2]][2, ]\n\n## [1]  2  7 12 17 22 27 32 37\n\nl[[2]][, 6]\n\n## [1] 26 27 28 29 30\n\n\nTo reference or extract multiple elements from a list, you would use single bracket ([ ]) notation, which would itself return a list. This is called “list slicing”.\n\nl[2:3]\n\n## [[1]]\n##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n## [1,]    1    6   11   16   21   26   31   36\n## [2,]    2    7   12   17   22   27   32   37\n## [3,]    3    8   13   18   23   28   33   38\n## [4,]    4    9   14   19   24   29   34   39\n## [5,]    5   10   15   20   25   30   35   40\n## \n## [[2]]\n## [1] FALSE\n\n\n\nl[c(1, 3)]\n\n## [[1]]\n## [1] \"this\"    \"is\"      \"a\"       \"vector\"  \"of\"      \"strings\"\n## \n## [[2]]\n## [1] FALSE\n\n\nUsing class() and str() (or dplyr::glimpse()) provides details about the our list and its three elements:\n\nclass(l)\n\n## [1] \"list\"\n\nstr(l)\n\n## List of 3\n##  $ : chr [1:6] \"this\" \"is\" \"a\" \"vector\" ...\n##  $ : int [1:5, 1:8] 1 2 3 4 5 6 7 8 9 10 ...\n##  $ : logi FALSE\n\ndplyr::glimpse(l)\n\n## List of 3\n##  $ : chr [1:6] \"this\" \"is\" \"a\" \"vector\" ...\n##  $ : int [1:5, 1:8] 1 2 3 4 5 6 7 8 9 10 ...\n##  $ : logi FALSE\n\n\nYou can name the elements in a list using the names() function, which adds a name attribute to each list item.\n\nnames(l) &lt;- c(\"string\", \"matrix\", \"logical\")\nnames(l)\n\n## [1] \"string\"  \"matrix\"  \"logical\"\n\n\nYou can also use the name of an item in the list to refer to it using the shortcut $ notation. This is the equivalent of using [[ ]] with either the column number or the name of the column in quotation marks as the argument inside of the double bracket.\n\n# all of the following are equivalent!\nl$string\n\n## [1] \"this\"    \"is\"      \"a\"       \"vector\"  \"of\"      \"strings\"\n\nl[[1]]\n\n## [1] \"this\"    \"is\"      \"a\"       \"vector\"  \"of\"      \"strings\"\n\nl[[\"string\"]]\n\n## [1] \"this\"    \"is\"      \"a\"       \"vector\"  \"of\"      \"strings\"\n\n\n\n# all of the following are equivalent\nl$matrix[3, 5]\n\n## [1] 23\n\nl[[2]][3, 5]\n\n## [1] 23\n\nl[[\"matrix\"]][3, 5]\n\n## [1] 23\n\n\nThe data frame is the perhaps the most useful (and most familiar) data structure that we can operate with in R as it most closely aligns with how we tend to represent tabular data, with rows as cases or observations and columns as variables describing those observations (e.g., a measurement of a particular type). Variables tend to be measured using the same units and thus fall into the same data class and can be thought of as analogous to vectors, so a data frame is essentially a list of atomic vectors that all have the same length.\nThe data.frame() command can be used to create data frames from scratch.\n\ndf &lt;- data.frame(firstName = c(\"Rick\", \"Negan\", \"Dwight\", \"Maggie\", \"Michonne\"),\n    community = c(\"Alexandria\", \"Saviors\", \"Saviors\", \"Hiltop\", \"Alexandria\"), sex = c(\"M\",\n        \"M\", \"M\", \"F\", \"F\"), age = c(42, 40, 33, 28, 31))\ndf\n\n##   firstName  community sex age\n## 1      Rick Alexandria   M  42\n## 2     Negan    Saviors   M  40\n## 3    Dwight    Saviors   M  33\n## 4    Maggie     Hiltop   F  28\n## 5  Michonne Alexandria   F  31\n\n\nMore commonly we read tabular data into R from some external data source (see Module 08, which typically results in the table being represented as a data frame. The following code, for example, will read from the file “random-people.csv” stored in a folder called “data” (a data/ directory) located inside a user’s working directory.\n\ndf &lt;- read.csv(file = \"data/random-people.csv\", sep = \",\", header = TRUE, stringsAsFactors = FALSE)\n# only print select columns of this data frame head() means we will also only\n# print the first several rows\nhead(df[, c(1, 3, 4, 11, 12)])\n\n##   gender name.first name.last login.password           dob\n## 1   male        ted    wright          rolex  11/8/73 1:33\n## 2   male    quentin   schmitt         norton  5/24/51 3:16\n## 3 female      laura  johansen        stevens 5/22/77 21:03\n## 4   male     ismael   herrero         303030   8/1/58 9:13\n## 5 female     susana    blanco          aloha 12/18/55 3:21\n## 6   male      mason    wilson         topdog  6/23/60 9:19\n\n\n\nNOTE: To run the example code above, you may need to replace the string in file=\"&lt;string&gt;\" with the path to where you stored the file on your local computer.\n\n\nstr(df)\n\n## 'data.frame':    20 obs. of  17 variables:\n##  $ gender           : chr  \"male\" \"male\" \"female\" \"male\" ...\n##  $ name.title       : chr  \"mr\" \"mr\" \"ms\" \"mr\" ...\n##  $ name.first       : chr  \"ted\" \"quentin\" \"laura\" \"ismael\" ...\n##  $ name.last        : chr  \"wright\" \"schmitt\" \"johansen\" \"herrero\" ...\n##  $ location.street  : chr  \"2020 royal ln\" \"2433 rue dubois\" \"2142 elmelunden\" \"3897 calle del barquillo\" ...\n##  $ location.city    : chr  \"coffs harbour\" \"vitry-sur-seine\" \"silkeboeg\" \"gandia\" ...\n##  $ location.state   : chr  \"tasmania\" \"indre-et-loire\" \"hovedstaden\" \"ceuta\" ...\n##  $ location.postcode: chr  \"4126\" \"99856\" \"16264\" \"61349\" ...\n##  $ email            : chr  \"ted.wright@example.com\" \"quentin.schmitt@example.com\" \"laura.johansen@example.com\" \"ismael.herrero@example.com\" ...\n##  $ login.username   : chr  \"organicleopard402\" \"bluegoose191\" \"orangebird528\" \"heavyswan518\" ...\n##  $ login.password   : chr  \"rolex\" \"norton\" \"stevens\" \"303030\" ...\n##  $ dob              : chr  \"11/8/73 1:33\" \"5/24/51 3:16\" \"5/22/77 21:03\" \"8/1/58 9:13\" ...\n##  $ date.registered  : chr  \"5/5/07 20:26\" \"4/11/11 7:05\" \"5/16/14 15:53\" \"2/17/06 16:53\" ...\n##  $ phone            : chr  \"01-0349-5128\" \"05-72-65-32-21\" \"81616775\" \"974-117-403\" ...\n##  $ cell             : chr  \"0449-989-455\" \"06-83-24-92-41\" \"697-993-20\" \"665-791-673\" ...\n##  $ picture.large    : chr  \"https://randomuser.me/api/portraits/men/48.jpg\" \"https://randomuser.me/api/portraits/men/53.jpg\" \"https://randomuser.me/api/portraits/women/70.jpg\" \"https://randomuser.me/api/portraits/men/79.jpg\" ...\n##  $ nat              : chr  \"AU\" \"FR\" \"DK\" \"ES\" ...\n\ndplyr::glimpse(df)\n\n## Rows: 20\n## Columns: 17\n## $ gender            &lt;chr&gt; \"male\", \"male\", \"female\", \"male\", \"female\", \"male\", …\n## $ name.title        &lt;chr&gt; \"mr\", \"mr\", \"ms\", \"mr\", \"ms\", \"mr\", \"mr\", \"miss\", \"m…\n## $ name.first        &lt;chr&gt; \"ted\", \"quentin\", \"laura\", \"ismael\", \"susana\", \"maso…\n## $ name.last         &lt;chr&gt; \"wright\", \"schmitt\", \"johansen\", \"herrero\", \"blanco\"…\n## $ location.street   &lt;chr&gt; \"2020 royal ln\", \"2433 rue dubois\", \"2142 elmelunden…\n## $ location.city     &lt;chr&gt; \"coffs harbour\", \"vitry-sur-seine\", \"silkeboeg\", \"ga…\n## $ location.state    &lt;chr&gt; \"tasmania\", \"indre-et-loire\", \"hovedstaden\", \"ceuta\"…\n## $ location.postcode &lt;chr&gt; \"4126\", \"99856\", \"16264\", \"61349\", \"29445\", \"91479\",…\n## $ email             &lt;chr&gt; \"ted.wright@example.com\", \"quentin.schmitt@example.c…\n## $ login.username    &lt;chr&gt; \"organicleopard402\", \"bluegoose191\", \"orangebird528\"…\n## $ login.password    &lt;chr&gt; \"rolex\", \"norton\", \"stevens\", \"303030\", \"aloha\", \"to…\n## $ dob               &lt;chr&gt; \"11/8/73 1:33\", \"5/24/51 3:16\", \"5/22/77 21:03\", \"8/…\n## $ date.registered   &lt;chr&gt; \"5/5/07 20:26\", \"4/11/11 7:05\", \"5/16/14 15:53\", \"2/…\n## $ phone             &lt;chr&gt; \"01-0349-5128\", \"05-72-65-32-21\", \"81616775\", \"974-1…\n## $ cell              &lt;chr&gt; \"0449-989-455\", \"06-83-24-92-41\", \"697-993-20\", \"665…\n## $ picture.large     &lt;chr&gt; \"https://randomuser.me/api/portraits/men/48.jpg\", \"h…\n## $ nat               &lt;chr&gt; \"AU\", \"FR\", \"DK\", \"ES\", \"ES\", \"NZ\", \"DE\", \"US\", \"TR\"…\n\n\nAs for other data structures, you can select and subset data frames using single bracket notation ([ ]). You can also select named columns from a data frame using the $ operator or the equivalent double bracket notation ([[ ]]).\n\n# single bracket notation\ndf[, 4]\n\n##  [1] \"wright\"     \"schmitt\"    \"johansen\"   \"herrero\"    \"blanco\"    \n##  [6] \"wilson\"     \"strauio\"    \"gordon\"     \"limoncuocu\" \"perrin\"    \n## [11] \"lopez\"      \"waisanen\"   \"brewer\"     \"brown\"      \"baettner\"  \n## [16] \"wallace\"    \"gonzalez\"   \"neva\"       \"barnaby\"    \"moser\"\n\nstr(df[, 4])\n\n##  chr [1:20] \"wright\" \"schmitt\" \"johansen\" \"herrero\" \"blanco\" \"wilson\" ...\n\n# returns the vector of data stored in column 4\n\nThe following are all equivalent…\n\n# using the $ operator with the column name\ndf$name.last\n\n##  [1] \"wright\"     \"schmitt\"    \"johansen\"   \"herrero\"    \"blanco\"    \n##  [6] \"wilson\"     \"strauio\"    \"gordon\"     \"limoncuocu\" \"perrin\"    \n## [11] \"lopez\"      \"waisanen\"   \"brewer\"     \"brown\"      \"baettner\"  \n## [16] \"wallace\"    \"gonzalez\"   \"neva\"       \"barnaby\"    \"moser\"\n\nstr(df$name.last)\n\n##  chr [1:20] \"wright\" \"schmitt\" \"johansen\" \"herrero\" \"blanco\" \"wilson\" ...\n\n# returns the vector of data stored in column `name.last`\n\n\n# using double bracket notation and a column index\ndf[[4]]\n\n##  [1] \"wright\"     \"schmitt\"    \"johansen\"   \"herrero\"    \"blanco\"    \n##  [6] \"wilson\"     \"strauio\"    \"gordon\"     \"limoncuocu\" \"perrin\"    \n## [11] \"lopez\"      \"waisanen\"   \"brewer\"     \"brown\"      \"baettner\"  \n## [16] \"wallace\"    \"gonzalez\"   \"neva\"       \"barnaby\"    \"moser\"\n\nstr(df[[4]])\n\n##  chr [1:20] \"wright\" \"schmitt\" \"johansen\" \"herrero\" \"blanco\" \"wilson\" ...\n\n# returns the vector of data stored in column 4\n\n\n# using double bracket notation with the column name\ndf[[\"name.last\"]]\n\n##  [1] \"wright\"     \"schmitt\"    \"johansen\"   \"herrero\"    \"blanco\"    \n##  [6] \"wilson\"     \"strauio\"    \"gordon\"     \"limoncuocu\" \"perrin\"    \n## [11] \"lopez\"      \"waisanen\"   \"brewer\"     \"brown\"      \"baettner\"  \n## [16] \"wallace\"    \"gonzalez\"   \"neva\"       \"barnaby\"    \"moser\"\n\nstr(df[[\"name.last\"]])\n\n##  chr [1:20] \"wright\" \"schmitt\" \"johansen\" \"herrero\" \"blanco\" \"wilson\" ...\n\n# returns the vector of data stored in column `name.last`\n\nNote that the following return data structures that are not quite the same as those returned above. Instead, these return data frames rather than vectors!\n\n# using single bracket notation with a column index and no row index\nhead(df[4])\n\n##   name.last\n## 1    wright\n## 2   schmitt\n## 3  johansen\n## 4   herrero\n## 5    blanco\n## 6    wilson\n\nstr(df[4])\n\n## 'data.frame':    20 obs. of  1 variable:\n##  $ name.last: chr  \"wright\" \"schmitt\" \"johansen\" \"herrero\" ...\n\n# returns a data frame of the data from column 4\n\n\n# using single bracket notation with a column name\nhead(df[\"name.last\"])\n\n##   name.last\n## 1    wright\n## 2   schmitt\n## 3  johansen\n## 4   herrero\n## 5    blanco\n## 6    wilson\n\nstr(df[\"name.last\"])\n\n## 'data.frame':    20 obs. of  1 variable:\n##  $ name.last: chr  \"wright\" \"schmitt\" \"johansen\" \"herrero\" ...\n\n# returns a data frame of the data from column `name.last`\n\nAs with matrixes, you can add rows (additional cases) or columns (additional variables) to a data frame using rbind() and cbind().\n\ndf &lt;- cbind(df, id = c(1:20))\ndf &lt;- cbind(df, school = c(\"UT\", \"UT\", \"A&M\", \"A&M\", \"UT\", \"Rice\", \"Texas Tech\",\n    \"UT\", \"UT\", \"Texas State\", \"A&M\", \"UT\", \"Rice\", \"UT\", \"A&M\", \"Texas Tech\", \"A&M\",\n    \"UT\", \"Texas State\", \"A&M\"))\nhead(df)\n\n##   gender name.title name.first name.last          location.street\n## 1   male         mr        ted    wright            2020 royal ln\n## 2   male         mr    quentin   schmitt          2433 rue dubois\n## 3 female         ms      laura  johansen          2142 elmelunden\n## 4   male         mr     ismael   herrero 3897 calle del barquillo\n## 5 female         ms     susana    blanco  2208 avenida de america\n## 6   male         mr      mason    wilson         4576 wilson road\n##     location.city location.state location.postcode                       email\n## 1   coffs harbour       tasmania              4126      ted.wright@example.com\n## 2 vitry-sur-seine indre-et-loire             99856 quentin.schmitt@example.com\n## 3       silkeboeg    hovedstaden             16264  laura.johansen@example.com\n## 4          gandia          ceuta             61349  ismael.herrero@example.com\n## 5        mastoles    extremadura             29445   susana.blanco@example.com\n## 6         dunedin       taranaki             91479    mason.wilson@example.com\n##      login.username login.password           dob date.registered          phone\n## 1 organicleopard402          rolex  11/8/73 1:33    5/5/07 20:26   01-0349-5128\n## 2      bluegoose191         norton  5/24/51 3:16    4/11/11 7:05 05-72-65-32-21\n## 3     orangebird528        stevens 5/22/77 21:03   5/16/14 15:53       81616775\n## 4      heavyswan518         303030   8/1/58 9:13   2/17/06 16:53    974-117-403\n## 5    silverkoala701          aloha 12/18/55 3:21   10/3/02 17:55    917-199-202\n## 6    organicduck470         topdog  6/23/60 9:19    12/1/08 8:31 (137)-326-5772\n##             cell                                    picture.large nat id school\n## 1   0449-989-455   https://randomuser.me/api/portraits/men/48.jpg  AU  1     UT\n## 2 06-83-24-92-41   https://randomuser.me/api/portraits/men/53.jpg  FR  2     UT\n## 3     697-993-20 https://randomuser.me/api/portraits/women/70.jpg  DK  3    A&M\n## 4    665-791-673   https://randomuser.me/api/portraits/men/79.jpg  ES  4    A&M\n## 5    612-612-929 https://randomuser.me/api/portraits/women/18.jpg  ES  5     UT\n## 6 (700)-060-1523   https://randomuser.me/api/portraits/men/60.jpg  NZ  6   Rice\n\n\nAlternatively, you can extend a data frame by adding a new variable directly using the $ operator, like this:\n\ndf$school &lt;- c(\"UT\", \"UT\", \"A&M\", \"A&M\", \"UT\", \"Rice\", \"Texas Tech\", \"UT\", \"UT\",\n    \"Texas State\", \"A&M\", \"UT\", \"Rice\", \"UT\", \"A&M\", \"Texas Tech\", \"A&M\", \"UT\", \"Texas State\",\n    \"A&M\")\nhead(df)\n\n##   gender name.title name.first name.last          location.street\n## 1   male         mr        ted    wright            2020 royal ln\n## 2   male         mr    quentin   schmitt          2433 rue dubois\n## 3 female         ms      laura  johansen          2142 elmelunden\n## 4   male         mr     ismael   herrero 3897 calle del barquillo\n## 5 female         ms     susana    blanco  2208 avenida de america\n## 6   male         mr      mason    wilson         4576 wilson road\n##     location.city location.state location.postcode                       email\n## 1   coffs harbour       tasmania              4126      ted.wright@example.com\n## 2 vitry-sur-seine indre-et-loire             99856 quentin.schmitt@example.com\n## 3       silkeboeg    hovedstaden             16264  laura.johansen@example.com\n## 4          gandia          ceuta             61349  ismael.herrero@example.com\n## 5        mastoles    extremadura             29445   susana.blanco@example.com\n## 6         dunedin       taranaki             91479    mason.wilson@example.com\n##      login.username login.password           dob date.registered          phone\n## 1 organicleopard402          rolex  11/8/73 1:33    5/5/07 20:26   01-0349-5128\n## 2      bluegoose191         norton  5/24/51 3:16    4/11/11 7:05 05-72-65-32-21\n## 3     orangebird528        stevens 5/22/77 21:03   5/16/14 15:53       81616775\n## 4      heavyswan518         303030   8/1/58 9:13   2/17/06 16:53    974-117-403\n## 5    silverkoala701          aloha 12/18/55 3:21   10/3/02 17:55    917-199-202\n## 6    organicduck470         topdog  6/23/60 9:19    12/1/08 8:31 (137)-326-5772\n##             cell                                    picture.large nat id school\n## 1   0449-989-455   https://randomuser.me/api/portraits/men/48.jpg  AU  1     UT\n## 2 06-83-24-92-41   https://randomuser.me/api/portraits/men/53.jpg  FR  2     UT\n## 3     697-993-20 https://randomuser.me/api/portraits/women/70.jpg  DK  3    A&M\n## 4    665-791-673   https://randomuser.me/api/portraits/men/79.jpg  ES  4    A&M\n## 5    612-612-929 https://randomuser.me/api/portraits/women/18.jpg  ES  5     UT\n## 6 (700)-060-1523   https://randomuser.me/api/portraits/men/60.jpg  NZ  6   Rice\n\n\nUsing the [[ ]] operator with a new variable name in quotation marks works, too:\n\ndf[[\"school\"]] &lt;- c(\"UT\", \"UT\", \"A&M\", \"A&M\", \"UT\", \"Rice\", \"Texas Tech\", \"UT\", \"UT\",\n    \"Texas State\", \"A&M\", \"UT\", \"Rice\", \"UT\", \"A&M\", \"Texas Tech\", \"A&M\", \"UT\", \"Texas State\",\n    \"A&M\")\nhead(df)\n\n##   gender name.title name.first name.last          location.street\n## 1   male         mr        ted    wright            2020 royal ln\n## 2   male         mr    quentin   schmitt          2433 rue dubois\n## 3 female         ms      laura  johansen          2142 elmelunden\n## 4   male         mr     ismael   herrero 3897 calle del barquillo\n## 5 female         ms     susana    blanco  2208 avenida de america\n## 6   male         mr      mason    wilson         4576 wilson road\n##     location.city location.state location.postcode                       email\n## 1   coffs harbour       tasmania              4126      ted.wright@example.com\n## 2 vitry-sur-seine indre-et-loire             99856 quentin.schmitt@example.com\n## 3       silkeboeg    hovedstaden             16264  laura.johansen@example.com\n## 4          gandia          ceuta             61349  ismael.herrero@example.com\n## 5        mastoles    extremadura             29445   susana.blanco@example.com\n## 6         dunedin       taranaki             91479    mason.wilson@example.com\n##      login.username login.password           dob date.registered          phone\n## 1 organicleopard402          rolex  11/8/73 1:33    5/5/07 20:26   01-0349-5128\n## 2      bluegoose191         norton  5/24/51 3:16    4/11/11 7:05 05-72-65-32-21\n## 3     orangebird528        stevens 5/22/77 21:03   5/16/14 15:53       81616775\n## 4      heavyswan518         303030   8/1/58 9:13   2/17/06 16:53    974-117-403\n## 5    silverkoala701          aloha 12/18/55 3:21   10/3/02 17:55    917-199-202\n## 6    organicduck470         topdog  6/23/60 9:19    12/1/08 8:31 (137)-326-5772\n##             cell                                    picture.large nat id school\n## 1   0449-989-455   https://randomuser.me/api/portraits/men/48.jpg  AU  1     UT\n## 2 06-83-24-92-41   https://randomuser.me/api/portraits/men/53.jpg  FR  2     UT\n## 3     697-993-20 https://randomuser.me/api/portraits/women/70.jpg  DK  3    A&M\n## 4    665-791-673   https://randomuser.me/api/portraits/men/79.jpg  ES  4    A&M\n## 5    612-612-929 https://randomuser.me/api/portraits/women/18.jpg  ES  5     UT\n## 6 (700)-060-1523   https://randomuser.me/api/portraits/men/60.jpg  NZ  6   Rice\n\n\n\nNOTE: In the above examples, cbind() results in school being added as a factor while using the $ operator results in school being added as a character vector. You can see this by using the str() command.\n\nA factor is another atomic data class for R for dealing efficiently with nominal variables, usually character strings. Internally, R assigns integer values to each unique string (e.g., 1 for “female”, 2 for “male”, etc.).\n\n\nFiltering Rows of a Data Frame\nAn expression that evaluates to a logical vector also be used to subset data frames. Here, we filter the data frame for only those rows where the variable school is “UT”.\n\nnew_df &lt;- df[df$school == \"UT\", ]\nnew_df\n\n##    gender name.title name.first  name.last         location.street\n## 1    male         mr        ted     wright           2020 royal ln\n## 2    male         mr    quentin    schmitt         2433 rue dubois\n## 5  female         ms     susana     blanco 2208 avenida de america\n## 8  female       miss     kaylee     gordon         5475 camden ave\n## 9    male         mr     baraek limoncuocu          2664 baedat cd\n## 12   male         mr   valtteri   waisanen          9850 hemeentie\n## 14 female       miss   kimberly      brown         8654 manor road\n## 18 female         ms       ella       neva          4620 visiokatu\n##      location.city location.state location.postcode\n## 1    coffs harbour       tasmania              4126\n## 2  vitry-sur-seine indre-et-loire             99856\n## 5         mastoles    extremadura             29445\n## 8            flint         oregon             84509\n## 9            siirt          tokat             86146\n## 12          halsua  south karelia             58124\n## 14          bangor        borders          HI92 8RY\n## 18          kerava finland proper             26385\n##                              email    login.username login.password\n## 1           ted.wright@example.com organicleopard402          rolex\n## 2      quentin.schmitt@example.com      bluegoose191         norton\n## 5        susana.blanco@example.com    silverkoala701          aloha\n## 8        kaylee.gordon@example.com beautifulgoose794       atlantis\n## 9  baraek.limoncuoculu@example.com whitebutterfly599         tobias\n## 12   valtteri.waisanen@example.com        redswan919       nocturne\n## 14      kimberly.brown@example.com  crazyelephant996       nebraska\n## 18           ella.neva@example.com  orangegorilla786       f00tball\n##               dob date.registered          phone           cell\n## 1    11/8/73 1:33    5/5/07 20:26   01-0349-5128   0449-989-455\n## 2    5/24/51 3:16    4/11/11 7:05 05-72-65-32-21 06-83-24-92-41\n## 5   12/18/55 3:21   10/3/02 17:55    917-199-202    612-612-929\n## 8   3/24/48 12:22     5/5/13 8:14 (817)-962-1275 (831)-325-1142\n## 9    5/8/92 22:01    9/12/04 0:56 (023)-879-4331 (837)-014-1113\n## 12 12/24/80 10:40   9/22/03 20:47     02-227-661  042-153-83-79\n## 14    1/9/86 8:54    12/3/11 0:41   017684 80873   0799-553-944\n## 18  7/18/91 14:30    3/17/14 7:13     02-351-279  043-436-42-30\n##                                       picture.large nat id school\n## 1    https://randomuser.me/api/portraits/men/48.jpg  AU  1     UT\n## 2    https://randomuser.me/api/portraits/men/53.jpg  FR  2     UT\n## 5  https://randomuser.me/api/portraits/women/18.jpg  ES  5     UT\n## 8  https://randomuser.me/api/portraits/women/65.jpg  US  8     UT\n## 9    https://randomuser.me/api/portraits/men/94.jpg  TR  9     UT\n## 12   https://randomuser.me/api/portraits/men/80.jpg  FI 12     UT\n## 14 https://randomuser.me/api/portraits/women/49.jpg  GB 14     UT\n## 18 https://randomuser.me/api/portraits/women/68.jpg  FI 18     UT\n\n\nIn this case, R evaluates the expression df$school == \"UT\" and returns a logical vector equal in length to the number of rows in df.\n\ndf$school == \"UT\"\n\n##  [1]  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE\n## [13] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE\n\n\nIt then subsets the original df based on that vector, returning only rows that evaluate to “TRUE”.\nThe Boolean operators & (for “AND”) and | (for “OR”) can be used to create more complex filtering criteria. Here, we filter the data frame for only those rows where the variable school is “UT” AND the variable gender is “female”.\n\nnew_df &lt;- df[df$school == \"UT\" & df$gender == \"female\", ]\nnew_df\n\n##    gender name.title name.first name.last         location.street location.city\n## 5  female         ms     susana    blanco 2208 avenida de america      mastoles\n## 8  female       miss     kaylee    gordon         5475 camden ave         flint\n## 14 female       miss   kimberly     brown         8654 manor road        bangor\n## 18 female         ms       ella      neva          4620 visiokatu        kerava\n##    location.state location.postcode                      email\n## 5     extremadura             29445  susana.blanco@example.com\n## 8          oregon             84509  kaylee.gordon@example.com\n## 14        borders          HI92 8RY kimberly.brown@example.com\n## 18 finland proper             26385      ella.neva@example.com\n##       login.username login.password           dob date.registered\n## 5     silverkoala701          aloha 12/18/55 3:21   10/3/02 17:55\n## 8  beautifulgoose794       atlantis 3/24/48 12:22     5/5/13 8:14\n## 14  crazyelephant996       nebraska   1/9/86 8:54    12/3/11 0:41\n## 18  orangegorilla786       f00tball 7/18/91 14:30    3/17/14 7:13\n##             phone           cell\n## 5     917-199-202    612-612-929\n## 8  (817)-962-1275 (831)-325-1142\n## 14   017684 80873   0799-553-944\n## 18     02-351-279  043-436-42-30\n##                                       picture.large nat id school\n## 5  https://randomuser.me/api/portraits/women/18.jpg  ES  5     UT\n## 8  https://randomuser.me/api/portraits/women/65.jpg  US  8     UT\n## 14 https://randomuser.me/api/portraits/women/49.jpg  GB 14     UT\n## 18 https://randomuser.me/api/portraits/women/68.jpg  FI 18     UT\n\n\nHere, we filter the data frame for only rows where either the school is “UT” OR the variable gender is “female”, using the | operator. We also select only the columns gender, name.first, and name.last by passing a vector to the second argument of the [ ] function.\n\nnew_df &lt;- df[df$school == \"UT\" | df$gender == \"female\", c(\"gender\", \"name.first\",\n    \"name.last\")]\nnew_df\n\n##    gender name.first  name.last\n## 1    male        ted     wright\n## 2    male    quentin    schmitt\n## 3  female      laura   johansen\n## 5  female     susana     blanco\n## 8  female     kaylee     gordon\n## 9    male     baraek limoncuocu\n## 12   male   valtteri   waisanen\n## 13 female    vanessa     brewer\n## 14 female   kimberly      brown\n## 15 female     loreen   baettner\n## 16 female      becky    wallace\n## 18 female       ella       neva\n\n\n\n\nSelecting Columns of a Data Frame\nWe can also select to only return particular columns when we filter. Here, we return only the columns name.last, name.first, and school.\n\nnew_df &lt;- df[df$school == \"UT\", c(\"name.last\", \"name.first\", \"school\")]\nnew_df\n\n##     name.last name.first school\n## 1      wright        ted     UT\n## 2     schmitt    quentin     UT\n## 5      blanco     susana     UT\n## 8      gordon     kaylee     UT\n## 9  limoncuocu     baraek     UT\n## 12   waisanen   valtteri     UT\n## 14      brown   kimberly     UT\n## 18       neva       ella     UT\n\n\nHere, we return all rows from the data frame, but only the “name.last”, “name.first”, and “school” columns.\n\nnew_df &lt;- df[, c(\"name.last\", \"name.first\", \"school\")]\nnew_df\n\n##     name.last name.first      school\n## 1      wright        ted          UT\n## 2     schmitt    quentin          UT\n## 3    johansen      laura         A&M\n## 4     herrero     ismael         A&M\n## 5      blanco     susana          UT\n## 6      wilson      mason        Rice\n## 7     strauio       lutz  Texas Tech\n## 8      gordon     kaylee          UT\n## 9  limoncuocu     baraek          UT\n## 10     perrin     basile Texas State\n## 11      lopez      ruben         A&M\n## 12   waisanen   valtteri          UT\n## 13     brewer    vanessa        Rice\n## 14      brown   kimberly          UT\n## 15   baettner     loreen         A&M\n## 16    wallace      becky  Texas Tech\n## 17   gonzalez     hector         A&M\n## 18       neva       ella          UT\n## 19    barnaby      simon Texas State\n## 20      moser        max         A&M\n\n\nWe can also refer to columns by their positions and return them in a select order, thereby restructuring the data frame. Here, we return all rows from the data frame, but include only columns 1, 3, and 4, flipping the order of the latter two columns:\n\nnew_df &lt;- df[, c(1, 4, 3)]\nnew_df\n\n##    gender  name.last name.first\n## 1    male     wright        ted\n## 2    male    schmitt    quentin\n## 3  female   johansen      laura\n## 4    male    herrero     ismael\n## 5  female     blanco     susana\n## 6    male     wilson      mason\n## 7    male    strauio       lutz\n## 8  female     gordon     kaylee\n## 9    male limoncuocu     baraek\n## 10   male     perrin     basile\n## 11   male      lopez      ruben\n## 12   male   waisanen   valtteri\n## 13 female     brewer    vanessa\n## 14 female      brown   kimberly\n## 15 female   baettner     loreen\n## 16 female    wallace      becky\n## 17   male   gonzalez     hector\n## 18 female       neva       ella\n## 19   male    barnaby      simon\n## 20   male      moser        max\n\n\nWe can use a minus sign - in front of a vector of indices to instead indicate columns we do not want to return:\n\nnew_df &lt;- df[, -c(1, 2, 5:18)]\nnew_df\n\n##    name.first  name.last      school\n## 1         ted     wright          UT\n## 2     quentin    schmitt          UT\n## 3       laura   johansen         A&M\n## 4      ismael    herrero         A&M\n## 5      susana     blanco          UT\n## 6       mason     wilson        Rice\n## 7        lutz    strauio  Texas Tech\n## 8      kaylee     gordon          UT\n## 9      baraek limoncuocu          UT\n## 10     basile     perrin Texas State\n## 11      ruben      lopez         A&M\n## 12   valtteri   waisanen          UT\n## 13    vanessa     brewer        Rice\n## 14   kimberly      brown          UT\n## 15     loreen   baettner         A&M\n## 16      becky    wallace  Texas Tech\n## 17     hector   gonzalez         A&M\n## 18       ella       neva          UT\n## 19      simon    barnaby Texas State\n## 20        max      moser         A&M",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#factors",
    "href": "07-module.html#factors",
    "title": "7  Additional Data Structures in R",
    "section": "7.5 Factors",
    "text": "7.5 Factors\nWe were introduced to the factor data class above. Again, factors are numeric codes that R can use internally that correspond to character value “levels”.\nWhen we load in data from an external source (as we do in Module 08), {base} R tends to import character string data as factors, assigning to each unique string to an integer numeric code and assigning the string as a “label” for that code. Using factors can make some code run much more quickly (e.g., ANOVA, ANCOVA, and other forms of regression using categorical variables).",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#variable-conversion-and-coercion",
    "href": "07-module.html#variable-conversion-and-coercion",
    "title": "7  Additional Data Structures in R",
    "section": "7.6 Variable Conversion and Coercion",
    "text": "7.6 Variable Conversion and Coercion\nYou can convert factor to character data (and vice versa) using the as.character() or as.factor() commands. You can also convert/coerce any vector to a different class using similar constructs (e.g., as.numeric()), although not all such conversions are really meaningful. Converting factor data to numeric results in the the converted data having the value of R’s internal numeric code for the factor level, while converting character data to numeric results in the data being coerced into the special data value of NA (see below) for missing data.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#special-data-values",
    "href": "07-module.html#special-data-values",
    "title": "7  Additional Data Structures in R",
    "section": "7.7 Special Data Values",
    "text": "7.7 Special Data Values\nFinally, R has three special data values that it uses in a variety of situations.\n\nNA (for not available) is used for missing data. Many statistical functions offer the possibility to include as an argument na.rm=TRUE (“remove NAs”) so that NAs are excluded from a calculation.\nInf (and -Inf) is used when the result of a numerical calculation is too extreme for R to express\nNaN (for not a number) is used when R cannot express the results of a calculation , e.g., when you try to take the square root of a negative number\n\n\nCHALLENGE\n\nStore the following vector of numbers as a 5 x 3 matrix: 3, 0, 1 ,23, 1, 2, 33, 1, 1, 42, 0, 1, 41, 0, 2\nBe sure to fill the matrix ROWWISE\n\n\n\nShow Code\nm &lt;- matrix(c(3, 0, 1, 23, 1, 2, 33, 1, 1, 42, 0, 1, 41, 0, 2), nrow = 5, ncol = 3,\n    byrow = TRUE)\nm\n\n\nShow Output\n##      [,1] [,2] [,3]\n## [1,]    3    0    1\n## [2,]   23    1    2\n## [3,]   33    1    1\n## [4,]   42    0    1\n## [5,]   41    0    2\n\n\n\n\nThen, coerce the matrix to a data frame\n\n\n\nShow Code\n(d &lt;- as.data.frame(m))\n\n\nShow Output\n##   V1 V2 V3\n## 1  3  0  1\n## 2 23  1  2\n## 3 33  1  1\n## 4 42  0  1\n## 5 41  0  2\n\n\n\n\nAs a data frame, coerce the second column to be logical (i.e., Boolean)\n\n\n\nShow Code\n(d[, 2] &lt;- as.logical(d[, 2]))\n\n\nShow Output\n## [1] FALSE  TRUE  TRUE FALSE FALSE\n\n\n\n\nAs a data frame, coerce the third column to be a factor\n\n\n\nShow Code\n(d[, 3] &lt;- as.factor(d[, 3]))\n\n\nShow Output\n## [1] 1 2 1 1 2\n## Levels: 1 2\n\n\n\n\nWhen you are done, use the str() command to show the data type for each variable in your dataframe.\n\n\nstr(d)\n\n## 'data.frame':    5 obs. of  3 variables:\n##  $ V1: num  3 23 33 42 41\n##  $ V2: logi  FALSE TRUE TRUE FALSE FALSE\n##  $ V3: Factor w/ 2 levels \"1\",\"2\": 1 2 1 1 2",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#other-data-frame-like-structures",
    "href": "07-module.html#other-data-frame-like-structures",
    "title": "7  Additional Data Structures in R",
    "section": "7.8 Other Data Frame-Like Structures",
    "text": "7.8 Other Data Frame-Like Structures\n\nData Tables\nA “data table” is a structure introduced in the package {data.table} that provides an enhancements to the data frame structure, which is the standard data structure for storing tabular data in {base} R. We use the same syntax for creating a data table…\n\ndt &lt;- data.table(firstName = c(\"Rick\", \"Negan\", \"Dwight\", \"Maggie\", \"Michonne\"),\n    community = c(\"Alexandria\", \"Saviors\", \"Saviors\", \"Hiltop\", \"Alexandria\"), sex = c(\"M\",\n        \"M\", \"M\", \"F\", \"F\"), age = c(42, 40, 33, 28, 31))\ndt\n\n##    firstName  community    sex   age\n##       &lt;char&gt;     &lt;char&gt; &lt;char&gt; &lt;num&gt;\n## 1:      Rick Alexandria      M    42\n## 2:     Negan    Saviors      M    40\n## 3:    Dwight    Saviors      M    33\n## 4:    Maggie     Hiltop      F    28\n## 5:  Michonne Alexandria      F    31\n\nstr(dt)\n\n## Classes 'data.table' and 'data.frame':   5 obs. of  4 variables:\n##  $ firstName: chr  \"Rick\" \"Negan\" \"Dwight\" \"Maggie\" ...\n##  $ community: chr  \"Alexandria\" \"Saviors\" \"Saviors\" \"Hiltop\" ...\n##  $ sex      : chr  \"M\" \"M\" \"M\" \"F\" ...\n##  $ age      : num  42 40 33 28 31\n##  - attr(*, \".internal.selfref\")=&lt;externalptr&gt;\n\n# versus...\n\ndf &lt;- data.frame(firstName = c(\"Rick\", \"Negan\", \"Dwight\", \"Maggie\", \"Michonne\"),\n    community = c(\"Alexandria\", \"Saviors\", \"Saviors\", \"Hiltop\", \"Alexandria\"), sex = c(\"M\",\n        \"M\", \"M\", \"F\", \"F\"), age = c(42, 40, 33, 28, 31))\ndf\n\n##   firstName  community sex age\n## 1      Rick Alexandria   M  42\n## 2     Negan    Saviors   M  40\n## 3    Dwight    Saviors   M  33\n## 4    Maggie     Hiltop   F  28\n## 5  Michonne Alexandria   F  31\n\nstr(df)\n\n## 'data.frame':    5 obs. of  4 variables:\n##  $ firstName: chr  \"Rick\" \"Negan\" \"Dwight\" \"Maggie\" ...\n##  $ community: chr  \"Alexandria\" \"Saviors\" \"Saviors\" \"Hiltop\" ...\n##  $ sex      : chr  \"M\" \"M\" \"M\" \"F\" ...\n##  $ age      : num  42 40 33 28 31\n\n\nNote that printing a data table results in a slightly different output than printing a data frame (e.g., row numbers are printed followed by a “:”) and the structure (str()) looks a bit different. Also, different from data frames, when we read in data, columns of character type are never converted to factors by default (i.e., we do not need to specify anything like stringsAsFactors=FALSE when we read in data… that’s the opposite default as we see for data frames).\nThe big advantage of using data tables over data frames is that they support a different, easier syntax for filtering rows and selecting columns and for grouping output.\n\ndt[sex == \"M\"]  # filter for sex = 'M' in a data table\n\n##    firstName  community    sex   age\n##       &lt;char&gt;     &lt;char&gt; &lt;char&gt; &lt;num&gt;\n## 1:      Rick Alexandria      M    42\n## 2:     Negan    Saviors      M    40\n## 3:    Dwight    Saviors      M    33\n\ndf[df$sex == \"M\", ]  # filter for sex = 'M' in a data frame\n\n##   firstName  community sex age\n## 1      Rick Alexandria   M  42\n## 2     Negan    Saviors   M  40\n## 3    Dwight    Saviors   M  33\n\ndt[1:2]  # return the first two rows of the data table\n\n##    firstName  community    sex   age\n##       &lt;char&gt;     &lt;char&gt; &lt;char&gt; &lt;num&gt;\n## 1:      Rick Alexandria      M    42\n## 2:     Negan    Saviors      M    40\n\ndf[1:2, ]  # return the first two rows of the data table\n\n##   firstName  community sex age\n## 1      Rick Alexandria   M  42\n## 2     Negan    Saviors   M  40\n\ndt[, sex]  # returns the variable 'sex'\n\n## [1] \"M\" \"M\" \"M\" \"F\" \"F\"\n\nstr(dt[, sex])  # sex is a CHARACTER vector\n\n##  chr [1:5] \"M\" \"M\" \"M\" \"F\" \"F\"\n\ndf[, c(\"sex\")]  # returns the variable 'sex'\n\n## [1] \"M\" \"M\" \"M\" \"F\" \"F\"\n\nstr(df[, c(\"sex\")])  # sex is a FACTOR with 2 levels\n\n##  chr [1:5] \"M\" \"M\" \"M\" \"F\" \"F\"\n\n\nThe data table structure also allows us more straightforward syntax - and implements much faster algorithms - for computations on columns and for perform aggregations of data by a grouping variable.\n\n\n“Tibbles”\nA “tibble” is another newer take on the data frame structure, implemented in the package {tibble} (which is loaded as part of {tidyverse}). The structure was created to keep the best features of data frames and correct some of the more frustrating aspects associated with the older structure. For example, like data tables, tibbles do not by default change the input type of a variable from character to factor when the tibble is created.\n\nt &lt;- tibble(firstName = c(\"Rick\", \"Negan\", \"Dwight\", \"Maggie\", \"Michonne\"), community = c(\"Alexandria\",\n    \"Saviors\", \"Saviors\", \"Hiltop\", \"Alexandria\"), sex = c(\"M\", \"M\", \"M\", \"F\", \"F\"),\n    age = c(42, 40, 33, 28, 31))\nt\n\n## # A tibble: 5 × 4\n##   firstName community  sex     age\n##   &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt; &lt;dbl&gt;\n## 1 Rick      Alexandria M        42\n## 2 Negan     Saviors    M        40\n## 3 Dwight    Saviors    M        33\n## 4 Maggie    Hiltop     F        28\n## 5 Michonne  Alexandria F        31\n\nstr(t)\n\n## tibble [5 × 4] (S3: tbl_df/tbl/data.frame)\n##  $ firstName: chr [1:5] \"Rick\" \"Negan\" \"Dwight\" \"Maggie\" ...\n##  $ community: chr [1:5] \"Alexandria\" \"Saviors\" \"Saviors\" \"Hiltop\" ...\n##  $ sex      : chr [1:5] \"M\" \"M\" \"M\" \"F\" ...\n##  $ age      : num [1:5] 42 40 33 28 31\n\n\nNote that the output of printing a tibble again looks slightly different than that for data frames or data tables… e.g., the data type of each column is included in the header row, for example. str() also shows us that characters were not converted to factors.\nAdditionally, subsetting tibbles with the single bracket operator ([ ]) always returns a tibble, whereas doing the same with a data frame can return either a data frame or a vector.\n\nt[, \"age\"]\n\n## # A tibble: 5 × 1\n##     age\n##   &lt;dbl&gt;\n## 1    42\n## 2    40\n## 3    33\n## 4    28\n## 5    31\n\nclass(t[, \"age\"])\n\n## [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\ndf[, \"age\"]\n\n## [1] 42 40 33 28 31\n\nclass(df[, \"age\"])\n\n## [1] \"numeric\"\n\n\nThere are some other subtle differences regarding the behavior of tibbles versus data frames that are also worthwhile to note. Data frames support “partial matching” in variable names when the $ operator is used, thus df$a will return the variable df$age. Tibbles are stricter and will never do partial matching.\n\ndf$a  # returns df$age\n\n## [1] 42 40 33 28 31\n\nt$a  # returns NULL and gives a warning\n\n## Warning: Unknown or uninitialised column: `a`.\n\n\n## NULL\n\n\nFinally, tibbles are careful about recycling. When creating a tibble, columns have to have consistent lengths and only values of length 1 are recycled. Thus, in the following…\n\nt &lt;- tibble(a = 1:4, c = 1)\n# this works fine... c is recycled\nt\n\n## # A tibble: 4 × 2\n##       a     c\n##   &lt;int&gt; &lt;dbl&gt;\n## 1     1     1\n## 2     2     1\n## 3     3     1\n## 4     4     1\n\n# t &lt;- tibble(a=1:4, c=1:2) but this would throw an error... c is not recycled\n# even though it could fit evenly into the number of rows\n\ndf &lt;- data.frame(a = 1:4, c = 1:2)\ndf\n\n##   a c\n## 1 1 1\n## 2 2 2\n## 3 3 1\n## 4 4 2\n\n\n\n# | include: false\ndetach(package:tidyverse)\ndetach(package:data.table)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "07-module.html#concept-review",
    "href": "07-module.html#concept-review",
    "title": "7  Additional Data Structures in R",
    "section": "Concept Review",
    "text": "Concept Review\n\nCreating matrices and arrays: matrix(data=, nrow=, ncol=, byrow=), array(data=, dim=), rbind(), cbind()\nCreating lists: list()\nCreating data frames: data.frame()\nSubsetting: single bracket ([ ]), double bracket ([[ ]]), and $ notation\nVariable coercion: as.numeric(), as.character(), as.data.frame()\nReading .csv data: read.csv(file=, header=, stringsAsFactors=)\nFiltering rows of a data frame using {base} R: df[df$&lt;variable name&gt; == \"&lt;criterion&gt;\", ], df[df[[\"&lt;variable name&gt;\"]] == \"&lt;criterion&gt;\", ]\nSelecting/excluding columns of a data frame: df[ , c(\"&lt;variable name 1&gt;\", \"&lt;variable name 2&gt;\",...)],df[ , c(&lt;column index 1&gt;, &lt;column index 2&gt;,...)]",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Additional Data Structures in ***R***</span>"
    ]
  },
  {
    "objectID": "08-module.html",
    "href": "08-module.html",
    "title": "8  Getting Data into R",
    "section": "",
    "text": "8.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Getting Data into ***R***</span>"
    ]
  },
  {
    "objectID": "08-module.html#objectives",
    "href": "08-module.html#objectives",
    "title": "8  Getting Data into R",
    "section": "",
    "text": "The objective of this module to learn how to download data sets from various local and online sources.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Getting Data into ***R***</span>"
    ]
  },
  {
    "objectID": "08-module.html#preliminaries",
    "href": "08-module.html#preliminaries",
    "title": "8  Getting Data into R",
    "section": "8.2 Preliminaries",
    "text": "8.2 Preliminaries\n\nGO TO: https://github.com/difiore/ada-datasets, download the “.txt” and “.csv” versions of “Country-Data-2016”, and save them locally.\n\nThis data set consists of basic statistics (area, current population size, birth rate, death rate, life expectancy, and form of government) for 249 countries taken from WorldData.info that I have combined with data from the International Union for the Conservation of Nature (IUCN)’s Red List Summary Statistics about the number of threatened animal species by country.\n\nFrom the same page, download each of the “.txt”, “.csv”, and “.xlsx” versions of “CPDS-1960-2014-reduced”.\n\nThese files contain a version of the Comparative Political Data Set (CPDS), which is “a collection of political and institutional country-level data provided by Prof. Dr. Klaus Armingeon and collaborators at the University of Berne. The dataset consists of annual data for 36 democratic countries for the period of 1960 to 2014 or since their transition to democracy” (Armingeon et al. 2016). The full dataset consists of 300 variables, which I have pared down to a smaller set of economical and population size variables.\n\nCITATION: Armingeon K, Isler C, Knöpfel L, Weisstanner D, and Engler S. 2016. Comparative Political Data Set 1960-2014. Bern: Institute of Political Science, University of Berne.\n\n\nInstall these packages in R: {readxl}, {XLConnect}, {gdata}, {xlsx}, {curl}, {rdrop2}, {repmis}, {googlesheets4}, and {googledrive}\nLoad {tidyverse}\n\n\nNOTE: Some of these packages (e.g., {XLConnect}, {xlsx}) require that your computer has a Java Runtime Environment (JRE) installed. A JRE is a bundle of software contaiing an interpreter and compiler for Java code, which is used to implement some of the functionality in the package. If your computer does not already have a JRE installed, you will need to also install one before being able to use these packages. You can download a JRE from Oracle’s Java website.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Getting Data into ***R***</span>"
    ]
  },
  {
    "objectID": "08-module.html#the-tao-of-text",
    "href": "08-module.html#the-tao-of-text",
    "title": "8  Getting Data into R",
    "section": "8.3 The Tao of Text",
    "text": "8.3 The Tao of Text\nSo far, we have seen how to create a variety of data structures by hand (e.g., using the c() function), but for larger data sets we will need mechanisms to import data into R. There are many methods for importing tabular data, stored in various formats (like text files, spreadsheets, and databases).\nPlain text files are, arguably, the very best way to store data (and scripts and other documents) as they are a standard format that has been around longer than most operating systems and are unlikely to change anytime soon. Some of the benefits of using text files are listed below:\n\nPlain text does not have a version and does not age.\nPlain text files are platform and software agnostic.\nPlain text files can be opened by a wide variety of programs.\nPlain text can easily be copied and pasted into a wide range of software.\nPlain text files tend to be smaller and quicker to open then proprietary formats.\nPlain text files are easy to transmit over the web.\nMany mature and efficient software tools exist for indexing, parsing, searching, and modifying text.\nThe content of plain text files looks the same on any system.\nVarious flavors of Markdown can be used for styling plain text files, if needed.\nPlain text remains itself outside of the digital context.\nCAVEAT: With text, we do have to think about the sometimes gnarly issue of text encoding. See this article or this pdf for a nice overview of the issues.\n\n\nTL/DR: Work with UTF-8 encoding whenever you can!",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Getting Data into ***R***</span>"
    ]
  },
  {
    "objectID": "08-module.html#working-with-local-files",
    "href": "08-module.html#working-with-local-files",
    "title": "8  Getting Data into R",
    "section": "8.4 Working with Local Files",
    "text": "8.4 Working with Local Files\n\nSetting the Path to a File\nThe file.choose() command is a useful command for interactive engagement with R. It gives you a familiar operating system-specific dialog box and allows you to select a file. You can use this to specify the path to a locally-stored file. The code below will assign the variable f to the full path to the file you choose.\n\nf &lt;- file.choose()\n\nAlternatively, you can directly assign a variable, e.g., f, to be the path to a locally-stored file. The file paths below refer to where I have saved the data files I downloaded - in a folder called data/ within my working directory. You may need to change this path if you have saved downloaded data to a different location on your computer.\n\n\nLoading Data from Text Files\nIn R, we can load a data set from a several types of plain text file stored on a local computer using the read.table() function from the {base} package, with the path to the file as the first (file=\"&lt;path&gt;\") argument for the function. An additional argument (header=&lt;boolean&gt;) can be used to specify whether the first row of the data file consists of column/field names.\nThe generic read.table() function can be used to read data files where columns are separated by tabs, commas, white space, or some other delimiter. The sep= argument tells R what character is used as a delimiter. The skip= argument can be used to start reading a file after a set number of rows.\nThere are format-specific variants of read.table() (e.g., read.csv()) that have different defaults and may be quicker for certain file types. Note that, as mentioned in Module 07, when using this function from the {base} package, the argument stringsAsFactors= is set to be TRUE by default, and we need to set it as FALSE if we want character strings to be loaded as actual strings.\nAs an example, we will read in some of the data sets that you have copied and stored locally in the files “CPDS-1960-2014-reduced.csv” and “CPDS-1960-2014-reduced.txt”.\n\nReading comma-separated (“.csv”) text files with {base} R\n\nf &lt;- \"data/CPDS-1960-2014-reduced.csv\"\nd &lt;- read.table(f, header = TRUE, sep = \",\", stringsAsFactors = FALSE)\nhead(d)  # shows the first 6 lines of data\n\n##   year   country gov_right1 gov_cent1 gov_left1 gov_party      elect vturn\n## 1 1960 Australia        100         0         0         1             95.5\n## 2 1961 Australia        100         0         0         1 09/12/1961  95.3\n## 3 1962 Australia        100         0         0         1             95.3\n## 4 1963 Australia        100         0         0         1 30/11/1963  95.7\n## 5 1964 Australia        100         0         0         1             95.7\n## 6 1965 Australia        100         0         0         1             95.7\n##   womenpar realgdpgr inflation debt_hist deficit ttl_labf labfopar unemp\n## 1        0        NA      3.73     40.15    0.46  4215.00       NA  1.25\n## 2        0     -0.64      2.29     38.62   -0.36  4286.00       NA  2.46\n## 3        0      5.77     -0.32     38.75   -0.79  4382.00       NA  2.32\n## 4        0      6.01      0.64     37.34   -0.51  4484.00       NA  1.87\n## 5        0      6.26      2.87     35.31   -0.08  4610.80    67.24  1.45\n## 6        0      4.99      3.41     53.99   -0.73  4745.95    67.66  1.36\n##       pop pop15_64 pop65 elderly\n## 1 10275.0   6296.5 874.9    8.51\n## 2 10508.2   6428.6 894.6    8.51\n## 3 10700.5   6571.5 913.6    8.54\n## 4 10906.9   6710.9 933.0    8.55\n## 5 11121.6   6857.3 948.1    8.52\n## 6 11340.9   7014.6 966.3    8.52\n\n\n\nNOTE: You can use a second argument to the head() function to return a specified number of lines, e.g., head(d, 10). You can also use bracket notation to display a certain range of lines, e.g., head(d)[11:20].\n\nOr, alternatively…\n\nd &lt;- read.csv(f, header = TRUE, stringsAsFactors = FALSE)\nhead(d)\n\n##   year   country gov_right1 gov_cent1 gov_left1 gov_party      elect vturn\n## 1 1960 Australia        100         0         0         1             95.5\n## 2 1961 Australia        100         0         0         1 09/12/1961  95.3\n## 3 1962 Australia        100         0         0         1             95.3\n## 4 1963 Australia        100         0         0         1 30/11/1963  95.7\n## 5 1964 Australia        100         0         0         1             95.7\n## 6 1965 Australia        100         0         0         1             95.7\n##   womenpar realgdpgr inflation debt_hist deficit ttl_labf labfopar unemp\n## 1        0        NA      3.73     40.15    0.46  4215.00       NA  1.25\n## 2        0     -0.64      2.29     38.62   -0.36  4286.00       NA  2.46\n## 3        0      5.77     -0.32     38.75   -0.79  4382.00       NA  2.32\n## 4        0      6.01      0.64     37.34   -0.51  4484.00       NA  1.87\n## 5        0      6.26      2.87     35.31   -0.08  4610.80    67.24  1.45\n## 6        0      4.99      3.41     53.99   -0.73  4745.95    67.66  1.36\n##       pop pop15_64 pop65 elderly\n## 1 10275.0   6296.5 874.9    8.51\n## 2 10508.2   6428.6 894.6    8.51\n## 3 10700.5   6571.5 913.6    8.54\n## 4 10906.9   6710.9 933.0    8.55\n## 5 11121.6   6857.3 948.1    8.52\n## 6 11340.9   7014.6 966.3    8.52\n\n\n\ntail(d)  # shows the last 6 lines of data\n\n##      year country gov_right1 gov_cent1 gov_left1 gov_party      elect vturn\n## 1573 2009     USA      16.36     83.64         0         1             53.2\n## 1574 2010     USA      11.76     88.24         0         1 02/11/2010  39.8\n## 1575 2011     USA       8.80     91.20         0         1             39.8\n## 1576 2012     USA       5.88     94.12         0         1 06/11/2012  50.9\n## 1577 2013     USA       5.88     94.12         0         1             50.9\n## 1578 2014     USA       8.40     91.60         0         1 04/11/2014  35.6\n##      womenpar realgdpgr inflation debt_hist deficit ttl_labf labfopar unemp\n## 1573     16.8     -2.78     -0.36     93.47  -12.83 155454.0    75.49   9.3\n## 1574     16.8      2.53      1.64    102.66  -12.18 155220.3    74.80   9.6\n## 1575     16.8      1.60      3.16    108.25  -10.75 154949.3    74.12   8.9\n## 1576     18.0      2.22      2.07    111.48   -9.00 156368.6    74.53   8.1\n## 1577     17.8      1.49      1.46    111.45   -5.49 156761.2    74.41   7.4\n## 1578     19.3      2.43      1.62    111.70   -5.13 157268.8       NA   6.2\n##           pop pop15_64    pop65 elderly\n## 1573 306771.5 206060.8 39623.18   12.92\n## 1574 309347.1 207665.3 40479.35   13.09\n## 1575 311721.6 209179.2 41366.63   13.27\n## 1576 314112.1 209823.0 43164.91   13.74\n## 1577 316498.0 210673.5 44723.04   14.13\n## 1578 318857.0 211545.9 46243.21   14.50\n\nclass(d)  # shows that tables are typically loaded in as data frames\n\n## [1] \"data.frame\"\n\n\n\n\nReading tab-separated (“.tsv”, “.txt”) text files with {base} R\n\nNOTE: In the following snippet, you can change the sep= argument as needed to use other delimiters\n\n\nf &lt;- \"data/CPDS-1960-2014-reduced.txt\"  # specfies a local path\nd &lt;- read.table(f, header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE, fill = TRUE)\n# if fill is left as the default (FALSE) then this will throw an error...  if\n# TRUE then if the rows have unequal length, blank fields are implicitly added\nhead(d)  # shows the first 6 lines of data\n\n##   year   country gov_right1 gov_cent1 gov_left1 gov_party      elect vturn\n## 1 1960 Australia        100         0         0         1             95.5\n## 2 1961 Australia        100         0         0         1 09/12/1961  95.3\n## 3 1962 Australia        100         0         0         1             95.3\n## 4 1963 Australia        100         0         0         1 30/11/1963  95.7\n## 5 1964 Australia        100         0         0         1             95.7\n## 6 1965 Australia        100         0         0         1             95.7\n##   womenpar realgdpgr inflation debt_hist deficit ttl_labf labfopar unemp\n## 1        0        NA      3.73     40.15    0.46  4215.00       NA  1.25\n## 2        0     -0.64      2.29     38.62   -0.36  4286.00       NA  2.46\n## 3        0      5.77     -0.32     38.75   -0.79  4382.00       NA  2.32\n## 4        0      6.01      0.64     37.34   -0.51  4484.00       NA  1.87\n## 5        0      6.26      2.87     35.31   -0.08  4610.80    67.24  1.45\n## 6        0      4.99      3.41     53.99   -0.73  4745.95    67.66  1.36\n##       pop pop15_64 pop65 elderly\n## 1 10275.0   6296.5 874.9    8.51\n## 2 10508.2   6428.6 894.6    8.51\n## 3 10700.5   6571.5 913.6    8.54\n## 4 10906.9   6710.9 933.0    8.55\n## 5 11121.6   6857.3 948.1    8.52\n## 6 11340.9   7014.6 966.3    8.52\n\n\nOr, alternatively…\n\nd &lt;- read.delim(f, header = TRUE, stringsAsFactors = FALSE)\n# for the `read.delim()` function, fill=TRUE by default\nhead(d)\n\n##   year   country gov_right1 gov_cent1 gov_left1 gov_party      elect vturn\n## 1 1960 Australia        100         0         0         1             95.5\n## 2 1961 Australia        100         0         0         1 09/12/1961  95.3\n## 3 1962 Australia        100         0         0         1             95.3\n## 4 1963 Australia        100         0         0         1 30/11/1963  95.7\n## 5 1964 Australia        100         0         0         1             95.7\n## 6 1965 Australia        100         0         0         1             95.7\n##   womenpar realgdpgr inflation debt_hist deficit ttl_labf labfopar unemp\n## 1        0        NA      3.73     40.15    0.46  4215.00       NA  1.25\n## 2        0     -0.64      2.29     38.62   -0.36  4286.00       NA  2.46\n## 3        0      5.77     -0.32     38.75   -0.79  4382.00       NA  2.32\n## 4        0      6.01      0.64     37.34   -0.51  4484.00       NA  1.87\n## 5        0      6.26      2.87     35.31   -0.08  4610.80    67.24  1.45\n## 6        0      4.99      3.41     53.99   -0.73  4745.95    67.66  1.36\n##       pop pop15_64 pop65 elderly\n## 1 10275.0   6296.5 874.9    8.51\n## 2 10508.2   6428.6 894.6    8.51\n## 3 10700.5   6571.5 913.6    8.54\n## 4 10906.9   6710.9 933.0    8.55\n## 5 11121.6   6857.3 948.1    8.52\n## 6 11340.9   7014.6 966.3    8.52\n\n\n\n\nReading text files with the {readr} package\nThe {readr} package, which is loaded as part of {tidyverse} provides easy alternative functions to read in delimited text files. It runs faster than the {base} package functions. It begins by reading in an initial set of rows (a default number of 1000) from the table and then tries to impute the data class of each column. If you want, you can also directly specify the data class of each column with the col_types() function. The col_names=&lt;boolean&gt; argument is used to specify if your data has a header row.\n\nNOTE: There are variants of the main read_&lt;type&gt;() function for different types of files, e.g., tab-separated values (read_tsv()), comma-separated values (read_csv()), those with some other delimiter (read_delim()). A few common delimiters that might be used in text files are commas (,), tabs (\\t), semicolons (;), and end-of-line characters, e.g., “new lines” (\\n) or “carriage returns” (\\r).\n\n\nf &lt;- \"data/CPDS-1960-2014-reduced.txt\"\nd &lt;- read_tsv(f, col_names = TRUE)  # for tab-separated value files\nhead(d)\n\n## # A tibble: 6 × 20\n##    year country   gov_right1 gov_cent1 gov_left1 gov_party elect  vturn womenpar\n##   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n## 1  1960 Australia        100         0         0         1 &lt;NA&gt;    95.5        0\n## 2  1961 Australia        100         0         0         1 09/12…  95.3        0\n## 3  1962 Australia        100         0         0         1 &lt;NA&gt;    95.3        0\n## 4  1963 Australia        100         0         0         1 30/11…  95.7        0\n## 5  1964 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## 6  1965 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## # ℹ 11 more variables: realgdpgr &lt;dbl&gt;, inflation &lt;dbl&gt;, debt_hist &lt;dbl&gt;,\n## #   deficit &lt;dbl&gt;, ttl_labf &lt;dbl&gt;, labfopar &lt;dbl&gt;, unemp &lt;dbl&gt;, pop &lt;dbl&gt;,\n## #   pop15_64 &lt;dbl&gt;, pop65 &lt;dbl&gt;, elderly &lt;dbl&gt;\n\nclass(d)\n\n## [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\n# returns d as a data frame, but also as a 'tibble' note the output is more\n# verbose and the problems() function highlights where there might have been\n# parsing errors\n\nOr, alternatively…\n\nd &lt;- read_delim(f, delim = \"\\n\", col_names = TRUE)\n# for generic delimited files, where the delimiter is a tab ('\\t')\nhead(d)\n\n## # A tibble: 6 × 1\n##   year\\tcountry\\tgov_right1\\tgov_cent1\\tgov_left1\\tgov_party\\telect\\tvturn\\two…¹\n##   &lt;chr&gt;                                                                         \n## 1 \"1960\\tAustralia\\t100.00\\t0.00\\t0.00\\t1\\t\\t95.5\\t0.0\\t\\t3.73\\t40.15\\t0.46\\t42…\n## 2 \"1961\\tAustralia\\t100.00\\t0.00\\t0.00\\t1\\t09/12/1961\\t95.3\\t0.0\\t-0.64\\t2.29\\t…\n## 3 \"1962\\tAustralia\\t100.00\\t0.00\\t0.00\\t1\\t\\t95.3\\t0.0\\t5.77\\t-0.32\\t38.75\\t-0.…\n## 4 \"1963\\tAustralia\\t100.00\\t0.00\\t0.00\\t1\\t30/11/1963\\t95.7\\t0.0\\t6.01\\t0.64\\t3…\n## 5 \"1964\\tAustralia\\t100.00\\t0.00\\t0.00\\t1\\t\\t95.7\\t0.0\\t6.26\\t2.87\\t35.31\\t-0.0…\n## 6 \"1965\\tAustralia\\t100.00\\t0.00\\t0.00\\t1\\t\\t95.7\\t0.0\\t4.99\\t3.41\\t53.99\\t-0.7…\n## # ℹ abbreviated name:\n## #   ¹​`year\\tcountry\\tgov_right1\\tgov_cent1\\tgov_left1\\tgov_party\\telect\\tvturn\\twomenpar\\trealgdpgr\\tinflation\\tdebt_hist\\tdeficit\\tttl_labf\\tlabfopar\\tunemp\\tpop\\tpop15_64\\tpop65\\telderly`\n\n\n\nf &lt;- \"data/CPDS-1960-2014-reduced.csv\"\nd &lt;- read_csv(f, col_names = TRUE)  # for comma-separated value files\n\n## Rows: 1578 Columns: 20\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): country, elect\n## dbl (18): year, gov_right1, gov_cent1, gov_left1, gov_party, vturn, womenpar...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(d)\n\n## # A tibble: 6 × 20\n##    year country   gov_right1 gov_cent1 gov_left1 gov_party elect  vturn womenpar\n##   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n## 1  1960 Australia        100         0         0         1 &lt;NA&gt;    95.5        0\n## 2  1961 Australia        100         0         0         1 09/12…  95.3        0\n## 3  1962 Australia        100         0         0         1 &lt;NA&gt;    95.3        0\n## 4  1963 Australia        100         0         0         1 30/11…  95.7        0\n## 5  1964 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## 6  1965 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## # ℹ 11 more variables: realgdpgr &lt;dbl&gt;, inflation &lt;dbl&gt;, debt_hist &lt;dbl&gt;,\n## #   deficit &lt;dbl&gt;, ttl_labf &lt;dbl&gt;, labfopar &lt;dbl&gt;, unemp &lt;dbl&gt;, pop &lt;dbl&gt;,\n## #   pop15_64 &lt;dbl&gt;, pop65 &lt;dbl&gt;, elderly &lt;dbl&gt;\n\n\nOr, alternatively…\n\nd &lt;- read_delim(f, delim = \",\", col_names = TRUE)\n\n## Rows: 1578 Columns: 20\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): country, elect\n## dbl (18): year, gov_right1, gov_cent1, gov_left1, gov_party, vturn, womenpar...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# for generic delimited files, where the delimiter is a comma\nhead(d)\n\n## # A tibble: 6 × 20\n##    year country   gov_right1 gov_cent1 gov_left1 gov_party elect  vturn womenpar\n##   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n## 1  1960 Australia        100         0         0         1 &lt;NA&gt;    95.5        0\n## 2  1961 Australia        100         0         0         1 09/12…  95.3        0\n## 3  1962 Australia        100         0         0         1 &lt;NA&gt;    95.3        0\n## 4  1963 Australia        100         0         0         1 30/11…  95.7        0\n## 5  1964 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## 6  1965 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## # ℹ 11 more variables: realgdpgr &lt;dbl&gt;, inflation &lt;dbl&gt;, debt_hist &lt;dbl&gt;,\n## #   deficit &lt;dbl&gt;, ttl_labf &lt;dbl&gt;, labfopar &lt;dbl&gt;, unemp &lt;dbl&gt;, pop &lt;dbl&gt;,\n## #   pop15_64 &lt;dbl&gt;, pop65 &lt;dbl&gt;, elderly &lt;dbl&gt;\n\n\n\n\n\nLoading Data from Excel Files\nWhile you should never need to use Excel, sometimes you will no doubt be given a spreadsheet file with some data in it that you want to read in R. There are several packages available that provide functions for loading data into R from Excel spreadsheet files: {readxl}, {XLConnect}, and {xlsx}. The first two of these are fast, easy to use, and work well. Both require that you have successfully installed {rJava} on your computer, which both packages import as a dependency. Be warned, sometimes installing {rJava} can be tricky! {xlsx} also may be slower than the other methods, but its read.xlsx2() function may improve the speed.\n\nNOTE: You shoud always use str() to check if your variables come in as the correct data class!\n\n\nUsing the {readxl} package\n\nlibrary(readxl)\nf &lt;- \"data/CPDS-1960-2014-reduced.xlsx\"\nd &lt;- read_excel(f, sheet = 1, col_names = TRUE)\nhead(d)\n\n## # A tibble: 6 × 20\n##    year country   gov_right1 gov_cent1 gov_left1 gov_party elect              \n##   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dttm&gt;             \n## 1  1960 Australia        100         0         0         1 NA                 \n## 2  1961 Australia        100         0         0         1 1961-12-09 00:00:00\n## 3  1962 Australia        100         0         0         1 NA                 \n## 4  1963 Australia        100         0         0         1 1963-11-30 00:00:00\n## 5  1964 Australia        100         0         0         1 NA                 \n## 6  1965 Australia        100         0         0         1 NA                 \n## # ℹ 13 more variables: vturn &lt;dbl&gt;, womenpar &lt;dbl&gt;, realgdpgr &lt;dbl&gt;,\n## #   inflation &lt;dbl&gt;, debt_hist &lt;dbl&gt;, deficit &lt;dbl&gt;, ttl_labf &lt;dbl&gt;,\n## #   labfopar &lt;dbl&gt;, unemp &lt;dbl&gt;, pop &lt;dbl&gt;, pop15_64 &lt;dbl&gt;, pop65 &lt;dbl&gt;,\n## #   elderly &lt;dbl&gt;\n\nstr(d)  # `read_excel()` yields a 'tibble'\n\n## tibble [1,578 × 20] (S3: tbl_df/tbl/data.frame)\n##  $ year      : num [1:1578] 1960 1961 1962 1963 1964 ...\n##  $ country   : chr [1:1578] \"Australia\" \"Australia\" \"Australia\" \"Australia\" ...\n##  $ gov_right1: num [1:1578] 100 100 100 100 100 100 100 100 100 100 ...\n##  $ gov_cent1 : num [1:1578] 0 0 0 0 0 0 0 0 0 0 ...\n##  $ gov_left1 : num [1:1578] 0 0 0 0 0 0 0 0 0 0 ...\n##  $ gov_party : num [1:1578] 1 1 1 1 1 1 1 1 1 1 ...\n##  $ elect     : POSIXct[1:1578], format: NA \"1961-12-09\" ...\n##  $ vturn     : num [1:1578] 95.5 95.3 95.3 95.7 95.7 95.7 95.1 95.1 95.1 95 ...\n##  $ womenpar  : num [1:1578] 0 0 0 0 0 0 0.8 0.8 0.8 0 ...\n##  $ realgdpgr : num [1:1578] NA -0.643 5.767 6.009 6.258 ...\n##  $ inflation : num [1:1578] 3.729 2.288 -0.319 0.641 2.866 ...\n##  $ debt_hist : num [1:1578] 40.1 38.6 38.7 37.3 35.3 ...\n##  $ deficit   : num [1:1578] 0.4582 -0.3576 -0.7938 -0.5062 -0.0804 ...\n##  $ ttl_labf  : num [1:1578] 4215 4286 4382 4484 4611 ...\n##  $ labfopar  : num [1:1578] NA NA NA NA 67.2 ...\n##  $ unemp     : num [1:1578] 1.25 2.46 2.32 1.87 1.45 ...\n##  $ pop       : num [1:1578] 10275 10508 10700 10907 11122 ...\n##  $ pop15_64  : num [1:1578] 6296 6429 6572 6711 6857 ...\n##  $ pop65     : num [1:1578] 875 895 914 933 948 ...\n##  $ elderly   : num [1:1578] 8.51 8.51 8.54 8.55 8.52 ...\n\ndetach(package:readxl)\n\n\n\nUsing the {XLConnect} package\n\nlibrary(XLConnect)\nf &lt;- \"data/CPDS-1960-2014-reduced.xlsx\"\nd &lt;- readWorksheetFromFile(f, sheet = 1, header = TRUE)\nhead(d)\nstr(d)\n\nThe {XLConnect} package can also write data frames back out to Excel worksheets. If the file does not exist, it is created. If it does exist, data is cleared and overwritten. The second process is MUCH slower. In the following, I have included a conditional statement (if(){}) which will implement the file.remove() command here, if needed.\n\nf &lt;- \"output.xlsx\"\nif (file.exists(f)) {\n    file.remove(f)\n}\nwriteWorksheetToFile(f, d, sheet = \"myData\", clearSheets = TRUE)\ndetach(package:XLConnect)\n\nFor futher information on using {XLConnect} check out this blog post.\n\n\nUsing the {xlsx} package\n\nlibrary(xlsx)\nf &lt;- \"data/CPDS-1960-2014-reduced.xlsx\"\nd &lt;- read.xlsx(f, sheetIndex = 1)\n# or pass a named sheet using the argument `sheetIndex=` the function\n# `read.xlsx2()` is an updated alternative from the same package and may run\n# faster\nhead(d)\ndetach(package:xlsx)\n\n\nTL/DR: {readxl} seems to be the best package for reading Excel data, but you might need other packages and functions to write native Excel files (“.xls” or “.xlsx”).",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Getting Data into ***R***</span>"
    ]
  },
  {
    "objectID": "08-module.html#working-with-remote-files",
    "href": "08-module.html#working-with-remote-files",
    "title": "8  Getting Data into R",
    "section": "8.5 Working with Remote Files",
    "text": "8.5 Working with Remote Files\nWe can also use R as an interface to work with data and files stored on a server elsewhere on the web, e.g., Dropbox, GitHub, or Google Drive.\nTo read “.csv” or “.txt” files directly from GitHub, use the {curl} or {readr} packages.\nGO TO: https://github.com/difiore/ada-datasets, select the “.csv” version of the “CPDS-1960-2014-reduced” file, then press “RAW” and copy the URL from the address box of your browser window… this is what you need to use as an argument for the functions below (you will repeat this for the “.txt” version later on)\n\nUsing the {curl} Package\nThe {curl} package lets us open connection across the internet to read data from a URL, which we can then couple with one of the {base} read.table() functions.\nFor a comma-separated value (“.csv”) text file…\n\nlibrary(curl)\nf &lt;- curl(\"https://raw.githubusercontent.com/difiore/ada-datasets/main/CPDS-1960-2014-reduced.csv\")\nd &lt;- read.csv(f, header = TRUE, sep = \",\", stringsAsFactors = FALSE)\nhead(d)\n\n##   year   country gov_right1 gov_cent1 gov_left1 gov_party      elect vturn\n## 1 1960 Australia        100         0         0         1             95.5\n## 2 1961 Australia        100         0         0         1 09/12/1961  95.3\n## 3 1962 Australia        100         0         0         1             95.3\n## 4 1963 Australia        100         0         0         1 30/11/1963  95.7\n## 5 1964 Australia        100         0         0         1             95.7\n## 6 1965 Australia        100         0         0         1             95.7\n##   womenpar realgdpgr inflation debt_hist deficit ttl_labf labfopar unemp\n## 1        0        NA      3.73     40.15    0.46  4215.00       NA  1.25\n## 2        0     -0.64      2.29     38.62   -0.36  4286.00       NA  2.46\n## 3        0      5.77     -0.32     38.75   -0.79  4382.00       NA  2.32\n## 4        0      6.01      0.64     37.34   -0.51  4484.00       NA  1.87\n## 5        0      6.26      2.87     35.31   -0.08  4610.80    67.24  1.45\n## 6        0      4.99      3.41     53.99   -0.73  4745.95    67.66  1.36\n##       pop pop15_64 pop65 elderly\n## 1 10275.0   6296.5 874.9    8.51\n## 2 10508.2   6428.6 894.6    8.51\n## 3 10700.5   6571.5 913.6    8.54\n## 4 10906.9   6710.9 933.0    8.55\n## 5 11121.6   6857.3 948.1    8.52\n## 6 11340.9   7014.6 966.3    8.52\n\n# returns a data frame\n\nFor a tab-delimited (“.tsv” or .”txt”) text file…\n\nf &lt;- curl(\"https://raw.githubusercontent.com/difiore/ada-datasets/main/CPDS-1960-2014-reduced.txt\")\nd &lt;- read.table(f, header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE)\nhead(d)\n\n##   year   country gov_right1 gov_cent1 gov_left1 gov_party      elect vturn\n## 1 1960 Australia        100         0         0         1             95.5\n## 2 1961 Australia        100         0         0         1 09/12/1961  95.3\n## 3 1962 Australia        100         0         0         1             95.3\n## 4 1963 Australia        100         0         0         1 30/11/1963  95.7\n## 5 1964 Australia        100         0         0         1             95.7\n## 6 1965 Australia        100         0         0         1             95.7\n##   womenpar realgdpgr inflation debt_hist deficit ttl_labf labfopar unemp\n## 1        0        NA      3.73     40.15    0.46  4215.00       NA  1.25\n## 2        0     -0.64      2.29     38.62   -0.36  4286.00       NA  2.46\n## 3        0      5.77     -0.32     38.75   -0.79  4382.00       NA  2.32\n## 4        0      6.01      0.64     37.34   -0.51  4484.00       NA  1.87\n## 5        0      6.26      2.87     35.31   -0.08  4610.80    67.24  1.45\n## 6        0      4.99      3.41     53.99   -0.73  4745.95    67.66  1.36\n##       pop pop15_64 pop65 elderly\n## 1 10275.0   6296.5 874.9    8.51\n## 2 10508.2   6428.6 894.6    8.51\n## 3 10700.5   6571.5 913.6    8.54\n## 4 10906.9   6710.9 933.0    8.55\n## 5 11121.6   6857.3 948.1    8.52\n## 6 11340.9   7014.6 966.3    8.52\n\n# returns a data frame\ndetach(package:curl)\n\n\n\nUsing the {readr} Package\nUsing {readr}, filenames beginning with “http://”, “https://”, “ftp://”, or “fttps://” can be read without having to set up a curl connection interface.\n\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-datasets/main/CPDS-1960-2014-reduced.csv\"\nd &lt;- read_csv(f, col_names = TRUE)\n\n## Rows: 1578 Columns: 20\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): country, elect\n## dbl (18): year, gov_right1, gov_cent1, gov_left1, gov_party, vturn, womenpar...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(d)\n\n## # A tibble: 6 × 20\n##    year country   gov_right1 gov_cent1 gov_left1 gov_party elect  vturn womenpar\n##   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n## 1  1960 Australia        100         0         0         1 &lt;NA&gt;    95.5        0\n## 2  1961 Australia        100         0         0         1 09/12…  95.3        0\n## 3  1962 Australia        100         0         0         1 &lt;NA&gt;    95.3        0\n## 4  1963 Australia        100         0         0         1 30/11…  95.7        0\n## 5  1964 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## 6  1965 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## # ℹ 11 more variables: realgdpgr &lt;dbl&gt;, inflation &lt;dbl&gt;, debt_hist &lt;dbl&gt;,\n## #   deficit &lt;dbl&gt;, ttl_labf &lt;dbl&gt;, labfopar &lt;dbl&gt;, unemp &lt;dbl&gt;, pop &lt;dbl&gt;,\n## #   pop15_64 &lt;dbl&gt;, pop65 &lt;dbl&gt;, elderly &lt;dbl&gt;\n\n# returns a 'tibble', a new version of a data frame\n\n\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-datasets/main/CPDS-1960-2014-reduced.txt\"\nd &lt;- read_tsv(f, col_names = TRUE)\n\n## Rows: 1578 Columns: 20\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \"\\t\"\n## chr  (2): country, elect\n## dbl (18): year, gov_right1, gov_cent1, gov_left1, gov_party, vturn, womenpar...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(d)\n\n## # A tibble: 6 × 20\n##    year country   gov_right1 gov_cent1 gov_left1 gov_party elect  vturn womenpar\n##   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n## 1  1960 Australia        100         0         0         1 &lt;NA&gt;    95.5        0\n## 2  1961 Australia        100         0         0         1 09/12…  95.3        0\n## 3  1962 Australia        100         0         0         1 &lt;NA&gt;    95.3        0\n## 4  1963 Australia        100         0         0         1 30/11…  95.7        0\n## 5  1964 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## 6  1965 Australia        100         0         0         1 &lt;NA&gt;    95.7        0\n## # ℹ 11 more variables: realgdpgr &lt;dbl&gt;, inflation &lt;dbl&gt;, debt_hist &lt;dbl&gt;,\n## #   deficit &lt;dbl&gt;, ttl_labf &lt;dbl&gt;, labfopar &lt;dbl&gt;, unemp &lt;dbl&gt;, pop &lt;dbl&gt;,\n## #   pop15_64 &lt;dbl&gt;, pop65 &lt;dbl&gt;, elderly &lt;dbl&gt;\n\n# returns a 'tibble', a new version of a data frame\n\n\n\nAccessing Files on Dropbox\nTo load data from a “.csv” file located in a personal Dropbox account you can use the {rdrop2} package.\n\nNOTE: The {rdrop2} package has been deprecated because one of the dependencies upon which it relies - {assertive} - and, in turn, many of the dependencies upon which {assertive} relies, have not been maintained for some time. Still, it is possible with some care to install an older versions of {rdrop2} and all of its recursive dependencies from Package Archive Files downloaded from CRAN and thus get it working. It takes some time, but may be worthwhile.\n\n\nAlso note that the following code block cannot be rendered to show you the output because it requires an interactive R environment for drop_auth(), drop_search(), etc.\n\n\nlibrary(rdrop2)\ndrop_auth(new_user = TRUE)  # opens a browser dialog box to ask for authorization...\ndrop_dir()  # lists the contents of your dropbox folder\nf &lt;- \"CPDS-1960-2014-reduced.csv\"  # name of the file to read from\nf &lt;- drop_search(query = f, mode = \"filename\")\n# searches your dropbox directory for file or directory names... this can be\n# slow!\nfilenames &lt;- vector()\nfor (i in 1:length(f$matches)) {\n    filenames &lt;- c(filenames, f$matches[[i]]$metadata$path_display)\n    # this is the location of the results returned above the [[i]] returns each\n    # encountered file with a matching filename and puts them into a vector\n}\nd &lt;- drop_read_csv(filenames[1], header = TRUE, sep = \",\", stringsAsFactors = FALSE)\n# here the [1] reads only the first file from filenames, but this can be\n# modified this to read more than one file\ndetach(package:rdrop2)\n\nThis same process can be done to load data from other types of delimited files in Dropbox by setting the appropriate sep= argument.\nYou can also read text files from a Dropbox account (e.g., your own or someone else’s) using a direct link that can be created for any file. To create this link, you will need to choose to share the file (via the dropdown menu activated by clicking the three dots icon to the right of the filename) and then create and copy the direct link to the file.\n\nlink &lt;- \"https://www.dropbox.com/s/hes2loy1x4tikh9/CPDS-1960-2014-reduced.csv?dl=0\"\n\nYou can read text files from a Dropbox account (e.g., your own or someone else’s) using direct link for the file. To find this link, hover over the filename on Dropbox and then select “Copy link” and grab the direct link to the file.\n\n\n\n\n\n\n\n\n\nYou can then assign a variable to hold the link, which likely will end in dl=0.\n\nlink &lt;- \"https://www.dropbox.com/scl/fi/xyhwpfzhdo42mj840pv2e/CPDS-1960-2014-reduced.csv?rlkey=3r4ck0thhgb3p8t3zwmonund5&dl=0\"\n# NOTE: enter your link between quotation marks in lieu of this dummy link!\n\n\nNOTE: Following a shared Dropbox link like this one will take you to a webpage that has the data embedded… to get R to access the raw data, you will need to change the characters at end of the link from dl=0 to dl=1 or to raw=1. That is what the gsub() command in the first line of code below does. Then, you can load data from that file with read.csv() or read_csv(). This\n\n\nlink &lt;- gsub(pattern = \"dl=0\", replacement = \"dl=1\", x = link)\nd &lt;- read.csv(link, header = TRUE, sep = \",\", stringsAsFactors = FALSE)\n# or, using {tidyverse}, `d &lt;-read_csv(link, col_names = TRUE)`\nhead(d)\nstr(d)\n\nYou can also use the source_data() function from the {repmis} package (“Miscellaneous Tools for Reproducible Research”) to load data from a file on Dropbox. This function detects column types and gives a few more warnings than others if it encounters somthing odd.\n\nlibrary(repmis)\nd &lt;- source_data(link, header = TRUE, sep = \",\")\n# use the same updated link to the raw data as above\nhead(d)\nstr(d)\n\n\n\nAccessing Files on Box\nYou can load tabular data from Box sites (e.g., UT Box) with {base} R read.table() functions using a direct link that someone has shared with you. To get such a link, hover over the filename on Box and click the link button to “Copy Shared Link”.\n\n\n\n\n\n\n\n\n\nIn the dialog box that opens, select “Link Settings”…\n\n\n\n\n\n\n\n\n\n… and then copy the direct link, which will include the file type extension for the file. It is important to get the direct link to the file rather than just copying the shared link without the file type extension!\n\n\n\n\n\n\n\n\n\nYou can then assign this link to a variable and read data from it using read.csv() or read_csv().\n\nlink &lt;- \"https://utexas.box.com/shared/static/gnu54b6qt9e6t1b93ydyevanus7m7frj.csv\"\n# NOTE: enter the direct link between quotation marks in lieu of this dummy\n# link!\nd &lt;- read.csv(link, sep = \",\", header = TRUE, stringsAsFactors = FALSE)\n# or, using {tidyverse}, `d &lt;-read_csv(link, col_names = TRUE)`\n\nOr, alternatively, using {repmis}…\n\nd &lt;- source_data(link, header = TRUE, sep = \",\")\ndetach(package:repmis)\n\n\nNOTE: The {boxr} package also provides lots of functionality to interact with files on Box directly, but setup requires an authentication process that I have not yet been able to get working.\n\n\n\nImporting Data from Google Sheets\nFinally, you can also load data directly from a Google Sheets spreadsheet into R using the {googledrive} and {googlesheets4} packages. Try saving one of the “CPDS-1960-2014-reduced” file as a Google Sheet and then extracting it into R using the code below.\n\nNOTE: The following code block cannot be rendered to show you the output because it requires an interactive R environment for several functions (e.g., drive_auth()).\n\n\nlibrary(googledrive)\nlibrary(googlesheets4)\ndrive_auth()  # authenticate access to Google Drive\n# usually only needed once opens a web browser and has you sign in\ngs4_auth(token = drive_token())  # apply that authentication to Google Sheets\nf &lt;- gs4_find() %&gt;%\n    filter(name == \"CPDS-1960-2014-reduced\")\n# first find all Google Sheets in your drive and then filter for one of\n# interest\ngs4_get(f)\n# get info on the Google Sheets file selected, including the number and names\n# of the different worksheets within the spreadsheet\nd &lt;- read_sheet(f)  # read data from the first sheet in the spreadsheet\ndetach(package:googlesheets4)\ndetach(package:googledrive)\n\nFollow the links below for more information on the basics of using {googledrive} and {googlesheets4}.\n\n\nDownloading Remote Files\n\nDropbox\nThe {rdrop2} package, if you are able to install it, can also be used to download a file from a personal Dropbox account to your local computer, rather than just connecting to a Dropbox file to read the data stored there. This should work with any file type.\n\nNOTE: Again, the following code block cannot be rendered to show you the output because it requires an interactive R environment for drop_search(), etc.\n\n\nlibrary(rdrop2)\nf &lt;- \"CPDS-1960-2014-reduced.csv\"  # name of file to download\nf &lt;- drop_search(query = f, mode = \"filename\")\n# searches your dropbox directory for that file or directory name\nfilenames &lt;- vector()\nfor (i in 1:length(f$matches)) {\n    filenames &lt;- c(filenames, f$matches[[i]]$metadata$path_display)\n    # this is the location of the results returned above the [[i]] returns each\n    # encountered file with a matching filename and puts them into a vector\n}\n\ndrop_download(filenames[1], local_path = paste0(\"data\", filenames), overwrite = TRUE,\n    progress = TRUE)\n# here the [1] reads only the first encountered file... this can be modified\n# this to read more than one file\n\n# this function will save the file to a folder called 'data' inside the current\n# working directory\n\nThe progress=TRUE argument gives you a reassuring progress bar. By default, this argument is set to FALSE.\n\nNOTE: This process also works for other file types, e.g., Excel files:\n\n\nfilename &lt;- \"CPDS-1960-2014-reduced.xlsx\"  # name of file to download\nf &lt;- drop_search(filename)\n# searches your dropbox directory for that file or directory name\nfilenames &lt;- vector()\nfor (i in 1:length(f$matches)) {\n    filenames &lt;- c(filenames, f$matches[[i]]$metadata$path_display)\n    # this is the location of the results returned above the [[i]] returns each\n    # encountered file with a matching filename and puts them into a vector\n}\ndrop_download(filenames[1], local_path = paste0(\"data\", filenames), overwrite = TRUE,\n    progress = TRUE)\n# here the [1] reads only the first file...  need to modify this to read more\n# than one file\n\n# this will save the file to a folder called 'data' inside the current working\n# directory\ndetach(package:rdrop2)\n\n\n\nGoogle Drive\nThe {googledrive} package allows you to interact with a Google Drive account to search for, download, upload, and manipulate files.\n\nlibrary(googledrive)\nf &lt;- \"CPDS-1960-2014-reduced.xlsx\"  # name of the file to download\ndrive_auth()  # authenticate access to Google Drive\n\n# to download the file...\ndrive_download(f, path = paste0(\"data/\", f), overwrite = TRUE)\n\n# this will save the file to a folder called 'data' inside the current working\n# directory\n\n# to search for a file and get info about it\nfiles &lt;- drive_find(pattern = f, n_max = 1)\n# this example finds a single file, but this might return a tibble\n\nprint(files)  # prints a list of files matching the pattern\n\nfiles$drive_resource  # shows metadata about file\n\nid &lt;- files$id  # get the Google file id for the file\nid\n\n# to remove a file\ndrive_rm(files)\n\n# to upload a file...\ndrive_upload(paste0(\"data/\", f), name = \"CPDS-1960-2014-reduced.csv\", overwrite = TRUE)\ndetach(package:googledrive)\n\nMore on the basics of using {googledrive} and its functionality can be found here.\n\n# | include: false\ndetach(package:tidyverse)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Getting Data into ***R***</span>"
    ]
  },
  {
    "objectID": "08-module.html#concept-review",
    "href": "08-module.html#concept-review",
    "title": "8  Getting Data into R",
    "section": "Concept Review",
    "text": "Concept Review\n\nThere are lots and lots of ways to get data into R from a variety of sources!\nThe file.choose() command will allow you to browse the directory structure on your local machine\nThe {readr} and {readxl} packages contain probably the most useful functions for reading in most types of delimited data (“.csv”, “.txt”, “.tsv”, “.xlsx”)\nWe can read in or download data from remote sites on the web with {curl} or specific packages designed to work with particular hosting sites (e.g., GitHub, Dropbox, Box, Google Sheets, Google Drive)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Getting Data into ***R***</span>"
    ]
  },
  {
    "objectID": "09-module.html",
    "href": "09-module.html",
    "title": "9  Exploratory Data Analysis",
    "section": "",
    "text": "9.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#objectives",
    "href": "09-module.html#objectives",
    "title": "9  Exploratory Data Analysis",
    "section": "",
    "text": "The objective of this module to begin exploring data using the summary functions and graphing abilities of R.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#preliminaries",
    "href": "09-module.html#preliminaries",
    "title": "9  Exploratory Data Analysis",
    "section": "9.2 Preliminaries",
    "text": "9.2 Preliminaries\n\nGO TO: https://github.com/difiore/ada-datasets, select the “.csv” version of the “Country-Data-2016” file, then press the “RAW” button, highlight, and copy the text to a text editor and save it locally. Do the same for the “KamilarAndCooperData” file.\nInstall these packages in R: {skimr}, {summarytools}, {dataMaid}, {psych}, {pastecs}, {Hmisc}, {ggExtra}, {car}, {GGally}, {corrplot}, {patchwork}, {cowplot}, and {gridExtra}\nLoad {curl} and {tidyverse}",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#backstory",
    "href": "09-module.html#backstory",
    "title": "9  Exploratory Data Analysis",
    "section": "9.3 Backstory",
    "text": "9.3 Backstory\nExploratory data analysis (EDA) is typically the first step in any kind of data analysis in which you examine your dataset, often using visual methods, to summarize the main characteristics of your variables (central tendency, distributions) and check for various issues that may complicate further analysis (e.g., missing data). The influential statistician, John Tukey, wrote a classic book on the subject, Exploratory Data Analysis (Addison-Wesley) in 1977, in which he advocated the use of the five-number summary to quickly understand the distributions of numeric variables. These include:\n\nthe sample minimum (i.e., the value of the smallest observation)\nthe lower or first quartile\nthe median (i.e., the middle value in the distribution of observation)\nthe upper quartile or third quartile\nthe sample maximum (i.e., the value of the largest observation)\n\nR has some very easy to use functions for taking a quick tour of your data. We have seen some of these already (e.g., head(), tail(), and str()), and you should always use these right after loading in a dataset to work with. Also useful are dim() to return the number of rows and columns in a data frame, names(), colnames(), and sometimes rownames().\n\nNOTE: You can use the attach() function to make variables within data frames accessible in R with fewer keystrokes. The attach() function binds the variables from data frame named as an argument to the local namespace so that as long as the data frame is attached, variables can be called by their names without explicitly referring to the data frame. That is, if you attach() a data frame, then you do not need to use the $ operator or double bracket notation to refer to a particular variable or column vector from your data frame.\nIt is important to remember to detach() data frames when finished. It is also possible to attach multiple data frames (or the same data frame multiple times), and, if these share variable names, then the more recently attached one will mask the other. Thus, it is best to attach only one data frame at a time. You can also attach() and detach() packages from the namespace. In general, I do not recommend using attach() and detach() for dataframes.\n\nEXAMPLE:\n\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-datasets/main/Country-Data-2016.csv\"\nd &lt;- read_csv(f, col_names = TRUE)\nnames(d)\n\n##  [1] \"country\"        \"population\"     \"area\"           \"govt_form\"     \n##  [5] \"birthrate\"      \"deathrate\"      \"life_expect\"    \"mammals\"       \n##  [9] \"birds\"          \"reptiles\"       \"amphibians\"     \"fishes\"        \n## [13] \"mollucs\"        \"other_inverts\"  \"plants\"         \"fungi_protists\"\n\nattach(d)\nmean(life_expect, na.rm = TRUE)\n\n## [1] 72.19083\n\ndetach(d)\n# mean(life_expect, na.rm=TRUE) # this throws an error!\nmean(d$life_expect, na.rm = TRUE)\n\n## [1] 72.19083\n\n\n\nNOTE: The with() function accomplishes much the same thing as attach() but is self-contained and cleaner, especially for use in functions. If you use with(), however, all code to be run should be included as an argument of the function.\n\nEXAMPLE:\n\nwith(d, mean(life_expect, na.rm = TRUE))\n\n## [1] 72.19083",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#tidy-data",
    "href": "09-module.html#tidy-data",
    "title": "9  Exploratory Data Analysis",
    "section": "9.4 “Tidy” Data",
    "text": "9.4 “Tidy” Data\nThe tabular data we have worked with thus far has all been presented in a format where each row represents a single case or observation or record, and each column contains a different variable that is scored for each of these observations. Data in this format is referred to as “tidy”, and the {tidyverse} set of R packages (which we have used a bit already) provides many tools for manipulating tabular data in this format.\n\n\n\n\n\n\n\n\n\nHaving data in a “tidy” format is useful for many kinds of analyses (although “tidy” data is not the ONLY useful data format). Often, then, the first manipulations we need to do with data in order to work with it efficiently are to reformat it to make it “tidy”.\nThere are multiple ways that data can be “non-tidy”, but one common one way is because data is organized in such a way to make data entry in a spreadsheet easier. For example, consider the following table of data representing body weight in grams for three individual titi monkeys, a species of South American primate, collected in each of two years:\n\n\n\nIndividual\nYear_1\nYear_2\n\n\n\n\nLily\n580\n600\n\n\nLeia\n550\n575\n\n\nLoki\n600\n620\n\n\n\nThis data is easy to ENTER, but it is non-tidy… Why? Because the latter two columns actually represent a combinations of two variables (“Year” and “Weight”) that pertain to a given individual. Each row thus represents two observations.\nBelow is the same data in tidy format, where each row represents a single observation:\n\n\n\nIndividual\nYear\nWeight\n\n\n\n\nLily\nYear_1\n580\n\n\nLily\nYear_2\n600\n\n\nLeia\nYear_1\n550\n\n\nLeia\nYear_2\n575\n\n\nLoki\nYear_1\n600\n\n\nLoki\nYear_2\n620\n\n\n\nWe can convert data from the former format to the latter using the function pivot_longer(), where the first argument is the tabular data of interest, the next argument is a vector of columns to collect data from, the names_to= argument is the name we will assign to a new variable that indicates from which column values are being collected from in the non-tidy dataset, and the final argument, values_to=, is the name for the new variable into which we are collecting values. This process has the effect, often, of making “wide” tables narrower and longer, thus is sometime referred to as converting data to “long” format, thus the name for the function, pivot_longer(). Note that this function is essentially an update of an older {tidyr} function, gather(), which had a less intuitive name and set of argument names.\n\nd &lt;- data.frame(Individual = c(\"Lily\", \"Leia\", \"Loki\"), Year_1 = c(580, 550, 600),\n    Year_2 = c(600, 575, 620))\nd\n\n##   Individual Year_1 Year_2\n## 1       Lily    580    600\n## 2       Leia    550    575\n## 3       Loki    600    620\n\nd &lt;- pivot_longer(d, c(\"Year_1\", \"Year_2\"), names_to = \"Year\", values_to = \"Weight\")\nd\n\n## # A tibble: 6 × 3\n##   Individual Year   Weight\n##   &lt;chr&gt;      &lt;chr&gt;   &lt;dbl&gt;\n## 1 Lily       Year_1    580\n## 2 Lily       Year_2    600\n## 3 Leia       Year_1    550\n## 4 Leia       Year_2    575\n## 5 Loki       Year_1    600\n## 6 Loki       Year_2    620\n\n\nAlternatively, sometimes we will have data that is non-tidy because variables for the same observation are presented in different rows. Consider the following example of “non-tidy” data:\n\n\n\nSpecies\nVariable\nValue\n\n\n\n\nOrangutans\nBody Size (kg)\n37\n\n\nOrangutans\nBrain Size (cc)\n340\n\n\nChimpanzees\nBody Size (kg)\n38\n\n\nChimpanzees\nBrain Size (cc)\n350\n\n\nGorillas\nBody Size (kg)\n80\n\n\nGorillas\nBrain Size (cc)\n470\n\n\n\nThe same data could be represented in “tidy” format as:\n\n\n\nSpecies\nBody Size (kg)\nBrain Size (cc)\n\n\n\n\nOrangutans\n37\n340\n\n\nChimpanzees\n38\n350\n\n\nGorillas\n80\n470\n\n\n\nThe pivot_wider() function lets us easily reformat. Here, names_from= is the column containing the different variables, and values_from= is the column containing the measured values of those variables. Note that this function is essentially an update of an older {tidyr} function, spread().\n\nd &lt;- data.frame(Species = c(\"Orangutans\", \"Orangutans\", \"Chimpanzees\", \"Chimpanzees\",\n    \"Gorillas\", \"Gorillas\"), Variable = rep(c(\"Body Size (kg)\", \"Brain Size (cc)\"),\n    3), Value = c(37, 340, 38, 350, 80, 470))\nd\n\n##       Species        Variable Value\n## 1  Orangutans  Body Size (kg)    37\n## 2  Orangutans Brain Size (cc)   340\n## 3 Chimpanzees  Body Size (kg)    38\n## 4 Chimpanzees Brain Size (cc)   350\n## 5    Gorillas  Body Size (kg)    80\n## 6    Gorillas Brain Size (cc)   470\n\nd &lt;- pivot_wider(d, names_from = \"Variable\", values_from = \"Value\")\nd\n\n## # A tibble: 3 × 3\n##   Species     `Body Size (kg)` `Brain Size (cc)`\n##   &lt;chr&gt;                  &lt;dbl&gt;             &lt;dbl&gt;\n## 1 Orangutans                37               340\n## 2 Chimpanzees               38               350\n## 3 Gorillas                  80               470\n\n\nThis process has the effect, often, of making long and narrow tables wider, thus is sometime referred to as converting data to “wide” format.\nThe image below, pulled from a cheatsheet on Data Wrangling with {dplyr} and {tidyr}, summarizes the basics of these processes for “reshaping” data.\n\n\n\n\n\n\n\n\n\nFor the remainder of this module, all of the example datasets will comprise data already in the “tidy” format.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#exploring-single-variables",
    "href": "09-module.html#exploring-single-variables",
    "title": "9  Exploratory Data Analysis",
    "section": "9.5 Exploring Single Variables",
    "text": "9.5 Exploring Single Variables\n\nVariable Summaries\nThe summary() function from {base} R provides a quick overview of each variable in a data frame. For numeric variables, this includes the five-number summary and the mean, as well as a count of NA (missing values). For factors, it includes a count of each factor.\n\n\nCHALLENGE\n\nLoad the “Country-Data-2016” dataset into a data frame variable, d, and summarize the variables in that data frame. You can load the file any way you want, e.g., load from a local file or access the data straight from GitHub, as in the code below.\n\n\n# using {base} R\nf &lt;- curl(\"https://raw.githubusercontent.com/difiore/ada-datasets/main/Country-Data-2016.csv\")\nd &lt;- read.csv(f, header = TRUE, sep = \",\", stringsAsFactors = FALSE)\nd &lt;- as_tibble(d)  # I like tibbles!\nhead(d)\n\n## # A tibble: 6 × 16\n##   country    population   area govt_form birthrate deathrate life_expect mammals\n##   &lt;chr&gt;           &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;   &lt;int&gt;\n## 1 Afghanist…   32564342 6.52e5 islamic …      38.6      13.9        50.9      11\n## 2 Albania       3029278 2.87e4 republic       12.9       6.6        78.1       3\n## 3 Algeria      39542166 2.38e6 republic       23.7       4.3        76.6      14\n## 4 American …      54343 1.99e2 territor…      22.9       4.8        75.1       1\n## 5 Andorra         85580 4.68e2 constitu…       8.1       7          82.7       2\n## 6 Angola       19625353 1.25e6 republic       38.8      11.5        55.6      17\n## # ℹ 8 more variables: birds &lt;int&gt;, reptiles &lt;int&gt;, amphibians &lt;int&gt;,\n## #   fishes &lt;int&gt;, mollucs &lt;int&gt;, other_inverts &lt;int&gt;, plants &lt;int&gt;,\n## #   fungi_protists &lt;int&gt;\n\nnames(d)\n\n##  [1] \"country\"        \"population\"     \"area\"           \"govt_form\"     \n##  [5] \"birthrate\"      \"deathrate\"      \"life_expect\"    \"mammals\"       \n##  [9] \"birds\"          \"reptiles\"       \"amphibians\"     \"fishes\"        \n## [13] \"mollucs\"        \"other_inverts\"  \"plants\"         \"fungi_protists\"\n\n# or, using {readr}\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-datasets/main/Country-Data-2016.csv\"\nd &lt;- read_csv(f, col_names = TRUE)\n\n## Rows: 248 Columns: 16\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): country, govt_form\n## dbl (14): population, area, birthrate, deathrate, life_expect, mammals, bird...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(d)\n\n## # A tibble: 6 × 16\n##   country    population   area govt_form birthrate deathrate life_expect mammals\n##   &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;\n## 1 Afghanist…   32564342 6.52e5 islamic …      38.6      13.9        50.9      11\n## 2 Albania       3029278 2.87e4 republic       12.9       6.6        78.1       3\n## 3 Algeria      39542166 2.38e6 republic       23.7       4.3        76.6      14\n## 4 American …      54343 1.99e2 territor…      22.9       4.8        75.1       1\n## 5 Andorra         85580 4.68e2 constitu…       8.1       7          82.7       2\n## 6 Angola       19625353 1.25e6 republic       38.8      11.5        55.6      17\n## # ℹ 8 more variables: birds &lt;dbl&gt;, reptiles &lt;dbl&gt;, amphibians &lt;dbl&gt;,\n## #   fishes &lt;dbl&gt;, mollucs &lt;dbl&gt;, other_inverts &lt;dbl&gt;, plants &lt;dbl&gt;,\n## #   fungi_protists &lt;dbl&gt;\n\nnames(d)\n\n##  [1] \"country\"        \"population\"     \"area\"           \"govt_form\"     \n##  [5] \"birthrate\"      \"deathrate\"      \"life_expect\"    \"mammals\"       \n##  [9] \"birds\"          \"reptiles\"       \"amphibians\"     \"fishes\"        \n## [13] \"mollucs\"        \"other_inverts\"  \"plants\"         \"fungi_protists\"\n\n\n\nWhat are the median area and population size of all countries in the dataset?\n\n\nHINT: There are a couple of ways to do this… try summary() and median() (for the latter, you’ll need to use the na.rm=TRUE argument).\n\n\n\nShow Code\nsummary(d)\n\n\nShow Output\n##    country            population             area           govt_form        \n##  Length:248         Min.   :3.000e+01   Min.   :       0   Length:248        \n##  Class :character   1st Qu.:2.991e+05   1st Qu.:    1769   Class :character  \n##  Mode  :character   Median :4.912e+06   Median :   69700   Mode  :character  \n##                     Mean   :2.999e+07   Mean   :  610952                     \n##                     3rd Qu.:1.803e+07   3rd Qu.:  398754                     \n##                     Max.   :1.367e+09   Max.   :17098242                     \n##                     NA's   :6           NA's   :1                            \n##    birthrate       deathrate      life_expect       mammals      \n##  Min.   : 0.00   Min.   : 0.00   Min.   :49.80   Min.   :  0.00  \n##  1st Qu.:11.40   1st Qu.: 5.65   1st Qu.:67.40   1st Qu.:  3.00  \n##  Median :16.40   Median : 7.40   Median :74.70   Median :  8.00  \n##  Mean   :18.95   Mean   : 7.61   Mean   :72.19   Mean   : 13.85  \n##  3rd Qu.:24.35   3rd Qu.: 9.40   3rd Qu.:78.40   3rd Qu.: 15.00  \n##  Max.   :45.50   Max.   :14.90   Max.   :89.50   Max.   :188.00  \n##  NA's   :17      NA's   :17      NA's   :19      NA's   :3       \n##      birds           reptiles         amphibians          fishes      \n##  Min.   :  0.00   Min.   :  0.000   Min.   :  0.000   Min.   :  0.00  \n##  1st Qu.:  6.00   1st Qu.:  2.000   1st Qu.:  0.000   1st Qu.: 11.00  \n##  Median : 12.00   Median :  5.000   Median :  0.000   Median : 25.00  \n##  Mean   : 17.82   Mean   :  8.331   Mean   :  9.849   Mean   : 32.84  \n##  3rd Qu.: 19.00   3rd Qu.:  8.000   3rd Qu.:  4.000   3rd Qu.: 43.00  \n##  Max.   :165.00   Max.   :139.000   Max.   :215.000   Max.   :249.00  \n##  NA's   :3        NA's   :3         NA's   :3         NA's   :3       \n##     mollucs       other_inverts        plants        fungi_protists   \n##  Min.   :  0.00   Min.   :  0.00   Min.   :   0.00   Min.   : 0.0000  \n##  1st Qu.:  0.00   1st Qu.:  3.00   1st Qu.:   2.00   1st Qu.: 0.0000  \n##  Median :  1.00   Median : 11.00   Median :  10.00   Median : 0.0000  \n##  Mean   :  9.62   Mean   : 32.57   Mean   :  60.78   Mean   : 0.6082  \n##  3rd Qu.:  6.00   3rd Qu.: 33.00   3rd Qu.:  44.00   3rd Qu.: 0.0000  \n##  Max.   :301.00   Max.   :340.00   Max.   :1856.00   Max.   :12.0000  \n##  NA's   :3        NA's   :3        NA's   :3         NA's   :3\n\n\n\nShow Code\nmedian(d$area, na.rm = TRUE)\n\n\nShow Output\n## [1] 69700\n\n\n\nShow Code\nmedian(d$population, na.rm = TRUE)\n\n\nShow Output\n## [1] 4911766\n\n\n\n\nCreate a new density variable in your data frame which is population / area. What are the 10 most dense countries? The 10 least dense?\n\n\nHINT: Check out the order() function.\n\n\n\nShow Code\nd$density &lt;- d$population/d$area\nd &lt;- d[order(d$density, decreasing = TRUE), ]  # or\nd &lt;- d[order(-d$density), ]\nd[1:10, ]\n\n\nShow Output\n## # A tibble: 10 × 17\n##    country   population   area govt_form birthrate deathrate life_expect mammals\n##    &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;\n##  1 Macau         592731   28   special …       8.9       4.2        84.5       0\n##  2 Monaco         30535    2   constitu…       6.7       9.2        89.5       3\n##  3 Holy See…        842    0.1 monarchy       NA        NA          NA         1\n##  4 Singapore    5674472  697   republic        8.3       3.4        84.7      13\n##  5 Hong Kong    7141106 1108   special …       9.2       7.1        82.9       3\n##  6 Gibraltar      29258    7   British …      14.1       8.4        79.3       4\n##  7 Bahrain      1346613  760   constitu…      13.7       2.7        78.7       3\n##  8 Maldives      393253  298   republic       15.8       3.9        75.4       2\n##  9 Malta         413965  316   republic       10.2       9.1        80.2       2\n## 10 Bermuda        70196   54   British …      11.3       8.2        81.2       4\n## # ℹ 9 more variables: birds &lt;dbl&gt;, reptiles &lt;dbl&gt;, amphibians &lt;dbl&gt;,\n## #   fishes &lt;dbl&gt;, mollucs &lt;dbl&gt;, other_inverts &lt;dbl&gt;, plants &lt;dbl&gt;,\n## #   fungi_protists &lt;dbl&gt;, density &lt;dbl&gt;\n\n\n\nShow Code\nd &lt;- d[order(d$density), ]\nd[1:10, ]\n\n\nShow Output\n## # A tibble: 10 × 17\n##    country   population   area govt_form birthrate deathrate life_expect mammals\n##    &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;\n##  1 South Ge…         30 3.90e3 British …      NA        NA          NA         3\n##  2 Greenland      57733 2.17e6 autonomo…      14.5       8.5        72.1       9\n##  3 Falkland…       3361 1.22e4 British …      NA        NA          NA         4\n##  4 Pitcairn…         48 4.7 e1 British …      NA        NA          NA         1\n##  5 Mongolia     2992908 1.56e6 republic       20.3       6.4        69.3      11\n##  6 Western …     570866 2.66e5 autonomo…      30.2       8.3        62.6      10\n##  7 French G…     181000 8.35e4 overseas…       0         0          76.1       8\n##  8 Namibia      2212307 8.24e5 republic       19.8      13.9        51.6      14\n##  9 Australia   22751014 7.74e6 parliame…      12.2       7.1        82.2      63\n## 10 Iceland       331918 1.03e5 republic       13.9       6.3        83         6\n## # ℹ 9 more variables: birds &lt;dbl&gt;, reptiles &lt;dbl&gt;, amphibians &lt;dbl&gt;,\n## #   fishes &lt;dbl&gt;, mollucs &lt;dbl&gt;, other_inverts &lt;dbl&gt;, plants &lt;dbl&gt;,\n## #   fungi_protists &lt;dbl&gt;, density &lt;dbl&gt;\n\n\n\n\nUse subsetting or filtering to extract data from the 20 largest countries into a new variable, s. What are the median area and population size of these countries?\n\n\n\nShow Code\ns &lt;- d[order(-d$population), ]\ns &lt;- s[1:20, ]\nmed_area &lt;- median(s$area, na.rm = TRUE)\nmed_area\n\n\nShow Output\n## [1] 1052875\n\n\n\nShow Code\nmed_pop &lt;- median(s$population, na.rm = TRUE)\nmed_pop\n\n\nShow Output\n## [1] 124328234\n\n\n\n\nExtract data from all countries beginning with the letters “A” through “F”. What are the mean area and population size of these countries?\n\n\nNOTE: Single bracket notation subsetting is used here to return the rows of the d data frame where the country name (d$country) begins with the capital letters “A” through “F”. The grep() function is a pattern recognition function that uses a regular expression to pull out the country names of interest.\n\n\n\nShow Code\ns &lt;- d[grep(pattern = \"^[A-F]\", d$country), ]\nsummary(s)\n\n\nShow Output\n##    country            population             area           govt_form        \n##  Length:78          Min.   :5.960e+02   Min.   :      14   Length:78         \n##  Class :character   1st Qu.:2.991e+05   1st Qu.:    4066   Class :character  \n##  Mode  :character   Median :4.785e+06   Median :   51148   Mode  :character  \n##                     Mean   :3.507e+07   Mean   :  918248                     \n##                     3rd Qu.:1.469e+07   3rd Qu.:  466498                     \n##                     Max.   :1.367e+09   Max.   :14000000                     \n##                     NA's   :4                                                \n##    birthrate       deathrate       life_expect       mammals    \n##  Min.   : 0.00   Min.   : 0.000   Min.   :49.80   Min.   : 0.0  \n##  1st Qu.:11.65   1st Qu.: 5.850   1st Qu.:68.75   1st Qu.: 3.0  \n##  Median :15.90   Median : 7.700   Median :75.50   Median : 7.0  \n##  Mean   :18.77   Mean   : 7.861   Mean   :72.25   Mean   :13.4  \n##  3rd Qu.:23.30   3rd Qu.: 9.500   3rd Qu.:78.40   3rd Qu.:14.0  \n##  Max.   :42.00   Max.   :14.400   Max.   :82.70   Max.   :81.0  \n##  NA's   :7       NA's   :7        NA's   :7                     \n##      birds           reptiles        amphibians         fishes      \n##  Min.   :  0.00   Min.   : 0.000   Min.   :  0.00   Min.   :  0.00  \n##  1st Qu.:  6.00   1st Qu.: 2.000   1st Qu.:  0.00   1st Qu.: 10.00  \n##  Median : 11.00   Median : 5.000   Median :  0.00   Median : 24.50  \n##  Mean   : 18.62   Mean   : 7.397   Mean   : 11.86   Mean   : 29.54  \n##  3rd Qu.: 18.00   3rd Qu.: 8.000   3rd Qu.:  3.00   3rd Qu.: 41.50  \n##  Max.   :165.00   Max.   :43.000   Max.   :215.00   Max.   :133.00  \n##                                                                     \n##     mollucs       other_inverts        plants        fungi_protists  \n##  Min.   :  0.00   Min.   :  0.00   Min.   :   0.00   Min.   :0.0000  \n##  1st Qu.:  0.00   1st Qu.:  4.00   1st Qu.:   2.25   1st Qu.:0.0000  \n##  Median :  1.00   Median : 11.00   Median :  10.00   Median :0.0000  \n##  Mean   : 10.17   Mean   : 23.63   Mean   :  70.64   Mean   :0.6026  \n##  3rd Qu.:  5.00   3rd Qu.: 25.25   3rd Qu.:  41.75   3rd Qu.:0.0000  \n##  Max.   :174.00   Max.   :340.00   Max.   :1856.00   Max.   :8.0000  \n##                                                                      \n##     density         \n##  Min.   :   0.2761  \n##  1st Qu.:  24.5932  \n##  Median :  75.0297  \n##  Mean   : 162.4785  \n##  3rd Qu.: 140.7140  \n##  Max.   :1771.8592  \n##  NA's   :4\n\n\n\nDoing the same thing with {dplyr} verbs (see Module 10) is easier…\n\n\nShow Code\ns &lt;- filter(d, grepl(pattern = \"^[A-F]\", country))\nsummary(s)\n\n\nShow Output\n##    country            population             area           govt_form        \n##  Length:78          Min.   :5.960e+02   Min.   :      14   Length:78         \n##  Class :character   1st Qu.:2.991e+05   1st Qu.:    4066   Class :character  \n##  Mode  :character   Median :4.785e+06   Median :   51148   Mode  :character  \n##                     Mean   :3.507e+07   Mean   :  918248                     \n##                     3rd Qu.:1.469e+07   3rd Qu.:  466498                     \n##                     Max.   :1.367e+09   Max.   :14000000                     \n##                     NA's   :4                                                \n##    birthrate       deathrate       life_expect       mammals    \n##  Min.   : 0.00   Min.   : 0.000   Min.   :49.80   Min.   : 0.0  \n##  1st Qu.:11.65   1st Qu.: 5.850   1st Qu.:68.75   1st Qu.: 3.0  \n##  Median :15.90   Median : 7.700   Median :75.50   Median : 7.0  \n##  Mean   :18.77   Mean   : 7.861   Mean   :72.25   Mean   :13.4  \n##  3rd Qu.:23.30   3rd Qu.: 9.500   3rd Qu.:78.40   3rd Qu.:14.0  \n##  Max.   :42.00   Max.   :14.400   Max.   :82.70   Max.   :81.0  \n##  NA's   :7       NA's   :7        NA's   :7                     \n##      birds           reptiles        amphibians         fishes      \n##  Min.   :  0.00   Min.   : 0.000   Min.   :  0.00   Min.   :  0.00  \n##  1st Qu.:  6.00   1st Qu.: 2.000   1st Qu.:  0.00   1st Qu.: 10.00  \n##  Median : 11.00   Median : 5.000   Median :  0.00   Median : 24.50  \n##  Mean   : 18.62   Mean   : 7.397   Mean   : 11.86   Mean   : 29.54  \n##  3rd Qu.: 18.00   3rd Qu.: 8.000   3rd Qu.:  3.00   3rd Qu.: 41.50  \n##  Max.   :165.00   Max.   :43.000   Max.   :215.00   Max.   :133.00  \n##                                                                     \n##     mollucs       other_inverts        plants        fungi_protists  \n##  Min.   :  0.00   Min.   :  0.00   Min.   :   0.00   Min.   :0.0000  \n##  1st Qu.:  0.00   1st Qu.:  4.00   1st Qu.:   2.25   1st Qu.:0.0000  \n##  Median :  1.00   Median : 11.00   Median :  10.00   Median :0.0000  \n##  Mean   : 10.17   Mean   : 23.63   Mean   :  70.64   Mean   :0.6026  \n##  3rd Qu.:  5.00   3rd Qu.: 25.25   3rd Qu.:  41.75   3rd Qu.:0.0000  \n##  Max.   :174.00   Max.   :340.00   Max.   :1856.00   Max.   :8.0000  \n##                                                                      \n##     density         \n##  Min.   :   0.2761  \n##  1st Qu.:  24.5932  \n##  Median :  75.0297  \n##  Mean   : 162.4785  \n##  3rd Qu.: 140.7140  \n##  Max.   :1771.8592  \n##  NA's   :4\n\n\n\n\nNOTE: Here, we use grepl() instead of grep() because we want to return a logical vector for all of the elements of “country” to filter() on the basis of. grep() returns a vector of index positions.\n\nOr, instead of summary(), we can use mean() with the na.rm=TRUE argument…\n\n\nShow Code\nmean(s$population, na.rm = TRUE)\n\n\nShow Output\n## [1] 35065172\n\n\n\nShow Code\nmean(s$area, na.rm = TRUE)\n\n\nShow Output\n## [1] 918247.7\n\n\n\nThere are a number of other packages and associated functions we might also use to generate nice summaries of our data.\nFor example, with the skim() function from {skimr}, you can get for numeric variables a count of observations, the number of missing observations, the mean and standard deviation, and the five-number summary. The select(), kable() and kable_styling() functions will format the output nicely!\n\nlibrary(skimr)\nlibrary(kableExtra)\n\n\ns &lt;- skim(d)  # the main `skimr()` function\ns %&gt;%\n    filter(skim_type == \"numeric\") %&gt;%\n    rename(variable = skim_variable, missing = n_missing, mean = numeric.mean, sd = numeric.sd,\n        min = numeric.p0, p25 = numeric.p25, median = numeric.p50, p75 = numeric.p75,\n        max = numeric.p100, hist = numeric.hist) %&gt;%\n    select(variable, missing, mean, sd, min, median, max, hist) %&gt;%\n    # drop p25 and p75 for purposes of display\nkable() %&gt;%\n    kable_styling(font_size = 10, full_width = FALSE)\n\n\n\n\nvariable\nmissing\nmean\nsd\nmin\nmedian\nmax\nhist\n\n\n\n\npopulation\n6\n2.998647e+07\n1.241345e+08\n30.0000000\n4.911766e+06\n1.367485e+09\n▇▁▁▁▁\n\n\narea\n1\n6.109518e+05\n1.927077e+06\n0.1000000\n6.970000e+04\n1.709824e+07\n▇▁▁▁▁\n\n\nbirthrate\n17\n1.894892e+01\n9.925912e+00\n0.0000000\n1.640000e+01\n4.550000e+01\n▂▇▅▂▁\n\n\ndeathrate\n17\n7.610390e+00\n3.135197e+00\n0.0000000\n7.400000e+00\n1.490000e+01\n▁▅▇▃▂\n\n\nlife_expect\n19\n7.219083e+01\n8.587024e+00\n49.8000000\n7.470000e+01\n8.950000e+01\n▂▂▃▇▂\n\n\nmammals\n3\n1.385306e+01\n2.058178e+01\n0.0000000\n8.000000e+00\n1.880000e+02\n▇▁▁▁▁\n\n\nbirds\n3\n1.781633e+01\n2.213342e+01\n0.0000000\n1.200000e+01\n1.650000e+02\n▇▁▁▁▁\n\n\nreptiles\n3\n8.330612e+00\n1.408903e+01\n0.0000000\n5.000000e+00\n1.390000e+02\n▇▁▁▁▁\n\n\namphibians\n3\n9.848980e+00\n2.869408e+01\n0.0000000\n0.000000e+00\n2.150000e+02\n▇▁▁▁▁\n\n\nfishes\n3\n3.283673e+01\n3.552576e+01\n0.0000000\n2.500000e+01\n2.490000e+02\n▇▂▁▁▁\n\n\nmollucs\n3\n9.620408e+00\n2.734627e+01\n0.0000000\n1.000000e+00\n3.010000e+02\n▇▁▁▁▁\n\n\nother_inverts\n3\n3.256735e+01\n5.362966e+01\n0.0000000\n1.100000e+01\n3.400000e+02\n▇▁▁▁▁\n\n\nplants\n3\n6.077551e+01\n1.618624e+02\n0.0000000\n1.000000e+01\n1.856000e+03\n▇▁▁▁▁\n\n\nfungi_protists\n3\n6.081633e-01\n1.847000e+00\n0.0000000\n0.000000e+00\n1.200000e+01\n▇▁▁▁▁\n\n\ndensity\n6\n4.230267e+02\n1.882632e+03\n0.0076864\n8.389234e+01\n2.116896e+04\n▇▁▁▁▁\n\n\n\n\n\n\n\n\ndetach(package:kableExtra)\ndetach(package:skimr)\n\nWith descr(), dfSummary(), and view() from the {summarytools} package, you can also return nicely formatted tables of summary statistics. Note that the output of the code below is not shown.\n\nCAUTION: Q1 and Q3 (the equivalent of “numeric.p25” and “numeric.p75”) are calculated slightly differently for descr() and dfSummary() than for summary() and skim()!\n\n\nlibrary(summarytools)\ns &lt;- descr(d, style = \"rmarkdown\", transpose = TRUE)\n# %&gt;% to view() print nicely formatted table to viewer\ns %&gt;%\n    summarytools::view()\ns &lt;- dfSummary(d, style = \"grid\", plain.ascii = FALSE)\ns %&gt;%\n    summarytools::view()\ndetach(package:summarytools)\n\nWith makeDataReport() from the {dataMaid} package, you can generate a nicely formated report that gets written out to a location of your choice. Again, the output of this code is not shown as it generates a report in an external file.\n\nlibrary(dataMaid)\n# this code below produces a formated report, with the type of report specified\n# by `output=`\nmakeDataReport(d, output = \"html\", file = \"~/Desktop/dataMaid-output.Rmd\", replace = TRUE)\ndetach(package:dataMaid)\n\nAdditionally, the packages {psych}, {pastecs}, and {Hmisc} also all contain functions for producing variable summaries:\npsych::describe(d)\npastecs::stat.desc(d)\nHmisc::describe(d)\n\n\nBoxplots, Barplots, and Dotcharts\nThe boxplot() function from {base} R provides a box-and-whiskers visual representation of the five-number summary, sometimes noting outliers that go beyond the bulk of the data. The function balks if you pass it nonnumeric data, so you will want to reference columns of interest specifically using either double bracket notation or the $ operator.\n\nNOTE: Actually, it is technically not true that boxplot() always shows you the five-number summary. One of the default arguments for boxplot() includes range=1.5, which means that the “whiskers” of the boxplot extend to 1.5 times the interquartile range, and then values more extreme than that are indicated as single points. If range=0, then, the “whiskers” extend to the minimum and maximum values of the data.\n\nThe barplot() function is also useful taking a quick look at crude data, with bar height proportional to the value of the variable. The function dotchart() provides a similar graphical summary.\n\n\nCHALLENGE\n\nMake boxplots, barplots, and dotcharts of the raw population and area data, then log() transform the variables and repeat the boxplots.\n\n\nNOTE: The par() command in the code below lets you set up a grid of panels in which to plot. Here, we set up a 1 row x 2 column grid.\n\n\n\nShow Code\npar(mfrow = c(1, 2))\nd$log_population &lt;- log(d$population)\nd$log_area &lt;- log(d$area)\nboxplot(d$population, ylab = \"Population\")\nboxplot(d$area, ylab = \"Area\")\n\n\n\n\n\n\n\n\n\nShow Code\nbarplot(d$population, xlab = \"Case\", ylab = \"Population\")\ndotchart(d$population, xlab = \"Population\", ylab = \"Case\")\n\n\n\n\n\n\n\n\n\nShow Code\nbarplot(d$area, xlab = \"Case\", ylab = \"Area\")\ndotchart(d$area, xlab = \"Area\", ylab = \"Case\")\n\n\n\n\n\n\n\n\n\nShow Code\nboxplot(d$log_population, ylab = \"log(Population)\")\nboxplot(d$log_area, ylab = \"log(Area)\")\n\n\n\n\n\n\n\n\n\n\n\nPlotting with {ggplot2}\nAs an alternative for plotting, we can use the “grammar of graphics” {ggplot2} package:\n\n# first, we use `tidyr::pivot_longer()` to convert our data from wide to long\n# format this is so we can use `facet.grid()`\n\n# uncomment this to look at a different set of variables d_long &lt;-\n# pivot_longer(d, c('log_population','log_area'), names_to='Variable',\n# values_to='Value')\n\n# uncomment this to look at a different set of variables d_long &lt;-\n# pivot_longer(d, c('mammals','birds','reptiles','fishes'),\n# names_to='Variable', values_to='Value')\n\nd_long &lt;- pivot_longer(d, c(\"birthrate\", \"deathrate\", \"life_expect\"), names_to = \"Variable\",\n    values_to = \"Value\")\n\np &lt;- ggplot(data = d_long, aes(x = factor(0), y = Value)) + geom_boxplot(na.rm = TRUE,\n    outlier.shape = NA) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(),\n    axis.ticks.x = element_blank()) + geom_dotplot(binaxis = \"y\", stackdir = \"center\",\n    stackratio = 0.2, alpha = 0.3, dotsize = 0.5, color = NA, fill = \"red\", na.rm = TRUE) +\n    facet_grid(. ~ Variable) + geom_rug(sides = \"l\")\np\n\n\n\n\n\n\n\np &lt;- ggplot(data = d_long, aes(x = factor(0), y = Value)) + geom_violin(na.rm = TRUE,\n    draw_quantiles = c(0.25, 0.5, 0.75)) + theme(axis.title.x = element_blank(),\n    axis.text.x = element_blank(), axis.ticks.x = element_blank()) + geom_dotplot(binaxis = \"y\",\n    stackdir = \"center\", stackratio = 0.2, alpha = 0.3, dotsize = 0.5, color = NA,\n    fill = \"red\", na.rm = TRUE) + facet_grid(. ~ Variable) + geom_rug(sides = \"l\")\np\n\n\n\n\n\n\n\n\n\n\nHistograms\nThe hist() function returns a histogram showing the complete empirical distribution of the data in binned categories, which is useful for checking skewwness of the data, symmetry, multi-modality, etc. Setting the argument freq=FALSE will scale the Y axis to represent the proportion of observations falling into each bin rather than the count.\n\n\nCHALLENGE\n\nMake histograms of the log() transformed population and area data from the “Country-Data-2016” file. Explore what happens if you set freq=FALSE versus the default of freq=TRUE. Try looking at other variables as well.\n\n\n\nShow Code\npar(mfrow = c(1, 2))  # sets up two panels side by side\nattach(d)  # lets us use variable names without specifying the data frame!\nhist(log(population), freq = FALSE, col = \"red\", main = \"Plot 1\", xlab = \"log(population size)\",\n    ylab = \"density\", ylim = c(0, 0.2))\nhist(log(area), freq = FALSE, col = \"red\", main = \"Plot 2\", xlab = \"log(area)\", ylab = \"density\",\n    ylim = c(0, 0.2))\n\n\n\n\n\n\n\n\n\n\nNOTE: You can add lines to your histograms (e.g., to show the mean value for a variable) using the abline() command, with arguments. For example, to show a single vertical line representing the mean log(population size), you would add the argument v=mean(log(area), na.rm=TRUE). We need to set na.rm to be TRUE otherwise the mean() function will not run the way we expect.\n\n\n\nShow Code\nhist(log(area), freq = FALSE, col = \"red\", main = \"Plot 2\", xlab = \"log(area)\", ylab = \"density\",\n    ylim = c(0, 0.2))\nabline(v = mean(log(area), na.rm = TRUE))\n\n\n\n\n\n\n\n\n\n\n\nDensity Plots\nThe density() function computes a non-parametric estimate of the distribution of a variable, which can be combined with other plots to also yield a graphical view of the distribution of the data. If your data have missing values, then you need to add the argument na.rm=TRUE to the density() function. To superimpose a density() curve on a histogram, you can use the lines(density()) function.\n\npar(mfrow = c(1, 1))  # set up one panel and redraw the log(population) histogram\nhist(log(population), freq = FALSE, col = \"white\", main = \"Density Plot with Mean\",\n    xlab = \"log(population size)\", ylab = \"density\", ylim = c(0, 0.2))\nabline(v = mean(log(population), na.rm = TRUE), col = \"blue\")\nlines(density(log(population), na.rm = TRUE), col = \"green\")\n\n\n\n\n\n\n\ndetach(d)\n\n\n\nTables\nThe table() function can be used to summarize counts and proportions for categorical variables in your dataset.\n\n\nCHALLENGE\n\nUsing the table() function, find what is the most common form of government in the “Country-Data-2016” dataset. How many countries have that form?\n\n\nHINT: We can combine table() with sort() and the argument decreasing=TRUE to get the desired answered straight away.\n\n\n\nShow Code\nt &lt;- sort(table(d$govt_form), decreasing = TRUE)\nt\n\n\nShow Output\n## \n##                                republic                 constitutional monarchy \n##                                     127                                      33 \n##              British overseas territory            overseas territory of France \n##                                      12                                       7 \n##           presidential federal republic                                monarchy \n##                                       7                                       6 \n##                  parliamentary monarchy          territory of the United States \n##                                       5                                       5 \n##                 parliamentary democracy                  territory of Australia \n##                                       4                                       4 \n## autonomous territory of the Netherlands                        federal republic \n##                                       3                                       3 \n##                        islamic republic                      socialist republic \n##                                       3                                       3 \n##                       absolute monarchy            autonomous region of Denmark \n##                                       2                                       2 \n##     autonomous territory of New Zealand            overseas community of France \n##                                       2                                       2 \n##          parliamentary federal republic  special administrative region of China \n##                                       2                                       2 \n##                     territory of Norway                       autonomous region \n##                                       2                                       1 \n##             autonomous region of France            autonomous region of Morocco \n##                                       1                                       1 \n##                              federation         foreign-administrated territory \n##                                       1                                       1 \n##      islamic-socialist peoples republic                  parliamentary republic \n##                                       1                                       1 \n##                        peoples republic                     territory of France \n##                                       1                                       1 \n##                territory of New Zealand            territory of the Netherlands \n##                                       1                                       1\n\n\n\nDoing the same thing with {dplyr} verbs (see Module 10) provides nicer output…\n\nt &lt;- group_by(d, govt_form) %&gt;%\n    summarize(count = n()) %&gt;%\n    arrange(desc(count))\nt\n\n## # A tibble: 33 × 2\n##    govt_form                      count\n##    &lt;chr&gt;                          &lt;int&gt;\n##  1 republic                         127\n##  2 constitutional monarchy           33\n##  3 British overseas territory        12\n##  4 overseas territory of France       7\n##  5 presidential federal republic      7\n##  6 monarchy                           6\n##  7 parliamentary monarchy             5\n##  8 territory of the United States     5\n##  9 parliamentary democracy            4\n## 10 territory of Australia             4\n## # ℹ 23 more rows",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#exploring-multiple-variables",
    "href": "09-module.html#exploring-multiple-variables",
    "title": "9  Exploratory Data Analysis",
    "section": "9.6 Exploring Multiple Variables",
    "text": "9.6 Exploring Multiple Variables\n\nPlotting Several Variables\n\nMultiple boxplots or histograms can be laid out side-by-side or overlaid.\n\n\n\nCHALLENGE\nRead in the dataset “KamilarAndCooperData”, which contains a host of summary information about 213 primate species.\nSpend some time exploring the data on your own and then make boxplots of log(female body mass) ~ family. Try doing this with {base} graphics and then look at how we might do in in {ggplot2}, which provides a standard “grammar of graphics” (see the {ggplot2} documentation)\n\n\nShow Code\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-datasets/main/KamilarAndCooperData.csv\"\nd &lt;- read_csv(f, col_names = TRUE)\nhead(d)\n\n\nShow Output\n## # A tibble: 6 × 44\n##   Scientific_Name             Family        Genus Species Brain_Size_Species_M…¹\n##   &lt;chr&gt;                       &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                    &lt;dbl&gt;\n## 1 Allenopithecus_nigroviridis Cercopitheci… Alle… nigrov…                   58.0\n## 2 Allocebus_trichotis         Cercopitheci… Allo… tricho…                   NA  \n## 3 Alouatta_belzebul           Atelidae      Alou… belzeb…                   52.8\n## 4 Alouatta_caraya             Atelidae      Alou… caraya                    52.6\n## 5 Alouatta_guariba            Atelidae      Alou… guariba                   51.7\n## 6 Alouatta_palliata           Atelidae      Alou… pallia…                   49.9\n## # ℹ abbreviated name: ¹​Brain_Size_Species_Mean\n## # ℹ 39 more variables: Brain_Size_Female_Mean &lt;dbl&gt;, Brain_size_Ref &lt;chr&gt;,\n## #   Body_mass_male_mean &lt;dbl&gt;, Body_mass_female_mean &lt;dbl&gt;,\n## #   Mass_Dimorphism &lt;dbl&gt;, Mass_Ref &lt;chr&gt;, MeanGroupSize &lt;dbl&gt;,\n## #   AdultMales &lt;dbl&gt;, AdultFemale &lt;dbl&gt;, AdultSexRatio &lt;dbl&gt;,\n## #   Social_Organization_Ref &lt;chr&gt;, InterbirthInterval_d &lt;dbl&gt;, Gestation &lt;dbl&gt;,\n## #   WeaningAge_d &lt;dbl&gt;, MaxLongevity_m &lt;dbl&gt;, LitterSz &lt;dbl&gt;, …\n\n\n\n\nlibrary(skimr)\nlibrary(kableExtra)\n\n\n\nShow Code\ns &lt;- skim(d)  # formats results to a wide table\n# here we make use of the `%&gt;%` operator and {dplyr} verbs... see below\ns %&gt;%\n    filter(skim_variable == \"Scientific_Name\" | skim_type == \"numeric\") %&gt;%\n    rename(variable = skim_variable, missing = n_missing, mean = numeric.mean, sd = numeric.sd,\n        min = numeric.p0, p25 = numeric.p25, median = numeric.p50, p75 = numeric.p75,\n        max = numeric.p100, hist = numeric.hist) %&gt;%\n    select(variable, missing, mean, sd, min, median, max, hist) %&gt;%\n    # drop p25 and p75 for purposes of display\nkable() %&gt;%\n    kable_styling(font_size = 10, full_width = FALSE)\n\n\n\n\n\nvariable\nmissing\nmean\nsd\nmin\nmedian\nmax\nhist\n\n\n\n\nScientific_Name\n0\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nBrain_Size_Species_Mean\n42\n68.109649\n7.768403e+01\n1.630\n61.45000\n491.2700\n▇▂▁▁▁\n\n\nBrain_Size_Female_Mean\n48\n65.235879\n7.371151e+01\n1.660\n57.20000\n480.1500\n▇▂▁▁▁\n\n\nBody_mass_male_mean\n18\n8111.800513\n1.920858e+04\n31.000\n4290.00000\n170400.0000\n▇▁▁▁▁\n\n\nBody_mass_female_mean\n18\n5396.473846\n1.008896e+04\n30.000\n3039.00000\n97500.0000\n▇▁▁▁▁\n\n\nMass_Dimorphism\n18\n1.246005\n3.212141e-01\n0.841\n1.10900\n2.6880\n▇▃▂▁▁\n\n\nMeanGroupSize\n60\n15.055065\n1.759245e+01\n1.000\n7.80000\n90.0000\n▇▂▁▁▁\n\n\nAdultMales\n68\n2.515621\n2.373255e+00\n0.900\n1.50000\n16.0000\n▇▁▁▁▁\n\n\nAdultFemale\n68\n5.048655\n5.428615e+00\n1.000\n2.90000\n25.2000\n▇▂▁▁▁\n\n\nAdultSexRatio\n84\n2.304729\n2.192575e+00\n0.500\n1.45000\n15.6000\n▇▁▁▁▁\n\n\nInterbirthInterval_d\n103\n572.058546\n3.549477e+02\n144.470\n476.93000\n2007.5000\n▇▅▁▁▁\n\n\nGestation\n75\n163.465362\n3.740063e+01\n59.990\n165.04000\n256.0000\n▁▃▇▃▂\n\n\nWeaningAge_d\n95\n310.042881\n2.546776e+02\n40.000\n237.73500\n1260.8100\n▇▅▂▁▁\n\n\nMaxLongevity_m\n66\n327.331701\n1.259496e+02\n103.000\n303.60000\n720.0000\n▅▇▆▂▁\n\n\nLitterSz\n47\n1.180542\n3.601098e-01\n0.990\n1.01000\n2.5200\n▇▁▁▁▁\n\n\nGR_MidRangeLat_dd\n38\n-1.796457\n1.362270e+01\n-24.500\n-0.76000\n35.8800\n▆▆▇▂▁\n\n\nPrecip_Mean_mm\n38\n1543.134286\n5.158597e+02\n419.000\n1541.90000\n2794.3000\n▂▅▇▅▂\n\n\nTemp_Mean_degC\n38\n23.132000\n3.405405e+00\n2.600\n24.30000\n27.4000\n▁▁▁▂▇\n\n\nAET_Mean_mm\n38\n1253.112000\n2.635696e+02\n453.100\n1291.10000\n1828.3000\n▁▃▆▇▂\n\n\nPET_Mean_mm\n38\n1553.158857\n1.567096e+02\n842.500\n1566.90000\n1927.3000\n▁▁▂▇▂\n\n\nHomeRange_km2\n65\n1.937905\n5.210604e+00\n0.002\n0.27500\n28.2400\n▇▁▁▁▁\n\n\nDayLength_km\n104\n1.551449\n1.439277e+00\n0.250\n1.21200\n11.0000\n▇▁▁▁▁\n\n\nTerritoriality\n109\n2.228885\n2.201259e+00\n0.225\n1.59235\n15.5976\n▇▁▁▁▁\n\n\nFruit\n98\n47.736956\n2.408200e+01\n1.000\n48.00000\n97.0000\n▅▇▇▇▃\n\n\nCanine_Dimorphism\n92\n1.617438\n6.722173e-01\n0.880\n1.56000\n5.2630\n▇▃▁▁▁\n\n\nFeed\n141\n33.075833\n1.366899e+01\n9.000\n33.30000\n63.9000\n▇▇▇▇▂\n\n\nMove\n143\n21.668857\n1.059124e+01\n3.000\n21.00000\n70.6000\n▅▇▂▁▁\n\n\nRest\n143\n34.259571\n1.967175e+01\n4.000\n30.48000\n78.5000\n▇▇▅▆▂\n\n\nSocial\n136\n7.368701\n5.242077e+00\n0.900\n5.40000\n23.5000\n▇▃▃▁▁\n\n\n\n\n\n\n\n\ndetach(package:kableExtra)\ndetach(package:skimr)\n\nWe can also make boxplots summarizing a numerical variable in relation to another categorical variable.\nPlotting using {base} graphics… the ~ operator can be read as “by”.\n\nboxplot(log(d$Body_mass_female_mean) ~ d$Family)\n\n\n\n\n\n\n\n\nAlternatively, plotting using {ggplot2}…\n\np &lt;- ggplot(data = d, aes(x = Family, y = log(Body_mass_female_mean)))\np &lt;- p + geom_boxplot(na.rm = TRUE)\np &lt;- p + theme(axis.text.x = element_text(angle = 90))\np &lt;- p + ylab(\"log(Female Body Mass)\")\np\n\n\n\n\n\n\n\n\n\n\nBivariate Scatterplots\nScatterplots are a natural tool for visualizing two continuous variables and can be made easily with the plot(x=&lt;variable 1&gt;, y=&lt;variable 2&gt;) function in {base} graphics (where &lt;variable 1&gt; and &lt;variable 2&gt; denote the names of the two variables you wish to plot). Transformations of the variables, e.g., log or square root (sqrt()), may be necessary for effective visualization.\n\n\nCHALLENGE\n\nAgain using data from the “KamilarAndCooperData” dataset, plot the relationship between female body size and female brain size. Then, play with log transforming the data and plot again.\n\n\n\nShow Code\npar(mfrow = c(1, 2))  # sets up two panels side by side\nplot(x = d$Body_mass_female_mean, y = d$Brain_Size_Female_Mean)\nplot(x = log(d$Body_mass_female_mean), y = log(d$Brain_Size_Female_Mean))\n\n\n\n\n\n\n\n\n\nThe grammar for {ggplot2} is a bit more complicated… see if you can follow it in the example below.\n\np &lt;- ggplot(data = d, aes(x = log(Body_mass_female_mean), y = log(Brain_Size_Female_Mean),\n    color = factor(Family)))  # first, we build a plot object and color points by Family\n# then we modify the axis labels\np &lt;- p + xlab(\"log(Female Body Mass)\") + ylab(\"log(Female Brain Size)\")\n# then we make a scatterplot\np &lt;- p + geom_point(na.rm = TRUE)\n# then we modify the legend\np &lt;- p + theme(legend.position = \"bottom\", legend.title = element_blank())\n# and, finally, we plot the object\np\n\n\n\n\n\n\n\n\nWe can use the cool package {ggExtra} to add marginal univariate plots to our bivariate scatterplots, too.\n\nlibrary(ggExtra)\nggMarginal(p, type = \"densigram\")  # try with other types, too!\n\n## Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\n## ℹ Please use `after_stat(density)` instead.\n## ℹ The deprecated feature was likely used in the ggExtra package.\n##   Please report the issue at &lt;https://github.com/daattali/ggExtra/issues&gt;.\n\n\n\n\n\n\n\n\ndetach(package:ggExtra)\n\nUsing {ggplot2}, we can also easily set up a grid for “faceting”” by a grouping variable…\n\np &lt;- p + facet_wrap(~Family, ncol = 4)  # wrap data 'by' family into 4 columns\np &lt;- p + theme(legend.position = \"none\")\np\n\n\n\n\n\n\n\n\nIn {ggplot2} can easily add regression lines to our plot. Here, we add a linear model to each facet.\n\np &lt;- p + geom_smooth(method = \"lm\", fullrange = FALSE, na.rm = TRUE)\np\n\n\n\n\n\n\n\n\nThe scatterplot() function from the {car} package also produces nice bivariate plots and includes barplots along the margins.\n\nlibrary(car)\n\n\nscatterplot(data = d, log(Brain_Size_Female_Mean) ~ log(Body_mass_female_mean), xlab = \"log(Female Body Mass\",\n    ylab = \"log(Female Brain Size\", boxplots = \"xy\", regLine = list(method = lm,\n        lty = 1, lwd = 2, col = \"red\"))\n\n\n\n\n\n\n\ndetach(package:car)\n\n\n\nCHALLENGE\n\nBuild your own bivariate scatterplot of log(MaxLongevity_m) by log(Body_mass_female_mean) using the “KamilarAndCooperData” dataset.\n\n\n\nShow Code\np &lt;- ggplot(data = d, aes(x = log(Body_mass_female_mean), y = log(MaxLongevity_m)))\np &lt;- p + geom_point(na.rm = TRUE)\np &lt;- p + geom_smooth(method = \"lm\", na.rm = TRUE)\np\n\n\n## `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWe can also use either the pairs() function from {base} R, the scatterplotMatrix() function from the {car} package, or the pairs.panel() function from the {psych} package to do multiple scatterplots simulaneously. The ggpairs() function from the {GGally} package can also be used, but it is slower.\n\n\nCHALLENGE\nSelect the variables Brain_Size_Female_Mean, Body_mass_female_mean, MeanGroupSize, WeaningAge_d, MaxLongevity_m, HomeRange_km2, and DayLength_km from data frame d and plot scatterplots of all pairs of variables.\n\nNOTE: Here we are using the select() function from the {dplyr} package, which we cover in more detail in Module 10.\n\n\n\nShow Code\ns &lt;- select(d, c(\"Brain_Size_Female_Mean\", \"Body_mass_female_mean\", \"MeanGroupSize\",\n    \"WeaningAge_d\", \"MaxLongevity_m\", \"HomeRange_km2\", \"DayLength_km\"))\npairs(s[, 1:ncol(s)])  # or\n\n\n\n\n\n\n\n\n\nShow Code\npairs(data = s, ~.)  # NAs are ignored by default\n# adding argument `upper.panel=NULL` will suppress plots above the diagonal\n\n\nThe {car} package function scatterplotMatrix() provides a more customizable interface to the pairs() function from {base} R. It includes a neat rug plot for each variable.\n\nlibrary(car)\n\n\nscatterplotMatrix(s, smooth = TRUE, regLine = list(method = lm, lty = 1, lwd = 2),\n    ellipse = TRUE, upper.panel = NULL)\n\n\n\n\n\n\n\ndetach(package:car)\n\nThe {psych} package also makes it easy to construct a scatterplot matrix with customizable output using the pairs.panel() function. Here, method= specifies the correlation method, density= specifies whether to superimpose a density curve on the histogram, and elipses= specifies whether to show correlation elipses.\n\nlibrary(psych)\npairs.panels(s[], smooth = FALSE, lm = TRUE, method = \"pearson\", hist.col = \"#00AFBB\",\n    density = TRUE, ellipses = TRUE)\n\n\n\n\n\n\n\n# NAs are ignored by default\ndetach(package:psych)\n\nThe {GGally} package lets us do something similar…\n\nlibrary(GGally)\nggpairs(s, columns = 1:ncol(s))  # NAs produce a warning\n\n\n\n\n\n\n\ndetach(package:GGally)\n\nFinally, we can do a nice correlation plot using the {corrplot} package, where we get a matrix of correlations among variables and a graphical representation of the strength and direction of the bivariate correlation coefficients among them.\n\nlibrary(corrplot)\ncor = cor(s, use = \"pairwise.complete.obs\")\ncorrplot.mixed(cor, lower.col = \"black\", number.cex = 0.7)\n\n\n\n\n\n\n\ndetach(package:corrplot)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#custom-layouts-for-multiple-plots",
    "href": "09-module.html#custom-layouts-for-multiple-plots",
    "title": "9  Exploratory Data Analysis",
    "section": "9.7 Custom Layouts for Multiple Plots",
    "text": "9.7 Custom Layouts for Multiple Plots\nAbove, we saw the typical {base} R method for laying out plots, using the par() command with the mfrow= argument to set up a grid of panels in which to plot to the current graphics output device. There are, however, several easier ways for combining plots into custom layouts. Three alternatives are provided in the {patchwork}, {cowplot}, and {gridExtra} packages. Each starts by generating plot objects, typically using {ggplot2}. First, we create 3 plot objects using the KamilarAndCooper dataset:\n\np1 &lt;- ggplot(data = d, aes(x = log(Body_mass_female_mean), y = log(MaxLongevity_m)))\np1 &lt;- p1 + geom_point(na.rm = TRUE)\np1 &lt;- p1 + geom_smooth(method = \"lm\", na.rm = TRUE)\np1 &lt;- p1 + xlab(\"log(Female Body Size)\") + ylab(\"log(Lifespan)\")\n\np2 &lt;- ggplot(data = d, aes(x = log(Body_mass_male_mean), y = log(MaxLongevity_m)))\np2 &lt;- p2 + geom_point(na.rm = TRUE)\np2 &lt;- p2 + geom_smooth(method = \"lm\", na.rm = TRUE)\np2 &lt;- p2 + xlab(\"log(Male Body Size)\") + ylab(\"log(Lifespan)\")\n\np3 &lt;- ggplot(data = d, aes(x = Family, y = log(Body_mass_female_mean)))\np3 &lt;- p3 + geom_boxplot(na.rm = TRUE)\np3 &lt;- p3 + theme(axis.text.x = element_text(angle = 90))\np3 &lt;- p3 + xlab(\"Family\") + ylab(\"log(Female Body Mass)\")\n\nOnce we have these plot objects, we can arrange them in custom ways using these different packages. Some alternative ways of arranging these three plots in 2 rows, with 2 panels in the top row and 1 in the bottom row, are given below…\nThe {patchwork} package is perhaps the easiest to use!\n\nlibrary(patchwork)\n(p1 | p2)/p3 + plot_annotation(tag_levels = \"A\")\n\n\n\n\n\n\n\ndetach(package:patchwork)\n\nWe can also use {cowplot}…\n\nlibrary(cowplot)\nplot_grid(plot_grid(p1, p2, labels = c(\"A\", \"B\"), label_size = 12, nrow = 1), p3,\n    labels = c(\"\", \"C\"), label_size = 12, nrow = 2)\n\n\n\n\n\n\n\ndetach(package:cowplot)\n\n… or {gridExtra}\n\nlibrary(gridExtra)\ngrid.arrange(grid.arrange(p1, p2, nrow = 1), p3, nrow = 2)\n\n\n\n\n\n\n\ndetach(package:gridExtra)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#aggregate-statistics",
    "href": "09-module.html#aggregate-statistics",
    "title": "9  Exploratory Data Analysis",
    "section": "9.8 Aggregate Statistics",
    "text": "9.8 Aggregate Statistics\nTo calculate summary statistics for groups of observations in a data frame, there are many different approaches. One is to use the aggregate() function from the {stats} package (a {base} R standard package), which provides a quick way to look at summary statistics for sets of observations, though it requires a bit of clunky code. Here, we apply a particular function (FUN = \"mean\") to mean female body mass, grouped by Family.\n\naggregate(d$Body_mass_female_mean ~ d$Family, FUN = \"mean\", na.rm = TRUE)\n\n##           d$Family d$Body_mass_female_mean\n## 1         Atelidae               6616.2000\n## 2          Cebidae                876.3323\n## 3  Cercopithecidae               6327.8247\n## 4    Cheirogalidae                186.0286\n## 5    Daubentonidae               2490.0000\n## 6        Galagidae                371.6143\n## 7        Hominidae              53443.7167\n## 8      Hylobatidae               6682.1200\n## 9        Indriidae               3886.5333\n## 10       Lemuridae               1991.1200\n## 11   Lepilemuridae                813.5000\n## 12       Lorisidae                489.8625\n## 13     Pitheciidae               1768.5000\n## 14       Tarsiidae                120.0000\n\n\nOr, alternatively…\n\naggregate(x = d[\"Body_mass_female_mean\"], by = d[\"Family\"], FUN = \"mean\", na.rm = TRUE)\n\n##             Family Body_mass_female_mean\n## 1         Atelidae             6616.2000\n## 2          Cebidae              876.3323\n## 3  Cercopithecidae             6327.8247\n## 4    Cheirogalidae              186.0286\n## 5    Daubentonidae             2490.0000\n## 6        Galagidae              371.6143\n## 7        Hominidae            53443.7167\n## 8      Hylobatidae             6682.1200\n## 9        Indriidae             3886.5333\n## 10       Lemuridae             1991.1200\n## 11   Lepilemuridae              813.5000\n## 12       Lorisidae              489.8625\n## 13     Pitheciidae             1768.5000\n## 14       Tarsiidae              120.0000\n\n\n\n# | include: false\ndetach(package:curl)\ndetach(package:tidyverse)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "09-module.html#concept-review",
    "href": "09-module.html#concept-review",
    "title": "9  Exploratory Data Analysis",
    "section": "Concept Review",
    "text": "Concept Review\n\nSummary statistics: summary(), skim()\nBasic plotting: boxplot(), barplot(), histogram()\nPlotting with {ggplot2}: ggplot(data = , mapping = aes()) + geom() + theme() + ...\nSummarizing by groups: aggregrate()\nArranging plots with {patchwork}, {cowplot}, and {gridExtra}",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "10-module.html",
    "href": "10-module.html",
    "title": "10  Data Wrangling",
    "section": "",
    "text": "10.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#objectives",
    "href": "10-module.html#objectives",
    "title": "10  Data Wrangling",
    "section": "",
    "text": "The objective of this module to introduce you to data wrangling and transformation using the {dplyr} and {tidyr} packages, which are part of the {tidyverse} family.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#preliminaries",
    "href": "10-module.html#preliminaries",
    "title": "10  Data Wrangling",
    "section": "10.2 Preliminaries",
    "text": "10.2 Preliminaries\n\nInstall (but do not load yet) this package in R: {tidylog}\nInstall and load this package: {magrittr}\nLoad {tidyverse}\nLoad in the KamilarAndCooper dataset we used in Module 09 as a “tibble” named d\n\n\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-datasets/main/KamilarAndCooperData.csv\"\nd &lt;- read_csv(f, col_names = TRUE)  # creates a 'tibble'\nhead(d)\n\n## # A tibble: 6 × 44\n##   Scientific_Name             Family        Genus Species Brain_Size_Species_M…¹\n##   &lt;chr&gt;                       &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                    &lt;dbl&gt;\n## 1 Allenopithecus_nigroviridis Cercopitheci… Alle… nigrov…                   58.0\n## 2 Allocebus_trichotis         Cercopitheci… Allo… tricho…                   NA  \n## 3 Alouatta_belzebul           Atelidae      Alou… belzeb…                   52.8\n## 4 Alouatta_caraya             Atelidae      Alou… caraya                    52.6\n## 5 Alouatta_guariba            Atelidae      Alou… guariba                   51.7\n## 6 Alouatta_palliata           Atelidae      Alou… pallia…                   49.9\n## # ℹ abbreviated name: ¹​Brain_Size_Species_Mean\n## # ℹ 39 more variables: Brain_Size_Female_Mean &lt;dbl&gt;, Brain_size_Ref &lt;chr&gt;,\n## #   Body_mass_male_mean &lt;dbl&gt;, Body_mass_female_mean &lt;dbl&gt;,\n## #   Mass_Dimorphism &lt;dbl&gt;, Mass_Ref &lt;chr&gt;, MeanGroupSize &lt;dbl&gt;,\n## #   AdultMales &lt;dbl&gt;, AdultFemale &lt;dbl&gt;, AdultSexRatio &lt;dbl&gt;,\n## #   Social_Organization_Ref &lt;chr&gt;, InterbirthInterval_d &lt;dbl&gt;, Gestation &lt;dbl&gt;,\n## #   WeaningAge_d &lt;dbl&gt;, MaxLongevity_m &lt;dbl&gt;, LitterSz &lt;dbl&gt;, …",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#data-wrangling-using-dplyr",
    "href": "10-module.html#data-wrangling-using-dplyr",
    "title": "10  Data Wrangling",
    "section": "10.3 Data Wrangling Using {dplyr}",
    "text": "10.3 Data Wrangling Using {dplyr}\nThe {dplyr} package, included in the {tidyverse}, provides “a flexible grammar of data manipulation” that makes many of the manipulations that we explore in Module 07 and Module 09 much easier and much more intuitive!\n\n\n\n\n\n\n\n\n\nAmong other functions, {dplyr} introduces a set of verbs (filter(), select(), arrange(), rename(), mutate(), summarize(), and group_by()) that can be used to perform useful operations on “tibbles” and related tabular data structures (e.g., normal data frames and data tables). Before using {dplyr} for summarizing data and producing aggregate statistics, let’s look in general at what we can do with these verbs…\n\nfilter()\nThe filter() function lets us pull out rows from a data frame that meet a particular criterion or set of criteria:\n\n\n\n\n\n\n\n\n\n\n\nFROM: Baumer et al. (2017). Modern Data Science with R. Chapman and Hall/CRC.\n\n\n\n\n# selecting rows..\ns &lt;- filter(d, Family == \"Hominidae\" & Mass_Dimorphism &gt; 2)\nhead(s)\n\n## # A tibble: 3 × 44\n##   Scientific_Name Family    Genus   Species  Brain_Size_Species_Mean\n##   &lt;chr&gt;           &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;                      &lt;dbl&gt;\n## 1 Gorilla_gorilla Hominidae Gorilla gorilla                     490.\n## 2 Pongo_abelii    Hominidae Pongo   abelii                      390.\n## 3 Pongo_pygmaeus  Hominidae Pongo   pygmaeus                    377.\n## # ℹ 39 more variables: Brain_Size_Female_Mean &lt;dbl&gt;, Brain_size_Ref &lt;chr&gt;,\n## #   Body_mass_male_mean &lt;dbl&gt;, Body_mass_female_mean &lt;dbl&gt;,\n## #   Mass_Dimorphism &lt;dbl&gt;, Mass_Ref &lt;chr&gt;, MeanGroupSize &lt;dbl&gt;,\n## #   AdultMales &lt;dbl&gt;, AdultFemale &lt;dbl&gt;, AdultSexRatio &lt;dbl&gt;,\n## #   Social_Organization_Ref &lt;chr&gt;, InterbirthInterval_d &lt;dbl&gt;, Gestation &lt;dbl&gt;,\n## #   WeaningAge_d &lt;dbl&gt;, MaxLongevity_m &lt;dbl&gt;, LitterSz &lt;dbl&gt;,\n## #   Life_History_Ref &lt;chr&gt;, GR_MidRangeLat_dd &lt;dbl&gt;, Precip_Mean_mm &lt;dbl&gt;, …\n\n\n\nNOTE: The first argument of any of the {dplyr} verbs is the .data argument. That is the line of code above is equivalent to s &lt;- filter(.data = d, Family == \"Hominidae\" & Mass_Dimorphism &gt; 2)\n\n\n\nselect()\nThe select() function lets us pull out only particular columns from a data frame:\n\n\n\n\n\n\n\n\n\n\n\nFROM: Baumer et al. (2017). Modern Data Science with R. Chapman and Hall/CRC.\n\n\n\n\n# selecting specific columns...\ns &lt;- select(d, Family, Genus, Body_mass_male_mean)\nhead(s)\n\n## # A tibble: 6 × 3\n##   Family          Genus          Body_mass_male_mean\n##   &lt;chr&gt;           &lt;chr&gt;                        &lt;dbl&gt;\n## 1 Cercopithecidae Allenopithecus                6130\n## 2 Cercopithecidae Allocebus                       92\n## 3 Atelidae        Alouatta                      7270\n## 4 Atelidae        Alouatta                      6525\n## 5 Atelidae        Alouatta                      5800\n## 6 Atelidae        Alouatta                      7150\n\n\n\n\narrange()\nThe arrange() function lets us sort a data frame based on a select variable or set of variables:\n\n\n\n\n\n\n\n\n\n\n\nFROM: Baumer et al. (2017). Modern Data Science with R. Chapman and Hall/CRC.\n\n\n\n\n# reordering a data frame by a set of variables...\ns &lt;- arrange(d, Family, Genus, Body_mass_male_mean)\nhead(s)\n\n## # A tibble: 6 × 44\n##   Scientific_Name    Family   Genus    Species   Brain_Size_Species_Mean\n##   &lt;chr&gt;              &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;                       &lt;dbl&gt;\n## 1 Alouatta_guariba   Atelidae Alouatta guariba                      51.7\n## 2 Alouatta_caraya    Atelidae Alouatta caraya                       52.6\n## 3 Alouatta_seniculus Atelidae Alouatta seniculus                    55.2\n## 4 Alouatta_palliata  Atelidae Alouatta palliata                     49.9\n## 5 Alouatta_belzebul  Atelidae Alouatta belzebul                     52.8\n## 6 Alouatta_pigra     Atelidae Alouatta pigra                        51.1\n## # ℹ 39 more variables: Brain_Size_Female_Mean &lt;dbl&gt;, Brain_size_Ref &lt;chr&gt;,\n## #   Body_mass_male_mean &lt;dbl&gt;, Body_mass_female_mean &lt;dbl&gt;,\n## #   Mass_Dimorphism &lt;dbl&gt;, Mass_Ref &lt;chr&gt;, MeanGroupSize &lt;dbl&gt;,\n## #   AdultMales &lt;dbl&gt;, AdultFemale &lt;dbl&gt;, AdultSexRatio &lt;dbl&gt;,\n## #   Social_Organization_Ref &lt;chr&gt;, InterbirthInterval_d &lt;dbl&gt;, Gestation &lt;dbl&gt;,\n## #   WeaningAge_d &lt;dbl&gt;, MaxLongevity_m &lt;dbl&gt;, LitterSz &lt;dbl&gt;,\n## #   Life_History_Ref &lt;chr&gt;, GR_MidRangeLat_dd &lt;dbl&gt;, Precip_Mean_mm &lt;dbl&gt;, …\n\n\nWe can also specify the direction in which we want the data frame to be sorted:\n\n# `desc()` can be used to reverse the order\ns &lt;- arrange(d, desc(Family), Genus, Species, desc(Body_mass_male_mean))\nhead(s)\n\n## # A tibble: 6 × 44\n##   Scientific_Name         Family      Genus      Species  Brain_Size_Species_M…¹\n##   &lt;chr&gt;                   &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;                     &lt;dbl&gt;\n## 1 Tarsius_bancanus        Tarsiidae   Tarsius    bancanus                   3.16\n## 2 Tarsius_dentatus        Tarsiidae   Tarsius    dentatus                  NA   \n## 3 Tarsius_syrichta        Tarsiidae   Tarsius    syrichta                   3.36\n## 4 Cacajao_calvus          Pitheciidae Cacajao    calvus                    76   \n## 5 Cacajao_melanocephalus  Pitheciidae Cacajao    melanoc…                  68.8 \n## 6 Callicebus_donacophilus Pitheciidae Callicebus donacop…                  NA   \n## # ℹ abbreviated name: ¹​Brain_Size_Species_Mean\n## # ℹ 39 more variables: Brain_Size_Female_Mean &lt;dbl&gt;, Brain_size_Ref &lt;chr&gt;,\n## #   Body_mass_male_mean &lt;dbl&gt;, Body_mass_female_mean &lt;dbl&gt;,\n## #   Mass_Dimorphism &lt;dbl&gt;, Mass_Ref &lt;chr&gt;, MeanGroupSize &lt;dbl&gt;,\n## #   AdultMales &lt;dbl&gt;, AdultFemale &lt;dbl&gt;, AdultSexRatio &lt;dbl&gt;,\n## #   Social_Organization_Ref &lt;chr&gt;, InterbirthInterval_d &lt;dbl&gt;, Gestation &lt;dbl&gt;,\n## #   WeaningAge_d &lt;dbl&gt;, MaxLongevity_m &lt;dbl&gt;, LitterSz &lt;dbl&gt;, …\n\n\n\n\nrename()\nThe rename() function allows us to change the names of particular columns in a data frame:\n\n# renaming columns...\ns &lt;- rename(d, Female_Mass = Body_mass_female_mean)\nhead(s$Female_Mass)\n\n## [1] 3180   84 5520 4240 4550 5350\n\n\n\n\nmutate()\nThe mutate() function allows us to add new columns to a data frame:\n\n\n\n\n\n\n\n\n\n\n\nFROM: Baumer et al. (2017). Modern Data Science with R. Chapman and Hall/CRC.\n\n\n\n\n# and adding new columns...\ns &lt;- mutate(d, Binomial = paste(Genus, Species, sep = \" \"))\nhead(s$Binomial)  # or head(s[['Binomial']])\n\n## [1] \"Allenopithecus nigroviridis\" \"Allocebus trichotis\"        \n## [3] \"Alouatta belzebul\"           \"Alouatta caraya\"            \n## [5] \"Alouatta guariba\"            \"Alouatta palliata\"\n\n\n\n\nsummarize() and group_by()\nThe {dplyr} package makes it easy to summarize data using more convenient functions than the {base} function aggregate(), which we looked at in Module 09. The summarize() function specifies a list of summary variables that will appear in the output, along with the operations that will be performed on vectors in the data frame to produce those summary variables:\n\n\n\n\n\n\n\n\n\n\n\nFROM: Baumer et al. (2017). Modern Data Science with R. Chapman and Hall/CRC.\n\n\n\n\n# NOTE: # the n() function from {dplyr} returns the number of rows in the data\n# frame\ns &lt;- summarize(d, n_cases = n(), avgF = mean(Body_mass_female_mean, na.rm = TRUE),\n    avgM = mean(Body_mass_male_mean, na.rm = TRUE))\ns\n\n## # A tibble: 1 × 3\n##   n_cases  avgF  avgM\n##     &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1     213 5396. 8112.\n\n\nAdditionally, the group_by() function allows us to construct these summary variables for sets of observations defined by a particular categorical variable, as we did above with aggregate().\n\nbyFamily &lt;- group_by(d, Family)\n# NOTE: here, n() returns the number of rows in the group being considered\ns &lt;- summarise(byFamily, n_cases = n(), avgF = mean(Body_mass_female_mean, na.rm = TRUE),\n    avgM = mean(Body_mass_male_mean, na.rm = TRUE))\ns\n\n## # A tibble: 14 × 4\n##    Family          n_cases   avgF   avgM\n##    &lt;chr&gt;             &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Atelidae             12  6616.  7895.\n##  2 Cebidae              37   876.  1012.\n##  3 Cercopithecidae      79  6328.  9543.\n##  4 Cheirogalidae         7   186.   193.\n##  5 Daubentonidae         1  2490   2620 \n##  6 Galagidae             7   372.   395.\n##  7 Hominidae             6 53444. 98681.\n##  8 Hylobatidae          11  6682.  6926.\n##  9 Indriidae             9  3887.  3638.\n## 10 Lemuridae            17  1991.  2077.\n## 11 Lepilemuridae         6   814.   792 \n## 12 Lorisidae             8   490.   512.\n## 13 Pitheciidae          10  1768.  1955.\n## 14 Tarsiidae             3   120    131",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#other-useful-dplyr-functions",
    "href": "10-module.html#other-useful-dplyr-functions",
    "title": "10  Data Wrangling",
    "section": "10.4 Other Useful {dplyr} Functions",
    "text": "10.4 Other Useful {dplyr} Functions\n\nungroup() - clears group metadata from a table put in place group_by()\nbind_rows() and bind_cols() - adds rows and columns, respectively, to a dataframe or tibble; when binding rows, if the column names do not match, the column will still be added and missing values filled with NA; when binding columns, the number of rows in each dataframe needs to be the same\npull() - pulls a single variable out of a dataframe as a vector\nsample_n() - randomly samples a set of “size=” rows from a dataframe with (“replace=TRUE”) or without (“replace=FALSE”) replacement; this function is being superceded in favor of slice_sample(), where an additional argument (n= or prop=) allows you to specify the number or proportion of rows, respectively, to sample randomly\ndrop_na() - drops rows from a dataframe that have NA values for any variable names passed as arguments to the function\nrowwise() - allows you to explicitly perform functions on a data frame on a row-at-a-time basis, which is useful if a vectorized function does not exit\n\nA full list of {dplyr} functions and their descriptions is available here.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#joining-tables",
    "href": "10-module.html#joining-tables",
    "title": "10  Data Wrangling",
    "section": "10.5 Joining Tables",
    "text": "10.5 Joining Tables\nOne of the other major forms of data wrangling that we often need to do is to combine variables from different tabular data structures into a new table. This process is often referred to as performing a “mutating join” or simply a “join”.\n\nNOTE: For those with experience with other database systems, it is related to the “JOIN” commands in SQL.\n\nThe process works by matching observations in two different tables by a common key variable and then selecting additional variables of interest to pull from each of the tables. A simple example is the following… suppose we have two tables, one that contains average brain sizes for particular species of primates and one that contains individual body sizes for some of the same species, plus others. In the latter table, too, we may have data from multiple individuals of the same species represented.\n\ntable1 &lt;- tibble(Taxon = c(\"Gorilla\", \"Human\", \"Chimpanzee\", \"Orangutan\", \"Baboon\"),\n    Avg_Brain_Size = c(470, 1100, 350, 340, 140))\ntable1\n\n## # A tibble: 5 × 2\n##   Taxon      Avg_Brain_Size\n##   &lt;chr&gt;               &lt;dbl&gt;\n## 1 Gorilla               470\n## 2 Human                1100\n## 3 Chimpanzee            350\n## 4 Orangutan             340\n## 5 Baboon                140\n\ntable2 &lt;- tibble(Taxon = c(\"Gorilla\", \"Gorilla\", \"Gorilla\", \"Human\", \"Human\", \"Chimpanzee\",\n    \"Orangutan\", \"Orangutan\", \"Macaque\", \"Macaque\", \"Macaque\"), Body_Weight = c(80,\n    81, 77, 48, 49, 38, 37, 36, 6, 7, 6))\ntable2\n\n## # A tibble: 11 × 2\n##    Taxon      Body_Weight\n##    &lt;chr&gt;            &lt;dbl&gt;\n##  1 Gorilla             80\n##  2 Gorilla             81\n##  3 Gorilla             77\n##  4 Human               48\n##  5 Human               49\n##  6 Chimpanzee          38\n##  7 Orangutan           37\n##  8 Orangutan           36\n##  9 Macaque              6\n## 10 Macaque              7\n## 11 Macaque              6\n\n\n\nInner Joins\nAn inner join or equijoin matches up sets of observations between two tables whenever their keys are equal. The output of an inner join is a new data frame that contains all rows from the left-hand (x) and right-hand (y) tables where there are matching values in the key column, plus all columns from x and y. If there are multiple matches between the tables, all combination of the matches are returned. This is represented schematically below:\n\n\n\n\n\n\n\n\n\n\n\nFROM: Wickham & Grolemund (2017). R for Data Science. O’Reilly Media, Inc.\n\n\n\n\ninner_join(table1, table2, by = \"Taxon\")\n\n## # A tibble: 8 × 3\n##   Taxon      Avg_Brain_Size Body_Weight\n##   &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;\n## 1 Gorilla               470          80\n## 2 Gorilla               470          81\n## 3 Gorilla               470          77\n## 4 Human                1100          48\n## 5 Human                1100          49\n## 6 Chimpanzee            350          38\n## 7 Orangutan             340          37\n## 8 Orangutan             340          36\n\n\n\n\nOuter Joins\nWhile an inner join keeps only observations that appear in both tables, different flavors of outer joins keep observations that appear in at least one of the tables. There are three types of outer joins:\n\nA left join returns all rows from the left-hand table, x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns from the y table. If there are multiple matches between x and *y, all combinations of the matches are returned.\nA right join returns all rows from the right-hand table, y, and all columns from x and y. Rows in y with no match in x will have NA values in the new columns from the x table. If there are multiple matches between x and y, all combinations of the matches are returned.\nA full join returns all rows and all columns in both the left-hand (x) and right-hand (y) tables, joining them where there are matches. Where there are not matching values, the join returns NA for the columns from table where they are missing.\n\nThe following figure shows a schematic representation of these various types of outer joins:\n\n\n\n\n\n\n\n\n\n\n\nFROM: Wickham & Grolemund (2017). R for Data Science. O’Reilly Media, Inc.\n\n\n\n\nleft_join(table1, table2, by = \"Taxon\")\n\n## # A tibble: 9 × 3\n##   Taxon      Avg_Brain_Size Body_Weight\n##   &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;\n## 1 Gorilla               470          80\n## 2 Gorilla               470          81\n## 3 Gorilla               470          77\n## 4 Human                1100          48\n## 5 Human                1100          49\n## 6 Chimpanzee            350          38\n## 7 Orangutan             340          37\n## 8 Orangutan             340          36\n## 9 Baboon                140          NA\n\nright_join(table1, table2, by = \"Taxon\")\n\n## # A tibble: 11 × 3\n##    Taxon      Avg_Brain_Size Body_Weight\n##    &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;\n##  1 Gorilla               470          80\n##  2 Gorilla               470          81\n##  3 Gorilla               470          77\n##  4 Human                1100          48\n##  5 Human                1100          49\n##  6 Chimpanzee            350          38\n##  7 Orangutan             340          37\n##  8 Orangutan             340          36\n##  9 Macaque                NA           6\n## 10 Macaque                NA           7\n## 11 Macaque                NA           6\n\nfull_join(table1, table2, by = \"Taxon\")\n\n## # A tibble: 12 × 3\n##    Taxon      Avg_Brain_Size Body_Weight\n##    &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;\n##  1 Gorilla               470          80\n##  2 Gorilla               470          81\n##  3 Gorilla               470          77\n##  4 Human                1100          48\n##  5 Human                1100          49\n##  6 Chimpanzee            350          38\n##  7 Orangutan             340          37\n##  8 Orangutan             340          36\n##  9 Baboon                140          NA\n## 10 Macaque                NA           6\n## 11 Macaque                NA           7\n## 12 Macaque                NA           6\n\n\n\n\nOther Joins\nThere are also two additional join types that may be sometimes be useful… note that these joins only return columns from the left-hand table, x.\n\nA semi_join returns rows from the left-hand table, x, where there are matching values in y, but keeping just the columns from x. A semi_join differs from an inner_join because an inner_join will return a row of x for every matching row of y (so some x rows can be duplicated), whereas a semi_join will never duplicate rows of x.\nAn anti_join returns all rows from the left-hand table,x where there are not matching values in y, keeping just the columns from x.\n\n\nsemi_join(table1, table2, by = \"Taxon\")\n\n## # A tibble: 4 × 2\n##   Taxon      Avg_Brain_Size\n##   &lt;chr&gt;               &lt;dbl&gt;\n## 1 Gorilla               470\n## 2 Human                1100\n## 3 Chimpanzee            350\n## 4 Orangutan             340\n\nanti_join(table1, table2, by = \"Taxon\")\n\n## # A tibble: 1 × 2\n##   Taxon  Avg_Brain_Size\n##   &lt;chr&gt;           &lt;dbl&gt;\n## 1 Baboon            140\n\n\nThe cheatsheet on Data Transformation with {dplyr} provides a nice overview of these and additional data wrangling functions included the {dplyr} package.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#chaining-and-piping",
    "href": "10-module.html#chaining-and-piping",
    "title": "10  Data Wrangling",
    "section": "10.6 Chaining and Piping",
    "text": "10.6 Chaining and Piping\nOne other cool thing about the {dplyr} package is that it provides a convenient way to chain together operations on a data frame using the “forward pipe” operator (%&gt;%). The %&gt;% operator basically takes what is on the left-hand side (LHS) of the operator and directly applies the function call on the right-hand side (RHS) of the operator to it. That is, it “pipes” what is on the LHS of the operator directly to the first argument of the function on the right. This process allows us to build of chains of successive operations, each one being applied to the outcome of the previous operation in the chain.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEXAMPLE:\n\n# this...\nd %&gt;%\n    select(Scientific_Name, Body_mass_female_mean) %&gt;%\n    head()\n\n## # A tibble: 6 × 2\n##   Scientific_Name             Body_mass_female_mean\n##   &lt;chr&gt;                                       &lt;dbl&gt;\n## 1 Allenopithecus_nigroviridis                  3180\n## 2 Allocebus_trichotis                            84\n## 3 Alouatta_belzebul                            5520\n## 4 Alouatta_caraya                              4240\n## 5 Alouatta_guariba                             4550\n## 6 Alouatta_palliata                            5350\n\n# is equivalent to...\nhead(select(d, Scientific_Name, Body_mass_female_mean))\n\n## # A tibble: 6 × 2\n##   Scientific_Name             Body_mass_female_mean\n##   &lt;chr&gt;                                       &lt;dbl&gt;\n## 1 Allenopithecus_nigroviridis                  3180\n## 2 Allocebus_trichotis                            84\n## 3 Alouatta_belzebul                            5520\n## 4 Alouatta_caraya                              4240\n## 5 Alouatta_guariba                             4550\n## 6 Alouatta_palliata                            5350\n\n\nThe forward pipe is useful because it allows us to write and follow code from left to right (as when writing in English), instead of right to left with many nested parentheses.\n\nCHALLENGE\n\nIn one line of code, do the following:\n\nAdd a variable, Binomial to our data frame d, which is a concatenation of the Genus and Species…\nTrim the data frame to only include the variables Binomial, Family, Body_mass_female_mean, Body_mass_male_mean and Mass_Dimorphism…\nGroup these variables by Family…\nCalculate the average value for female body mass, male body mass, and mass dimorphism (remember, you will need to specify na.rm = TRUE…)\nAnd arrange by decreasing average mass dimorphism.\n\n\n\n\nShow Code\ns &lt;- mutate(d, Binomial = paste(Genus, Species, sep = \" \")) %&gt;%\n    select(Binomial, Family, Body_mass_female_mean, Body_mass_male_mean, Mass_Dimorphism) %&gt;%\n    group_by(Family) %&gt;%\n    summarise(avgF = mean(Body_mass_female_mean, na.rm = TRUE), avgM = mean(Body_mass_male_mean,\n        na.rm = TRUE), avgBMD = mean(Mass_Dimorphism, na.rm = TRUE)) %&gt;%\n    arrange(desc(avgBMD))\ns\n\n\nShow Output\n## # A tibble: 14 × 4\n##    Family            avgF   avgM avgBMD\n##    &lt;chr&gt;            &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Hominidae       53444. 98681.  1.81 \n##  2 Cercopithecidae  6328.  9543.  1.49 \n##  3 Atelidae         6616.  7895.  1.23 \n##  4 Tarsiidae         120    131   1.09 \n##  5 Pitheciidae      1768.  1955.  1.09 \n##  6 Cebidae           876.  1012.  1.07 \n##  7 Lemuridae        1991.  2077.  1.06 \n##  8 Daubentonidae    2490   2620   1.05 \n##  9 Lorisidae         490.   512.  1.05 \n## 10 Galagidae         372.   395.  1.05 \n## 11 Hylobatidae      6682.  6926.  1.03 \n## 12 Cheirogalidae     186.   193.  1.02 \n## 13 Lepilemuridae     814.   792   0.980\n## 14 Indriidae        3887.  3638.  0.950\n\n\n\nThere are several other, very cool, “special case” pipe operators that are useful in particular situations. These are available from the {magrittr} package. [Actually, the functionality of the forward pipe operator also comes from the {magrittr} package, but it is replicated in {dplyr}.]\n\nThe “tee” pipe (%T&gt;%) allows you to pipe the outcome of a process into a new expression (just like the forward pipe operator does) and to simultaneously return the original value instead of the forward-piped result to an intermediate expression. This is useful, for example, for printing out or plotting intermediate results. In the example below, we filter our data frame for just observations of the genus Alouatta, print those to the screen as an intermediate side effect, and pass the filtered data to the summarise() function.\n\n\ns &lt;- filter(d, Genus == \"Alouatta\") %T&gt;%\n    print() %&gt;%\n    summarise(avgF = mean(Body_mass_female_mean, na.rm = TRUE))\n\n## # A tibble: 6 × 44\n##   Scientific_Name    Family   Genus    Species   Brain_Size_Species_Mean\n##   &lt;chr&gt;              &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;                       &lt;dbl&gt;\n## 1 Alouatta_belzebul  Atelidae Alouatta belzebul                     52.8\n## 2 Alouatta_caraya    Atelidae Alouatta caraya                       52.6\n## 3 Alouatta_guariba   Atelidae Alouatta guariba                      51.7\n## 4 Alouatta_palliata  Atelidae Alouatta palliata                     49.9\n## 5 Alouatta_pigra     Atelidae Alouatta pigra                        51.1\n## 6 Alouatta_seniculus Atelidae Alouatta seniculus                    55.2\n## # ℹ 39 more variables: Brain_Size_Female_Mean &lt;dbl&gt;, Brain_size_Ref &lt;chr&gt;,\n## #   Body_mass_male_mean &lt;dbl&gt;, Body_mass_female_mean &lt;dbl&gt;,\n## #   Mass_Dimorphism &lt;dbl&gt;, Mass_Ref &lt;chr&gt;, MeanGroupSize &lt;dbl&gt;,\n## #   AdultMales &lt;dbl&gt;, AdultFemale &lt;dbl&gt;, AdultSexRatio &lt;dbl&gt;,\n## #   Social_Organization_Ref &lt;chr&gt;, InterbirthInterval_d &lt;dbl&gt;, Gestation &lt;dbl&gt;,\n## #   WeaningAge_d &lt;dbl&gt;, MaxLongevity_m &lt;dbl&gt;, LitterSz &lt;dbl&gt;,\n## #   Life_History_Ref &lt;chr&gt;, GR_MidRangeLat_dd &lt;dbl&gt;, Precip_Mean_mm &lt;dbl&gt;, …\n\ns\n\n## # A tibble: 1 × 1\n##    avgF\n##   &lt;dbl&gt;\n## 1 5217.\n\n\n\nThe “assignment” pipe (%&lt;&gt;%) evaluates the expression on the right-hand side of the pipe operator and reassigns the resultant value to the left-hand side.\n\n\ns &lt;- filter(d, Genus == \"Alouatta\")\ns %&lt;&gt;%\n    select(Genus, Species)\ns\n\n## # A tibble: 6 × 2\n##   Genus    Species  \n##   &lt;chr&gt;    &lt;chr&gt;    \n## 1 Alouatta belzebul \n## 2 Alouatta caraya   \n## 3 Alouatta guariba  \n## 4 Alouatta palliata \n## 5 Alouatta pigra    \n## 6 Alouatta seniculus\n\n\n\nFinally, the “exposition” pipe (%$%) exposes the names within the object on the left-hand side of the pipe to the right-hand side expression.\n\n\ns &lt;- filter(d, Genus == \"Alouatta\") %$%\n    paste0(Genus, \" \", Species)\ns\n\n## [1] \"Alouatta belzebul\"  \"Alouatta caraya\"    \"Alouatta guariba\"  \n## [4] \"Alouatta palliata\"  \"Alouatta pigra\"     \"Alouatta seniculus\"",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#dot-syntax-and-the-pipe",
    "href": "10-module.html#dot-syntax-and-the-pipe",
    "title": "10  Data Wrangling",
    "section": "10.7 Dot Syntax and the Pipe",
    "text": "10.7 Dot Syntax and the Pipe\nNormally, when we use the forward pipe operator, the LHS of the operator is passed to the first argument of the function on the RHS. Thus, the following are all equivalent:\n\ns &lt;- filter(d, Genus == \"Alouatta\")\ns &lt;- d %&gt;%\n    filter(Genus == \"Alouatta\")\nd %&gt;%\n    filter(Genus == \"Alouatta\") -&gt; s\n\nThe behavior of the forward pipe operator means we can use it do something like the following, where d is implicitly piped into the data argument for ggplot()\n\nd %&gt;%\n    ggplot(aes(x = log(Body_mass_female_mean), y = log(Brain_Size_Species_Mean))) +\n    geom_point()\n\n## Warning: Removed 42 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n\n\n\n\n\n\n\n\n\nWe can also use dot (.) syntax with the {magrittr} forward pipe operator to pass the LHS of a statement to somewhere other than the first argument of the function on the RHS. Thus…\ny %&gt;% function(x, .) is equivalent to function(x, y)\n… which means we can do something like this to pipe d into a function such as lm() (“linear model”), where the data frame that the function is run on is not the first argument:\n\nd %&gt;%\n    lm(log(Body_mass_female_mean) ~ log(Brain_Size_Species_Mean), data = .)\n\n## \n## Call:\n## lm(formula = log(Body_mass_female_mean) ~ log(Brain_Size_Species_Mean), \n##     data = .)\n## \n## Coefficients:\n##                  (Intercept)  log(Brain_Size_Species_Mean)  \n##                        3.713                         1.135\n\n\nWe can also use the {magrittr} pipe’s curly brace ({}) syntax to wrap the RHS of a statement and pass the LHS into several places:\n\nd %&gt;%\n    {\n        plot(log(.$Brain_Size_Species_Mean), log(.$Body_mass_female_mean))\n    }\n\n\n\n\n\n\n\n\n\nNOTE: R recently introduced a “native” pipe operator |&gt; into its {base} syntax. It behaves very similarly to the {magrittr} forward pipe, but does not support dot syntax the same way. It also requires an explicit functions call on the RHS, which means appending () to the end of the function name, rather than just using the name. The first version of the line below using %&gt;% could be used to take the log of all Brain_Size_Female_Mean values in d, while the second version, using |&gt;, needs to have () appended to the functions calls to work properly.\n\n\nd %&gt;%\n    select(Brain_Size_Female_Mean) %&gt;%\n    log %&gt;%\n    head\n\n## # A tibble: 6 × 1\n##   Brain_Size_Female_Mean\n##                    &lt;dbl&gt;\n## 1                   3.98\n## 2                  NA   \n## 3                   3.94\n## 4                   3.87\n## 5                   3.89\n## 6                   3.87\n\nd |&gt;\n    select(Brain_Size_Female_Mean) |&gt;\n    log() |&gt;\n    head()\n\n## # A tibble: 6 × 1\n##   Brain_Size_Female_Mean\n##                    &lt;dbl&gt;\n## 1                   3.98\n## 2                  NA   \n## 3                   3.94\n## 4                   3.87\n## 5                   3.89\n## 6                   3.87",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#pivoting-data-between-long-and-wide-formats",
    "href": "10-module.html#pivoting-data-between-long-and-wide-formats",
    "title": "10  Data Wrangling",
    "section": "10.8 Pivoting Data between Long and Wide Formats",
    "text": "10.8 Pivoting Data between Long and Wide Formats",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#useful-related-packages",
    "href": "10-module.html#useful-related-packages",
    "title": "10  Data Wrangling",
    "section": "10.9 Useful Related Packages",
    "text": "10.9 Useful Related Packages\nThe {tidylog} package provides wrappers around many {dplyr} and {tidyr} package functions that provide logged feedback on the outcome of those functions, which can be useful for understanding the effects of whatever data wrangling processes we run. For example, running filter() will provide feedback on the number of runs removed and kept as part of a filtering operation…\n\nlibrary(tidylog)\n\n## \n## Attaching package: 'tidylog'\n\n\n## The following objects are masked from 'package:dplyr':\n## \n##     add_count, add_tally, anti_join, count, distinct, distinct_all,\n##     distinct_at, distinct_if, filter, filter_all, filter_at, filter_if,\n##     full_join, group_by, group_by_all, group_by_at, group_by_if,\n##     inner_join, left_join, mutate, mutate_all, mutate_at, mutate_if,\n##     relocate, rename, rename_all, rename_at, rename_if, rename_with,\n##     right_join, sample_frac, sample_n, select, select_all, select_at,\n##     select_if, semi_join, slice, slice_head, slice_max, slice_min,\n##     slice_sample, slice_tail, summarise, summarise_all, summarise_at,\n##     summarise_if, summarize, summarize_all, summarize_at, summarize_if,\n##     tally, top_frac, top_n, transmute, transmute_all, transmute_at,\n##     transmute_if, ungroup\n\n\n## The following objects are masked from 'package:tidyr':\n## \n##     drop_na, fill, gather, pivot_longer, pivot_wider, replace_na,\n##     separate_wider_delim, separate_wider_position,\n##     separate_wider_regex, spread, uncount\n\n\n## The following object is masked from 'package:stats':\n## \n##     filter\n\n# compare...\ns &lt;- dplyr::filter(d, Family == \"Hominidae\" & Mass_Dimorphism &gt; 2)\n# to...\ns &lt;- filter(d, Family == \"Hominidae\" & Mass_Dimorphism &gt; 2)\n\n## filter: removed 210 rows (99%), 3 rows remaining\n\n\nSimilarly, running sample_n() will give us logged output on that random record sampling process…\n\n# compare...\ns &lt;- dplyr::sample_n(d, size = 100, replace = FALSE)\n# to...\ns &lt;- sample_n(d, size = 100, replace = FALSE)\n\n## sample_n: removed 113 rows (53%), 100 rows remaining\n\ndetach(package:tidylog)\n\n\nNOTE: Loading in {tidylog} function will conflict with or “mask” corresponding function names from {dplyr} and {tidyr}. In the examples above, then, to run the {tidyverse} versions of filter() and select_n(), it was necessary to use the :: notation to specifically call the {dplyr} version of the functions directly. The {tidylog} versions of these functions run a bit more slowly, so if speed is important, you may not want to use {tidylog}, you may want to call the {dplyr} or {tidyr} functions explicitly after loading {tidylog}, or you may want to simply call the {tidylog} version of a function explicitly.\n\n\ns &lt;- tidylog::filter(d, Family == \"Hominidae\" & Mass_Dimorphism &gt; 2)\n\n## filter: removed 210 rows (99%), 3 rows remaining\n\n\n\n# | include: false\ndetach(package:magrittr)\ndetach(package:tidyverse)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "10-module.html#concept-review",
    "href": "10-module.html#concept-review",
    "title": "10  Data Wrangling",
    "section": "Concept Review",
    "text": "Concept Review\n\nUsing {dplyr}: select(), filter(), arrange(), rename(), mutate(), summarise(), group_by()\nChaining and piping with %&gt;% and other pipe operators\nJoining tables: inner_join(), left_join(), right_join(), full_join()\nUsing the {tidylog} package",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "11-module.html",
    "href": "11-module.html",
    "title": "11  Functions and Flow Control",
    "section": "",
    "text": "11.1 Objectives",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#objectives",
    "href": "11-module.html#objectives",
    "title": "11  Functions and Flow Control",
    "section": "",
    "text": "The objective of this module to become familiar with how some additional basic programming concepts are implemented in R.",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#preliminaries",
    "href": "11-module.html#preliminaries",
    "title": "11  Functions and Flow Control",
    "section": "11.2 Preliminaries",
    "text": "11.2 Preliminaries\n\nInstall this package in R: {sjmisc}\nLoad {tidyverse}",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#functions",
    "href": "11-module.html#functions",
    "title": "11  Functions and Flow Control",
    "section": "11.3 Functions",
    "text": "11.3 Functions\nOne of the strengths of using a programming language like R for data manipulation and analysis is that we can write our own functions to things we need to do in a particular way, e.g., to create a custom analysis or visualization. In Module 04 we practiced writing our own simple function, and we will revisit that here.\nRecall that the general format for a function is as follows:\nfunction_name &lt;- function(&lt;argument list&gt;) {\n  &lt;function body&gt;\n}\nFunctions that we define ourselves can have multiple arguments, and each argument can have a default value. Arguments are separated by commas and default values are specified in the list of arguments. For example, suppose we wanted to make a function that added a user-specified prefix to every entry in a particular named variable in a data frame, we could write the following:\n\nadd_prefix &lt;- function(df, prefix = \"\", variable) {\n    df[[variable]] &lt;- paste0(prefix, df[[variable]])\n    return(df)\n}\n\nmy_data &lt;- data.frame(name = c(\"Ned\", \"Sansa\", \"Cersei\", \"Tyrion\", \"Jon\", \"Daenerys\",\n    \"Aria\", \"Brienne\", \"Rickon\", \"Edmure\", \"Petyr\", \"Jamie\", \"Robert\", \"Stannis\",\n    \"Theon\"), house = c(\"Stark\", \"Stark\", \"Lannister\", \"Lannister\", \"Stark\", \"Targaryen\",\n    \"Stark\", \"Tarth\", \"Stark\", \"Tully\", \"Baelish\", \"Lannister\", \"Baratheon\", \"Baratheon\",\n    \"Greyjoy\"), code = sample(1e+05:999999, 15, replace = FALSE))\n\ndf &lt;- add_prefix(my_data, variable = \"house\")  # uses default prefix\nhead(df)\n\n##       name     house   code\n## 1      Ned     Stark 712333\n## 2    Sansa     Stark 720672\n## 3   Cersei Lannister 744288\n## 4   Tyrion Lannister 553881\n## 5      Jon     Stark 720976\n## 6 Daenerys Targaryen 592669\n\ndf &lt;- add_prefix(my_data, prefix = \"House \", variable = \"house\")\nhead(df)\n\n##       name           house   code\n## 1      Ned     House Stark 712333\n## 2    Sansa     House Stark 720672\n## 3   Cersei House Lannister 744288\n## 4   Tyrion House Lannister 553881\n## 5      Jon     House Stark 720976\n## 6 Daenerys House Targaryen 592669\n\ndf &lt;- add_prefix(my_data, prefix = \"00001-\", variable = \"code\")\nhead(df)\n\n##       name     house         code\n## 1      Ned     Stark 00001-712333\n## 2    Sansa     Stark 00001-720672\n## 3   Cersei Lannister 00001-744288\n## 4   Tyrion Lannister 00001-553881\n## 5      Jon     Stark 00001-720976\n## 6 Daenerys Targaryen 00001-592669\n\n\n\nNOTE: Arguments can be passed to a function in any order, as long as the argument name is included. For example, for the add_prefix() function above, the following are equivalent:\n\n\nhead(add_prefix(df = my_data, variable = \"house\"))\n\n##       name     house   code\n## 1      Ned     Stark 712333\n## 2    Sansa     Stark 720672\n## 3   Cersei Lannister 744288\n## 4   Tyrion Lannister 553881\n## 5      Jon     Stark 720976\n## 6 Daenerys Targaryen 592669\n\n# versus...\nhead(add_prefix(variable = \"house\", df = my_data))\n\n##       name     house   code\n## 1      Ned     Stark 712333\n## 2    Sansa     Stark 720672\n## 3   Cersei Lannister 744288\n## 4   Tyrion Lannister 553881\n## 5      Jon     Stark 720976\n## 6 Daenerys Targaryen 592669\n\n\nNote that in the example above, because the argument name prefix was excluded, the default value was used.\nR also uses positional matching to assign values to arguments when argument names are excluded. Note the difference in the results of these lines:\n\nhead(add_prefix(my_data, \"00001-\", \"code\"))\n\n##       name     house         code\n## 1      Ned     Stark 00001-712333\n## 2    Sansa     Stark 00001-720672\n## 3   Cersei Lannister 00001-744288\n## 4   Tyrion Lannister 00001-553881\n## 5      Jon     Stark 00001-720976\n## 6 Daenerys Targaryen 00001-592669\n\n# versus...\nhead(add_prefix(my_data, \"House \", \"house\"))\n\n##       name           house   code\n## 1      Ned     House Stark 712333\n## 2    Sansa     House Stark 720672\n## 3   Cersei House Lannister 744288\n## 4   Tyrion House Lannister 553881\n## 5      Jon     House Stark 720976\n## 6 Daenerys House Targaryen 592669\n\n# versus...\nhead(add_prefix(my_data, \"\", \"house\"))\n\n##       name     house   code\n## 1      Ned     Stark 712333\n## 2    Sansa     Stark 720672\n## 3   Cersei Lannister 744288\n## 4   Tyrion Lannister 553881\n## 5      Jon     Stark 720976\n## 6 Daenerys Targaryen 592669\n\n\nIf we try to run the line below, however, it throws an error because too few (unnamed) arguments are passed to the function for it to be able to disambiguate them:\n\nhead(add_prefix(my_data, \"00001-\"))\n\nUnless otherwise specified, functions return the result of the last expression evaluated in the function body. However, is good programming practice to explicitly specify the object or value you want returned from the function with return(&lt;value&gt;) or return(&lt;object&gt;).",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#conditional-expressions",
    "href": "11-module.html#conditional-expressions",
    "title": "11  Functions and Flow Control",
    "section": "11.4 Conditional Expressions",
    "text": "11.4 Conditional Expressions\nConditional expressions are a basic feature of any programming language. They are used for “flow control”, i.e., to structure what your program does when. The most common conditional expression is the “if… else…” statement, which is used to direct flow of a program between two paths. The general form is:\nif (&lt;test&gt;) {\n  &lt;action 1&gt;\n} else {\n  &lt;action 2&gt;\n}\nAs an example…\n\ni &lt;- TRUE\n\nif (i == TRUE) {\n    print(\"Yes\")\n} else {\n    print(\"No\")\n}\n\n## [1] \"Yes\"\n\ni &lt;- FALSE\n\nif (i == TRUE) {\n    print(\"Yes\")\n} else {\n    print(\"No\")\n}\n\n## [1] \"No\"\n\n\nA related form is the ifelse() function, which has three arguments: the test condition, the value to be returned or expression to be run if the test condition is true, and the value to be returned or expression to be run if the test condition is false. Unlike the “if… else…” formulation, the ifelse() function can work on a vector, too, and returns a vector.\n\ni &lt;- 9\nifelse(i &lt;= 10, \"Yes\", \"No\")\n\n## [1] \"Yes\"\n\ni &lt;- 11\nifelse(i &lt;= 10, \"Yes\", \"No\")\n\n## [1] \"No\"\n\ni &lt;- c(9, 10, 11)\nifelse(i &lt;= 10, \"Yes\", \"No\")\n\n## [1] \"Yes\" \"Yes\" \"No\"\n\n\n\nNOTE: There is also a {dplyr} version of the “if… else…” conditional: if_else(). I tend to use this one much more than the {base} R version.\n\nThe function case_when() is the equivalent of mixing several “if… else…” statements.\n\ni &lt;- 1:10\noutput &lt;- case_when(i &lt;= 3 ~ \"small\", i &lt;= 7 ~ \"medium\", i &lt;= 10 ~ \"large\")\noutput\n\n##  [1] \"small\"  \"small\"  \"small\"  \"medium\" \"medium\" \"medium\" \"medium\" \"large\" \n##  [9] \"large\"  \"large\"\n\n\nFor conditional statements, there are two additional functions that are often useful: any() and all(). The any() function takes a vector of logical values and returns TRUE if any of the elements is TRUE, while the all() function takes a vector of logical values and returns TRUE if all elements are TRUE.\n\ni &lt;- c(9, 10, 11)\nany(i &lt;= 10)\n\n## [1] TRUE\n\nall(i &lt;= 10)\n\n## [1] FALSE",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#relational-operators",
    "href": "11-module.html#relational-operators",
    "title": "11  Functions and Flow Control",
    "section": "11.5 Relational Operators",
    "text": "11.5 Relational Operators\nThe following relational operators are often used in conditional expressions:\n\nless than, greater than: &lt;, &gt;\nless than or equal to, greater than or equal to: &lt;=, &gt;=\nequal to: == NOTE: This uses a double equal sign!\nnot equal to: !=",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#logical-and-other-operators",
    "href": "11-module.html#logical-and-other-operators",
    "title": "11  Functions and Flow Control",
    "section": "11.6 Logical and Other Operators",
    "text": "11.6 Logical and Other Operators\nThe following additional operators are also useful and important:\n\n!: logical NOT Note that this operator can be applied to values and to functions\n&: element-wise logical AND (applies to element in a vector)\n&&: logical AND (applies to single conditions or first element in vector)\n|: element-wise logical OR (applies to element in a vector)\n||: logical OR (applies to single conditions or first element in vector)\n%in%: tests for membership in a vector\nthe {sjmisc} package adds a “not in” operator to test for membership in a vector: %nin%\n\nExamples:\n\ni &lt;- c(9, 10, 11)\n!any(i &lt;= 10)  # logical NOT\n\n## [1] FALSE\n\n!all(i &lt;= 10)  # logical NOT\n\n## [1] TRUE\n\n\n\ni &lt;- 1:20\ni &lt; 12 & (i%%3) == 0  # element-wise logical AND\n\n##  [1] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\ni[1] &lt; 12 && (i[1]%%3) == 0  # logical AND\n\n## [1] FALSE\n\n\n\ni &gt; 10 | (i%%2) == 0  # element-wise logical OR\n\n##  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE\n## [13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n\n\ni[1] &gt; 10 || (i[1]%%2) == 0  # logical OR\n\n## [1] FALSE\n\n\n\na &lt;- c(\"There\", \"is\", \"grandeur\", \"in\", \"this\", \"view\", \"of\", \"life\")\nb &lt;- \"grandeur\"\nb %in% a  # membership\n\n## [1] TRUE\n\nb &lt;- c(\"selection\", \"life\")\nb %in% a\n\n## [1] FALSE  TRUE\n\n\n\nlibrary(sjmisc)\nb %nin% a  # not membership\n\n## [1]  TRUE FALSE\n\ndetach(package:sjmisc)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#iterating-with-loops",
    "href": "11-module.html#iterating-with-loops",
    "title": "11  Functions and Flow Control",
    "section": "11.7 Iterating with Loops",
    "text": "11.7 Iterating with Loops\n\nfor() Loops\nWhen we want to execute a particular piece of code multiple times, for example to iterate over a set of values or to apply the same function to a set of elements in a vector, one way (but not the only way!) to do this is with a loop. There are several different constructions we can use for looping, one of the most common of which is a for() loop. The basic contruction for a for() loop is:\nfor (&lt;index&gt; in &lt;range&gt;){\n  &lt;code to execute&gt;\n}\nThe following examples print out each element in a vector, v:\n\nv &lt;- seq(from = 100, to = 120, by = 2)\nfor (i in 1:length(v)) {\n    # here, we are looping over the indices of v\n    print(v[i])\n}\n\n## [1] 100\n## [1] 102\n## [1] 104\n## [1] 106\n## [1] 108\n## [1] 110\n## [1] 112\n## [1] 114\n## [1] 116\n## [1] 118\n## [1] 120\n\nfor (i in seq_along(v)) {\n    # seq_along() also loops over the indices of v\n    print(v[i])\n}\n\n## [1] 100\n## [1] 102\n## [1] 104\n## [1] 106\n## [1] 108\n## [1] 110\n## [1] 112\n## [1] 114\n## [1] 116\n## [1] 118\n## [1] 120\n\nfor (i in v) {\n    # here we loop over the elements of v\n    print(i)\n}\n\n## [1] 100\n## [1] 102\n## [1] 104\n## [1] 106\n## [1] 108\n## [1] 110\n## [1] 112\n## [1] 114\n## [1] 116\n## [1] 118\n## [1] 120\n\n\nIt is good form and improves efficiency if we allocate memory to whatever output we may want to generate inside of a loop beforehand. For example, if we want to use a loop to calculate the median() across all Platyrrhine primate genera for the female brain size, female body size, and canine dimorphism variables in the Kamilar and Cooper dataset we have used previously, we could do the following:\n\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-datasets/main/KamilarAndCooperData.csv\"\nd &lt;- read_csv(f, col_names = TRUE)  # creates a 'tibble'\ns &lt;- filter(d, Family %in% c(\"Atelidae\", \"Pitheciidae\", \"Cebidae\")) %&gt;%\n    select(Brain_Size_Female_Mean, Body_mass_female_mean, Canine_Dimorphism)\n# good practice\noutput &lt;- vector(\"double\", ncol(s))\nfor (i in seq_along(s)) {\n    output[[i]] &lt;- median(s[[i]], na.rm = TRUE)\n}\noutput\n\n## [1]   29.0500 1030.0000    1.2955\n\n\nThe following is another very common way to do this, but is less efficient as we are rewriting the object output (and making it one element longer) in every iteration of the loop.\n\n# not so good practice\noutput &lt;- vector()\nfor (i in seq_along(s)) {\n    output &lt;- c(output, median(s[[i]], na.rm = TRUE))\n}\noutput\n\n## [1]   29.0500 1030.0000    1.2955\n\n\n\n\nCHALLENGE\nWrite a for() loop to print out each row in the data frame my_data.\n\n\nShow Code\nfor (i in 1:nrow(my_data)) {\n    print(my_data[i, ])\n}\n\n\nShow Output\n##   name house   code\n## 1  Ned Stark 712333\n##    name house   code\n## 2 Sansa Stark 720672\n##     name     house   code\n## 3 Cersei Lannister 744288\n##     name     house   code\n## 4 Tyrion Lannister 553881\n##   name house   code\n## 5  Jon Stark 720976\n##       name     house   code\n## 6 Daenerys Targaryen 592669\n##   name house   code\n## 7 Aria Stark 676817\n##      name house   code\n## 8 Brienne Tarth 368660\n##     name house   code\n## 9 Rickon Stark 695455\n##      name house   code\n## 10 Edmure Tully 866220\n##     name   house   code\n## 11 Petyr Baelish 829790\n##     name     house   code\n## 12 Jamie Lannister 628456\n##      name     house   code\n## 13 Robert Baratheon 312550\n##       name     house   code\n## 14 Stannis Baratheon 185244\n##     name   house   code\n## 15 Theon Greyjoy 311889\n\n\n\nWrite a for() loop to print out the reverse of each element in the code vector in the data frame my_data.\n\nHINT: Check out the function stri_reverse() from the {stringi} package.\n\n\n\nShow Code\nfor (i in my_data$code) {\n    print(stringi::stri_reverse(i))\n}\n\n\nShow Output\n## [1] \"333217\"\n## [1] \"276027\"\n## [1] \"882447\"\n## [1] \"188355\"\n## [1] \"679027\"\n## [1] \"966295\"\n## [1] \"718676\"\n## [1] \"066863\"\n## [1] \"554596\"\n## [1] \"022668\"\n## [1] \"097928\"\n## [1] \"654826\"\n## [1] \"055213\"\n## [1] \"442581\"\n## [1] \"988113\"\n\n\n\n\n\nwhile() Loops\nAn alternative to using a for() loop for repeating a particular block of code is to use a while() loop. The general construction for a while() loop is:\nwhile (&lt;test expression&gt;) {\n  &lt;code to execute&gt;\n}\nHere, the test expression is evaluated at the start of the loop, and the body of the loop is only entered if the result is TRUE. Once the statements inside the loop are executed, flow returns to the top of the loop to evaluate the test expression again. That process is repeated until the test expression is FALSE, and then the loop is exited and control moves on to subsequent parts of the program.\nAs above, the following example prints out each element in the vector, v:\n\nv &lt;- seq(from = 100, to = 120, by = 2)\ni &lt;- 1\nwhile (i &lt;= length(v)) {\n    print(v[i])\n    i &lt;- i + 1\n}\n\n## [1] 100\n## [1] 102\n## [1] 104\n## [1] 106\n## [1] 108\n## [1] 110\n## [1] 112\n## [1] 114\n## [1] 116\n## [1] 118\n## [1] 120",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#vectorization-and-functionals",
    "href": "11-module.html#vectorization-and-functionals",
    "title": "11  Functions and Flow Control",
    "section": "11.8 Vectorization and Functionals",
    "text": "11.8 Vectorization and Functionals\nIn many cases what we want to do in a loop is apply the same function or operation to each of the elements in a vector, matrix, data frame, list or part thereof… and often we do not actually need a loop to do that. Rather, we can often use what is called a vectorized function, or functional. The function sapply(), and related functions (e.g., apply(), lapply(), mapply(), vapply()) are examples of functionals: they allow us to perform element-wise operations on the entries in a data object.\nThe function sapply() takes two arguments, a data object (a vector, list, or data frame) and a function (FUN=) to apply to its elements. Each element of the data object is passed on to the function, and the result is returned and concatenated into a vector of the same length as the original data object. lapply() is similar except that the output is a list rather than a vector.\nThe following examples replicate what we did with for() loops above. Here, s is a data frame, and the function median() is being applied to each element, i.e., each variable, in that data frame:\n\noutput &lt;- sapply(s, FUN = median, na.rm = TRUE)\n# Here we are passing on an extra argument to the `median()`function, i.e.,\n# `na.rm=TRUE`. This is an example of 'dot-dot-dot' (`...`) being an extra\n# argument of the `sapply()` function where those arguments are 'passed\n# through' as arguments of the `FUN=` function. Basically, this means that we\n# can pass on an arbitrary set and number of arguments into `sapply()` which,\n# in this case, are then being used in the `median()` function.\noutput\n\n## Brain_Size_Female_Mean  Body_mass_female_mean      Canine_Dimorphism \n##                29.0500              1030.0000                 1.2955\n\nclass(output)\n\n## [1] \"numeric\"\n\noutput &lt;- lapply(s, FUN = median, na.rm = TRUE)\noutput\n\n## $Brain_Size_Female_Mean\n## [1] 29.05\n## \n## $Body_mass_female_mean\n## [1] 1030\n## \n## $Canine_Dimorphism\n## [1] 1.2955\n\nclass(output)\n\n## [1] \"list\"\n\n\nThe map() family of functions from the {purrr} package (which is part of the {tidyverse} set of packages) works very similarly to the apply() functions:\n\noutput &lt;- map_dbl(s, .f = median, na.rm = TRUE)\n# note the argument `.f=` instead of `FUN=` `map_dbl()` returns an atomic\n# vector of type 'double'\noutput\n\n## Brain_Size_Female_Mean  Body_mass_female_mean      Canine_Dimorphism \n##                29.0500              1030.0000                 1.2955\n\nclass(output)  # returns a vector, like `sapply()`\n\n## [1] \"numeric\"\n\noutput &lt;- map(s, .f = median, na.rm = TRUE)\n# `map()` returns a list\noutput\n\n## $Brain_Size_Female_Mean\n## [1] 29.05\n## \n## $Body_mass_female_mean\n## [1] 1030\n## \n## $Canine_Dimorphism\n## [1] 1.2955\n\nclass(output)  # returns a list, like `lapply()`\n\n## [1] \"list\"\n\n# `map_dfr()` returns a data frame\noutput &lt;- map_dfr(s, .f = median, na.rm = TRUE)\nclass(output)  # returns a data frame, unlike any of the `apply()` functions\n\n## [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\noutput\n\n## # A tibble: 1 × 3\n##   Brain_Size_Female_Mean Body_mass_female_mean Canine_Dimorphism\n##                    &lt;dbl&gt;                 &lt;dbl&gt;             &lt;dbl&gt;\n## 1                   29.0                  1030              1.30\n\n\n\n# | include: false\ndetach(package:tidyverse)",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "11-module.html#concept-review",
    "href": "11-module.html#concept-review",
    "title": "11  Functions and Flow Control",
    "section": "Concept Review",
    "text": "Concept Review\n\nFunctions: arguments, default values, and “dot-dot-dot” (...)\nConditional expressions: if... else..., ifelse(), if_else(), case_when()\nIterating with loops: for() loops, while() loops\nFunctionals for vectorizing data manipulations: apply() and map() families of function",
    "crumbs": [
      "Part I - Using ***R*** and ***RStudio***",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Functions and Flow Control</span>"
    ]
  },
  {
    "objectID": "exercise-01.html",
    "href": "exercise-01.html",
    "title": "Exercise 01",
    "section": "",
    "text": "Send Emails Programmatically",
    "crumbs": [
      "Exercises",
      "Exercise 01"
    ]
  },
  {
    "objectID": "exercise-01.html#learning-objectives",
    "href": "exercise-01.html#learning-objectives",
    "title": "Exercise 01",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nInstalling and loading/attaching packages\nIntroducing functions and arguments\nIntroducing the pipe (%&gt;% or |&gt;) operator",
    "crumbs": [
      "Exercises",
      "Exercise 01"
    ]
  },
  {
    "objectID": "exercise-01.html#preliminary-steps",
    "href": "exercise-01.html#preliminary-steps",
    "title": "Exercise 01",
    "section": "Preliminary Steps",
    "text": "Preliminary Steps\n\nNOTE: The most challenging thing about the exercise below is to get the authentication correct for accessing an SMTP server to send a message. It is often easy to get the R code to work correctly to contact a servers, but then to have the server not be able to send out an email.\n\nThe example below should allow you to send emails via R using credentials associated with a personal or university Google Gmail account.\nIf you have a Google Gmail account (either a personal one, e.g., &lt;username&gt;@gmail.com, or one associated with UT, e.g., a &lt;username&gt;@utexas.edu account), you should follow the steps below to create an “app password” that you can use for authentication.\n\nNOTE: For this process to work smoothly, you should also have “2-Step Verification” established for the account.\n\n\nLog into your Google account or your UT Gmail account on a web browser, click on your user icon and choose “Manage your Google Account”. For example…\n\n\n\n\n\n\n\n\n\n\n… OR …\n\n\n\n\n\n\n\n\n\n\nSelect “Security”…\n\n\n\n\n\n\n\n\n\n\n… and in the window that opens scroll down to the section on “2-Step Verification” and click the arrow at the right.\n\n\n\n\n\n\n\n\n\nAt this point, you may need to provide information to verify your identity, e.g., by entering a password and/or entering a code you receive from Google. Once you have verified your identity, in the “Security” section, scroll down to the bottom of the page to the section on “App passwords” and click the “App passwords” button.\n\n\n\n\n\n\n\n\n\n\nCreate a “new app specific password” by typing a name for the password in the grey field and then click “Create”. The name does not matter, but here I have called it “R”.\n\n\n\n\n\n\n\n\n\n\nGoogle will now create new 16-digit password that you can use in lieu of your actual Google password when sending emails via Gmail in the {emayili} and {blastula} functions below. Copy and save this code in a safe place!\n\n\n\n\n\n\n\n\n\n\nNOTE: The code will contain spaces between each set of 4 letters… regardless of whether you cut out or include those white spaces, your app password should function just the same.\n\n\nFor ease, then set up a variable to hold your app password…\n\n\npwd_gmail &lt;- \"\"  # enter your app password between the quotation marks",
    "crumbs": [
      "Exercises",
      "Exercise 01"
    ]
  },
  {
    "objectID": "exercise-01.html#sending-an-email-version-1-using-the-emayaili-package",
    "href": "exercise-01.html#sending-an-email-version-1-using-the-emayaili-package",
    "title": "Exercise 01",
    "section": "Sending an Email Version 1: Using the {emayaili} package",
    "text": "Sending an Email Version 1: Using the {emayaili} package\nThe {emayili} package makes sending simple text emails very easy.\n\nStep 1\n\nInstall the {emayili} and {tidyverse} packages.\n\n\nNote that {tidyverse} is only needed if we are going to use the %&gt;% operator (see below).\n\nWe can do this at the R console prompt…\n\ninstall.packages(\"emayili\")\ninstall.packages(\"tidyverse\")\n\n# or to install both packages together...\n\ninstall.packages(c(\"emayili\", \"tidyverse\"))\n\nWe can also do this by using the package manager in RStudio.\n\n\n\n\n\n\n\n\n\n\n\nStep 2\n\nLoad and attach these packages to the search path so you can call functions they contain.\n\n\nlibrary(emayili)\nlibrary(tidyverse)\n\n\nNOTE: We can also use require() in lieu of library().\n\n\n\nStep 3\n\nCreate a new email “message” with the envelope() function from the {emayili} package.\n\nThis function takes several intuitive arguments (from, to, subject, and text) that we can assign values to directly within the function using the = operator.\n\nNOTE: from= should typically be the email address you are sending the from, although many SMTP transactions will accept alternatives, such as just a name. You can also use a vector of email addresses for the to= argument to send a message to more than one recipient. The from and to arguments are required… subject and text are optional.\n\n\nmessage_gmail &lt;- envelope(from = \"anthony.difiore@utexas.edu\", to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {emayili}\", text = \"Hello! This is a plain text message sent to my personal Gmail account from my UT Gmail account.\")\n\n\nNOTE: R essentially ignores all the whitespace (spaces and tab characters) and also allows you to have code continue from one line to the next. It is even pretty forgiving about where you put carriage returns, although it is good form to place them following a comma or before/after a parenthesis or brace.\n\nUsing {tidyverse} syntax, we can set up the same email as follows using the “pipe” operator (%&gt;%):\n\nmessage_gmail &lt;- envelope() %&gt;%\n    from(\"anthony.difiore@utexas.edu\") %&gt;%\n    to(\"anthony.difiore@gmail.com\") %&gt;%\n    subject(\"Sending a message using {emayili}\") %&gt;%\n    text(\"Hello! This is a plain text message sent to my personal Gmail account from my UT Gmail account.\")\n\nAs of R version 4.1, we can alternatively use R’s “native” pipe operator, |&gt;:\n\nmessage_gmail &lt;- envelope() |&gt;\n    from(\"anthony.difiore@utexas.edu\") |&gt;\n    to(\"anthony.difiore@gmail.com\") |&gt;\n    subject(\"Sending a message using {emayili}\") |&gt;\n    text(\"Hello! This is a plain text message sent to my personal Gmail account from my UT Gmail account.\")\n\nThe difference here is that we are first creating an empty “message” object and then “piping” that object using %&gt;% or |&gt; into different helper functions (from(), to(), etc.) to create the details of the message.\n\n\nStep 4\n\nCreate an SMTP (or “Simple Mail Transfer Protocol”) “server” object that includes details about how to send a message, i.e., by specifying the email service’s outgoing server host name, a communications port number to use, and user and password information for authenticating use of the server.\nSMTP transmission can often use any of several standard port numbers (25, 465, 587, and 2525), but 587 and 465 are the most commonly used and support TLS encryption. To use Google’s outgoing email server, set the host to “smtp.gmail.com” and the port to either 465 or 587.\n\n\nNOTE: In the function below, max_times= sets the number of attempts the function will make to send the message. The default (if the argument is omitted) is 5, but I have set it to 1 to exit quickly if the server is not contacted. For username= enter your login ID for the service you are sending from, and for password= either use the variable you set up above to hold the “app password” for your Google account, or enter your password directly here, in quotation marks it, in lieu of the variable gmail_pwd\n\n\nsmtp_gmail &lt;- server(host = \"smtp.gmail.com\", port = 465, max_times = 1, username = \"anthony.difiore@utexas.edu\",\n    password = pwd_gmail)\n\nAlternatively, you can use the gmail() function to create a Gmail server object more easily…\n\nsmtp_gmail &lt;- gmail(username = \"anthony.difiore@utexas.edu\", password = pwd_gmail)\n\n\n\nStep 5\n\nSend your message by passing it as an argument to the server object. To confirm that things are working, send a message to yourself and then CHECK YOUR EMAIL to confirm that you receive the message. A copy of the message should appear in the Sent folder of your email client!\n\n\n# send using Google's Gmail server...\nsmtp_gmail(message_gmail, verbose = TRUE)\n\n\n\nNext Steps?\nUse the RStudio Help tab to browse the documentation associated with the {emayali} package to see how you can customize your message, e.g., by adding cc or bcc arguments, by using a different “reply to” address, by adding attachments, or by encrypting your message.",
    "crumbs": [
      "Exercises",
      "Exercise 01"
    ]
  },
  {
    "objectID": "exercise-01.html#sending-an-email-version-2-using-the-mailr-package",
    "href": "exercise-01.html#sending-an-email-version-2-using-the-mailr-package",
    "title": "Exercise 01",
    "section": "Sending an Email Version 2: Using the {mailR} package",
    "text": "Sending an Email Version 2: Using the {mailR} package\nThe {mailR} package also allows you to easily send simple emails with a single function, send.mail(). Here, we need to specify details about the SMTP server more explicitly than if we use {emayili} (above) or {blastula} (below).\n\nStep 1\n\nInstall the {mailR} package.\n\n\ninstall.packages(\"mailR\")\n\n\n\nStep 2\n\nLoad the {mailR} package.\n\n\nlibrary(mailR)\n\n\n\nStep 3\nCreate and send the email\n\nUsing Google’s Gmail server…\n\nTo use the Gmail server with ports other than 587 (e.g., 465) the argument ssl= must be set to TRUE, which initiates a secure connection and allows required encryption\nIf port 587 is used, either the argument ssl= or tls= should be set to TRUE\n\n\n\nsend.mail(from = \"anthony.difiore@utexas.edu\", to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {mailR}\", body = \"Hello! This is a plain text message sent from a Gmail account.\",\n    smtp = list(host.name = \"smtp.gmail.com\", port = 587, user.name = \"anthony.difiore@utexas.edu\",\n        passwd = pwd_gmail, ssl = TRUE), authenticate = TRUE, send = TRUE)",
    "crumbs": [
      "Exercises",
      "Exercise 01"
    ]
  },
  {
    "objectID": "exercise-01.html#sending-an-email-version-3-using-the-blastula-package",
    "href": "exercise-01.html#sending-an-email-version-3-using-the-blastula-package",
    "title": "Exercise 01",
    "section": "Sending an Email Version 3: Using the {blastula} package",
    "text": "Sending an Email Version 3: Using the {blastula} package\nThe {blastula} package allows us to create and send more complex HTML and formatted emails using markdown. Using it is a bit more complicated (but more flexible) than using the procedures above.\nSimilar to {emayili}, {blastula} provides two main functions: [1] compose_email() for constructing various parts of a message and [2] smtp_send() for specifying email server settings and passing the message to the server to send. However, {blastula} also adds in some helper functions that allow you to store authentication information in either a separate “credentials” text file that is referenced when you run the function to send a message or in your computer’s keychain. {blastula} also stores some default information on commonly-used email providers and services (e.g., on Google’s Gmail server), which may make configuring the server setup easier than using {emayili} or {mailR}.\n\nStep 1\n\nInstall the {blastula} package.\n\n\ninstall.packages(\"blastula\")\n\n\n\nStep 2\n\nLoad the {blastula} package.\n\n\nlibrary(blastula)\n\n\n\nStep 3\n\nCreate a new email “message” with the compose_email() function.\n\nThis function takes several intuitive arguments that we can assign values to directly within the function.\n\n# Compose the message\nmessage &lt;- compose_email(body = \"Hello! This is a simple HTML message.\")\n\n# Preview the message.  This will open the HTML message in a browser window or\n# in the RStudio Viewer tab\nmessage\n\nWe can add some formatting to our email by using the md() function and markdown syntax. Here, we pipe (%&gt;% or |&gt;) the body argument to the md() function to convert it to markdown.\n\n# Compose the message\nmessage &lt;- compose_email(body = \"# Hello!\\nThis is a simple **HTML** message with some *markdown* syntax.\" |&gt;\n    md())\n\n# Preview the message\nmessage\n\nWe can also spice up our email with an image from a local file. Here, I use an image stored in a folder called “img” inside the my current working directory.\n\n# Create text as html\ntext &lt;- \"# Hello!\\nThis is a simple **HTML** message with some *markdown* syntax... and a cool picture!\"\n\n# Create image as html\nimage &lt;- add_image(file = \"img/batnet.jpg\", width = 300, align = \"center\")\n\n# Compose the message\nmessage &lt;- compose_email(body = c(text, image) |&gt;\n    md())\n\n# Preview the message\nmessage\n\n\n\nStep 4\n\nCreate a credentials file.\n\nThe following code block will create a text file (in JSON format) in the current working directory that contains default information for your outgoing mail server, e.g., Google’s Gmail server (host = \"smtp.gmail.com\"), along with your email address and your password. When you run the following lines of code, you will be asked to enter your password, which will then be stored in the credentials file. For a Gmail account, you can use the app password you created above.\n\nNOTE: Be aware that if you create a credentials file like this, your password will be stored, unencrypted, in the file you create!\n\n\n# credentials file for a Gmail account\ncreate_smtp_creds_file(file = \"my_gmail_creds.txt\", user = \"anthony.difiore@utexas.edu\",\n    provider = \"gmail\")\n\n\nNOTE: If you omit the provider= argument, you should then pass the host=, port=, and use_ssl= arguments yourself to the create_smtp_creds_file() function. The use_ssl= argument allows the use of STARTTLS, which initiates secured (encrypted) TLS or SSL connection, which many email servers require.\n\n\n\nStep 5\n\nSend the message via STMP using a credentials file.\n\n\n# send using Google's servers...\nsmtp_send(email = message, from = \"anthony.difiore@utexas.edu\", to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {blastula} and a credentials file\", credentials = creds_file(file = \"my_gmail_creds.txt\"))\n\n\n\nStep 6\n\nWe could also send the message by specifying our credentials manually within the smtp_send() function.\n\nThe following will prompt us for our password to send the message:\n\n# send using Google's servers...\nmessage |&gt;\n    smtp_send(from = \"anthony.difiore@utexas.edu\", to = \"anthony.difiore@gmail.com\",\n        subject = \"Sending a message using {blastula} and entering credentials manually\",\n        credentials = creds(user = \"anthony.difiore@utexas.edu\", provider = \"gmail\"))",
    "crumbs": [
      "Exercises",
      "Exercise 01"
    ]
  },
  {
    "objectID": "exercise-01.html#sending-an-email-version-4-using-the-sendmailr-package",
    "href": "exercise-01.html#sending-an-email-version-4-using-the-sendmailr-package",
    "title": "Exercise 01",
    "section": "Sending an Email Version 4: Using the {sendmailR} package",
    "text": "Sending an Email Version 4: Using the {sendmailR} package\nThe {sendmailR} is yet another that you can use to send emails from R.\n\ninstall.packages(\"sendmailR\")\nlibrary(sendmailR)\nsendmail(\n  from = \"anthony.difiore@utexas.edu\", \n  to = \"anthony.difiore@gmail.com\", \n  subject = \"Sending a message using {sendmailR}\", \n  msg = \"Hello! This is a plain text message sent to my personal Gmail account from my UT Gmail account.\", \n  engine = \"curl\", \n  engineopts = list(username = \"anthony.difiore@utexas.edu\", password = pwd_gmail), \n  control = list(smtpServer=\"smtp://smtp.gmail.com\", smtpPortSMTP = 587) \n  # can also include the port as part of the smtpServer argument...\n  # e.g., `control = list(smtpServer=\"smtp://smtp.gmail.com:587\")`\n)\n\n\nNext Steps?\nAgain, use the RStudio Help tab to browse the documentation associated with the {blastula} package to see how you can customize your message, e.g., with attachments.\n\n\nEven More Next Steps?\nFinally, it is a bit more complicated, but note that we can also use the {keyring} package along with {blastula} to set up a credentials “key” in our computer’s keychain and refer to that to specify our credentials for sending a message. When you create the keys, you will be asked to provide your password.\n\ninstall.packages(\"keyring\")\n\n\nlibrary(keyring)\n\n\n# create a Gmail key with a user-specified name, stored with the `id=` argument\ncreate_smtp_creds_key(id = \"my_gmail_key\", user = \"anthony.difiore@utexas.edu\", provider = \"gmail\",\n    overwrite = TRUE  # this argument is only needed if you have an existing key\n)\n\n\n# View all keys\nview_credential_keys()\n\n\n# send a message with credentials from a keychain using Google's servers...\nmessage |&gt;\n    smtp_send(from = \"anthony.difiore@utexas.edu\", to = \"anthony.difiore@gmail.com\",\n        subject = \"Sending a message using {blastula} and credentials from a keychain\",\n        credentials = creds_key(id = \"my_gmail_key\"))",
    "crumbs": [
      "Exercises",
      "Exercise 01"
    ]
  },
  {
    "objectID": "exercise-01.html#clean-up-steps",
    "href": "exercise-01.html#clean-up-steps",
    "title": "Exercise 01",
    "section": "Clean-Up Steps",
    "text": "Clean-Up Steps\n\n# delete all keys\ndelete_all_credential_keys()",
    "crumbs": [
      "Exercises",
      "Exercise 01"
    ]
  },
  {
    "objectID": "exercise-02.html",
    "href": "exercise-02.html",
    "title": "Exercise 02",
    "section": "",
    "text": "Practice Reproducible Research Workflows",
    "crumbs": [
      "Exercises",
      "Exercise 02"
    ]
  },
  {
    "objectID": "exercise-02.html#learning-objectives",
    "href": "exercise-02.html#learning-objectives",
    "title": "Exercise 02",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nIntegrating an RStudio project, a local git repository, and a GitHub remote repository",
    "crumbs": [
      "Exercises",
      "Exercise 02"
    ]
  },
  {
    "objectID": "exercise-02.html#task-1-begin-with-a-remote-repo",
    "href": "exercise-02.html#task-1-begin-with-a-remote-repo",
    "title": "Exercise 02",
    "section": "Task 1: Begin with a remote repo…",
    "text": "Task 1: Begin with a remote repo…\nFollow the instructions outlined as Method 1 in Module 6 to do the following:\n\nStep 1\n\nSet up a new GitHub repo in your GitHub workspace named “exercise-02a”.\n\n\n\n\n\n\n\n\n\n\n\n\nStep 2\n\nAdd me as a collaborator on the repo by going to “Settings”, choosing “Collaborators”, then “Add People”, and searching for my GitHub username (“difiore”).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 3\n\nClone your repo to your local computer.\n\n\n\nStep 4\n\nCreate an new RMarkdown or Quarto document locally with notes you take in class this week - maybe call it “notes.qmd” or “notes.Rmd”? - including at least some expository text written in Markdown and at least one R code block. If you make a “.qmd” document, I recommend unchecking “Use visual markdown editor”, though that is your choice.\n\n\n\n\n\n\n\n\n\n\n… OR …\n\n\n\n\n\n\n\n\n\n\n\nStep 5\n\nUse Render (for “.qmd”) or Knit (for “.Rmd”) to publish your document as HTML.\n\n\n\n\n\n\n\n\n\n\n… OR …\n\n\n\n\n\n\n\n\n\n\n\nStep 6\n\nStage (or “add”) and “commit” the changes to your repo locally and then “push” those up to GitHub.\n\n\n\nStep 7\n\nVisit your repo on GitHub to confirm that you have done the above steps successfully.\n\n\n\nStep 8\n\nSubmit the URL for your repo in Canvas",
    "crumbs": [
      "Exercises",
      "Exercise 02"
    ]
  },
  {
    "objectID": "exercise-02.html#task-2-begin-with-a-local-repo",
    "href": "exercise-02.html#task-2-begin-with-a-local-repo",
    "title": "Exercise 02",
    "section": "Task 2: Begin with a local repo…",
    "text": "Task 2: Begin with a local repo…\nThis is an alternative workflow to that described above, which also works well. It is outlined in more detail in Module 6 as “Option 3” under Connecting a Local Repo to GitHub.\n\nStep 1\n\nFrom within RStudio, create a new project called “exercise-2b” in a brand new directory also called “exercise-2b”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE Be sure to check the box marked “Create a git repository” pressing the “Create Project” button.\n\n\n\nStep 2\n\nConfigure a GitHub Personal Access Token (PAT) as described in Module 5 and Module 6, making sure that R and RStudio can access your cached credentials.\n\n\n\nStep 3\n\nAs outlined in Module 6 Method 3 Option 1, open your project locally and run usethis::use_github(protocol=\"https\") from the R console within your project’s working directory.\n\n\n\nStep 4\n\nAnswer the question about whether the suggested name for the remote repository is adequate and hit .\n\nThis will create a new remote repository on GitHub, add it as a remote origin/main, and open the GitHub page for the repository in your browser. Switch back to RStudio and continue with Steps 4 to 8 from above.",
    "crumbs": [
      "Exercises",
      "Exercise 02"
    ]
  },
  {
    "objectID": "data-analysis-replication-assignment.html",
    "href": "data-analysis-replication-assignment.html",
    "title": "Data Analysis Replication",
    "section": "",
    "text": "Objectives\nThe objective of this assignment is to use your skills in R to replicate as closely as you can a set of statistical analyses and results reported in a paper of your choosing from the primary literature in your field.",
    "crumbs": [
      "Assignments",
      "Data Analysis Replication"
    ]
  },
  {
    "objectID": "data-analysis-replication-assignment.html#what-to-do",
    "href": "data-analysis-replication-assignment.html#what-to-do",
    "title": "Data Analysis Replication",
    "section": "What to Do",
    "text": "What to Do\nYou will need to create a new RStudio project and a “.qmd” or “.Rmd” report detailing your work on replicating the results presented in the paper you choose. You should start your reanalysis report with a text description of the study and of the specific data and reanalyses you will be doing, to orient your reader. Outline (briefly!) the goal of the original paper, the data set used, and the analyses conducted, then describe which ones you will replicate. You should also demonstrate how you read in any data file(s) and show a few lines of raw data in your output (e.g., using head()).\nNote that I will be looking for you to clearly take your reader through all of the elements of data manipulation, analysis, and, if appropriate, visualization. You should provide as much coding detail, explanation, and output tables as necessary to compare your results to those published!\nYou do not need to replicate ALL of the analyses presented in the paper (although the more the better)! At a bare minimum, you need to repeat at least three analyses, including at least one descriptive statistical analysis, one visualization, and one inferential statistical analysis.\nAs assessment, I will be looking at several different elements of your report and code for this assignment. Below, I outline some of the main things:\n\nOrganization and Logistics\n\nRepo set up on GitHub, named correctly, and shared with me (URL submitted via Canvas)\nPDF of paper included in the top level of the repository\n“.qmd” or “.Rmd” file for your report stored at the top level of the repo\n“.qmd” or “.Rmd” file includes text and code and embedded images/tables from the paper for comparison\n“.qmd” or “.Rmd” file is well organized into subsections, including blocks of explanatory text and R code blocks, plus output\nR code follows a consistent convention with respect to variable and function names and formatting\nFile(s) with original data are included in a directory (folder) called “data” within the repo\nImages from the original paper that are referenced in the report stored in a separate directory called “images” within the repo\n\nIntroduction and Framing\n\nReport includes a short, introductory description of the goal of the original paper, the data used, the analyses conducted, and the conclusions of the original study\nReport outlines the specific data and reanalyses you will be doing\nCode correctly loads all required packages not included in {base} R\n“.qmd” or “.Rmd” file renders and produces HTML output without requiring edits or additional modifications\n“.qmd” or “.Rmd” file includes a dictionary defining variable names used in dataset and R code\nR code successfully reads in data file(s) from the local “data” directory within the repo and shows a few lines of raw data (e.g., using head())\nR code successfully reads in any image file(s) for comparison from within the local “image” directory within the repo\n\nData Analysis/Visualization Replications\n\nFor each of the analyses/visualizations being done…\n\nText of the report clearly takes the reader through all of the elements of data manipulation/analysis/visualization, from raw data to presentation\nReport text is thorough and the R code is well-documented and provides as much explanation and output (tables, figures, etc.) as necessary to understand how the code works\nReport includes side-by-side comparisons of the results of the replication attempts to the published original results\n\n\nDiscussion and Reflection\n\nReport includes a narrative summary about how successful the analysis replications were or were not - i.e., how well do the replicated results compare to those presented in the original paper?\nReport discusses and addresses any challenges encountered… missing data, unclear information about how data were processed in the original publication, etc.\nReport discusses where and possible reasons why the analysis replications might differ from the authors’ original results",
    "crumbs": [
      "Assignments",
      "Data Analysis Replication"
    ]
  },
  {
    "objectID": "data-analysis-replication-assignment.html#what-to-turn-in",
    "href": "data-analysis-replication-assignment.html#what-to-turn-in",
    "title": "Data Analysis Replication",
    "section": "What to Turn In",
    "text": "What to Turn In\nStart a new GitHub repo and R project and using one of the methods outlined in Module 06. You should call it “data-analysis-replication”.\nThe top level of your repo should include a “.qmd” or “.Rmd” file called “data-analysis-replication.Rmd” where you thoroughly describe and run the code for all of the steps in your reanalysis. You can begin with the standard Quarto or RMarkdown document template created by choosing File &gt; New File and the desired file type and then choosing HTML as the “Default Output Format”. Be sure to remove any extraneous code that is included, by default, in the template.\nThe top level of your repository should also include a PDF copy of the paper you are reanalyzing data from.\nWithin the repository, make a “data” directory in which you include any “.csv” or “.xlsx” or similar files that contain the original data for the paper as you either downloaded them as supplementary material or received them from the paper’s author.\nWithin the repository, also make an “images” directory in which you include “.jpeg” or “.png” or similar files that show figures or tabular results from the original paper. In your “.qmd” or “.Rmd” file, near your own results, you will want to embed some of these results from the original paper that you replicate so that I can see them together. You can include code in one of the following formats to reference files in your “images” folder for inclusion in your document. The first alternative uses raw HTML in markdown, outside of a code block; the second and third accomplish the same thing using {knitr} in an {r} code block in either a Quarto (Alternative 2) or RMarkdown (Alternative 3) document.\nAlternative 1: Raw HTML\nThe line below is included in your markdown file, outside of a code block, positioned where you want the image to go.\n&lt;img src=\"images/imagename.filetype\" width=\"###px\"/&gt;\n\n```{r}\n# some code here...\n```\nAlternative 2: Quarto\nHere, the reference to the image is included within a code block.\n```{r}\n#| out-width: ###px\nknitr::include_graphics(\"images/imagename.filetype\")\n```\n… OR …\n```{r}\n#| out-width: \"##%\"\nknitr::include_graphics(\"images/imagename.filetype\")\n```\nAlternative 3: RMarkdown\nAgain, here, the reference to the image is included within a code block.\n```{r echo=FALSE, width=\"###px\"}\nknitr::include_graphics(\"images/imagename.filetype\")\n```\n… OR …\n```{r echo=FALSE, out.width=\"##%\"}\nknitr::include_graphics(\"images/imagename.filetype\")\n```\nIn each case, you would replace imagename.filetype with the name of your file, e.g., “figure-1.jpeg” and ## or ### with a integer number of pixels (e.g., 200px) or a percent of the window width (e.g., “70%”).\nYou shoudl also add the following line to the initial code chunk in your “.qmd” or “.Rmd” file, which tells {knitr} where to output all of the figures associated with your chunks of code as well as where to find any images that you want to include in your “.html” output.\nknitr::opts_chunk$set(fig.path = \"images/\")\nIf you wish, you can download either the file “data-analysis-replication-template.Rmd” or “data-analysis-replication-template.qmd” from https://github.com/difiore/ada-datasets and use that as a starting point for your file.\nBefore turning in this assignment, you should confirm that you can render your document successfully to HTML and make sure that the entire repo is pushed to GitHub repository as well. I should be able to clone your entire repo to my own computer, open the “.qmd” or “.Rmd” file, and render it to produce a nicely formatted “.html” report describing what you did and seeing your results.\nBy the due date for this assignment, you should push all of the above to your GitHub repository for this assignment. Then, in Canvas, please submit the URL for the repository (grabbed from the green CODE button on the repo’s base page) into the assignment submission text field.\n\nTL/DR: I should be able to CLONE your repository and knit your “.qmd” or “.Rmd” file to show all of your completed work for the data analysis replication assignment. Practically speaking, this means that if your code reads in data from external files, such as “.xlsx” or “.csv” files, it should be general enough to work on ANY machine. Thus, you will want to have your code read any data from local files housed within your repository , i.e., in the “data” folder described above. Your repository should also include a PDF of the original paper with the analyses being replicated at the top level of the repo. The structure of your repo thus should look pretty similar to what is shown below:\n\n\nLocal Repository\n\n\n\n\n\n\n\n\n\n\n\nRemote Repository",
    "crumbs": [
      "Assignments",
      "Data Analysis Replication"
    ]
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "List of Packages Used",
    "section": "",
    "text": "By Module",
    "crumbs": [
      "References",
      "List of Packages Used"
    ]
  },
  {
    "objectID": "packages.html#by-module",
    "href": "packages.html#by-module",
    "title": "List of Packages Used",
    "section": "",
    "text": "Module 03\n\n{easypackages}: Sherman (2016)\n\n\n\nModule 05\n\n{usethis}: Wickham and Bryan (2020)\n\n\n\nModule 07\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n\n{ggplot2}: Wickham, Chang, et al. (2020), Wickham (2016)\n{tibble}: Müller and Wickham (2020)\n{tidyr}: Wickham and Henry (2020)\n{readr}: Wickham, Hester, and Francois (2018)\n{purrr}: Henry and Wickham (2020)\n{dplyr}: Wickham, François, Henry, and Müller (2020)\n{stringr}: Wickham (2019a)\n{forcats}: Wickham (2020))\n\n{data.table}: Dowle and Srinivasan (2019)\n\n\n\nModule 08\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{readxl}: Wickham and Bryan (2019)\n{XLConnect}: Mirai Solutions GmbH (2020)\n{gdata}: Warnes et al. (2017)\n{xlsx}: Dragulescu and Arendt (2020)\n{curl}: Ooms (2019)\n{rdrop2}: Ram and Yochum (2017)\n{repmis}: Gandrud (2016)\n{googlesheets4}: Bryan (2020)\n{googledrive}: D’Agostino McGowan and Bryan (2019)\n\n\n\nModule 09\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{magrittr}: Bache and Wickham (2014)\n{tidylog}: Elbers (2020)\n\n\n\nModule 10\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{curl}: Ooms (2019)\n{skimr}: Waring et al. (2020)\n{summarytools}: Comtois (2020)\n{dataMaid}: Petersen and Ekstrøm (2019a), Petersen and Ekstrøm (2019b)\n{psych}: Revelle (2020)\n{pastecs}: Grosjean and Ibanez (2018)\n{Hmisc}: Harrell (2020)\n{ggExtra}: Attali and Baker (2019)\n{car}: Fox, Weisberg, and Price (2020), Fox and Weisberg (2019)\n{GGally}: Schloerke et al. (2020)\n{corrplot}: Wei and Simko (2017a), Wei and Simko (2017b)\n{patchwork}: Pedersen (2019)\n{cowplot}: Wilke (2019)\n{gridExtra}: Auguie (2017)\n\n\n\nModule 11\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{sjmisc}: Lüdecke (2020), Lüdecke (2018)\n\n\n\nModule 12\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim, Kaplan, and Horton (2020), Pruim, Kaplan, and Horton (2017)\n{radiant}: Nijs (2020)\n{sciplot}: Morales, with code developed by the R Development Core Team, and with general advice from the R-help listserv community and especially Duncan Murdoch. (2020)\n\n\n\nModule 13\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{cowplot}: Wilke (2019)\n{manipulate}: Allaire (2014)\n\n\n\nModule 14\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{manipulate}: Allaire (2014)\n{boot}: Canty and Ripley (2020), Davison and Hinkley (1997)\n\n\n\nModule 15\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n\n\n\nModule 16\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{coin}: Hothorn, Winell, Hornik, van de Wiel, and Zeileis (2019), Hothorn, Hornik, van de Wiel, and Zeileis (2006), Hothorn, Hornik, van de Wiel, and Zeileis (2008)\n{jmuOutlier}: Garren (2019)\n{infer}: Bray, Ismay, Chasnovski, Baumer, and Cetinkaya-Rundel (2019)\n\n\n\nModule 17\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{manipulate}: Allaire (2014)\n\n\n\nModule 18\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{manipulate}: Allaire (2014)\n{patchwork}: Pedersen (2019)\n{infer}: Bray et al. (2019)\n{broom}: Robinson and Hayes (2020)\n{lmodel2}: Legendre (2018)\n\n\n\nModule 19\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{car}: Fox et al. (2020), Fox and Weisberg (2019)\n{ggpubr}: @-R-ggpubr\n\n\n\nModule 20\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{car}: Fox et al. (2020), Fox and Weisberg (2019)\n{broom}: Robinson and Hayes (2020)\n{coin}: Hothorn, Winell, et al. (2019), Hothorn et al. (2006), Hothorn et al. (2008)\n{infer}: Bray et al. (2019)\n{permuco}: Frossard and Renaud (2019)\n{dunn.test}: Dinno (2017b)\n{conover.test}: Dinno (2017a)\n{effectsize}: Ben-Shachar, Lüdecke, and Makowski (2020a), Ben-Shachar, Lüdecke, and Makowski (2020b)\n\n\n\nModule 21\n\n{jtools}: Long (2020)\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{broom}: Robinson and Hayes (2020)\n{car}: Fox et al. (2020), Fox and Weisberg (2019)\n{gridExtra}: Auguie (2017)\n{effects}: Fox and Hong (2009a), Fox and Hong (2009b)\n\n\n\nModule 22\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{MASS}: Ripley (2019), Venables and Ripley (2002)\n{AICcmodavg}: Mazerolle and portions of code contributed by Dan Linden. (2019)\n{MuMIn}: Bartoń (2020)\n\n\n\nModule 23\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{broom}: Robinson and Hayes (2020)\n{patchwork}: Pedersen (2019)\n{lmtest}: Hothorn, Zeileis, Farebrother, and Cummins (2019), Zeileis and Hothorn (2002)\n\n\n\nModule 24\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{lmtest}: Hothorn, Zeileis, et al. (2019), Zeileis and Hothorn (2002)\n{AICcmodavg}: Mazerolle and portions of code contributed by Dan Linden. (2019)\n{lme4}: Bates, Maechler, Bolker, and Walker (2020), Bates, Mächler, Bolker, and Walker (2015)\n{redres}: Goode, McClernon, Zhao, Zhang, and Huo. (2024)\n{effects}: Fox and Hong (2009a), Fox and Hong (2009b)\n{cowplot}: Wilke (2019)\n{sjPlots}: Lüdecke (2023)\n{MuMIn}: Bartoń (2020)\n{glmmML}: Broström (2020)\n{MASS}: Ripley (2019)\n\n\n\nModule 25\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{devtools}: Wickham, Hester, and Chang (2020)\n{usethis}: Wickham and Bryan (2020)\n{roxygen2}: Wickham, Danenberg, Csárdi, and Eugster (2020)\n{withr}: Hester, Müller, Ushey, Wickham, and Chang (2020)\n{manipulate}: Allaire (2014)\n\n\n\nModule 26\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{shiny}: Chang, Cheng, Allaire, Xie, and McPherson (2020)\n{DT}: Xie, Cheng, and Tan (2020)\n\n\n\nModule 27\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{broom}: Robinson and Hayes (2020)\n{reticulate}: Ushey, Allaire, and Tang (2020)",
    "crumbs": [
      "References",
      "List of Packages Used"
    ]
  },
  {
    "objectID": "packages.html#in-exercises",
    "href": "packages.html#in-exercises",
    "title": "List of Packages Used",
    "section": "In Exercises",
    "text": "In Exercises\n\n{emayili}: Collier (2021)\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mailR}: Premraj (2021),\n{blastula}: Iannone and Cheng (2020)\n{usethis}: Wickham and Bryan (2020)\n{emo}: Wickham, François, and D’Agostino McGowan (2019)\n{sjmisc}: Lüdecke (2020)\n{huxtable}: Hugh-Jones (2021)\n{cowplot}: Wilke (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{kableExtra}: Zhu (2019)\n{ggpubr}: Kassambara (2020)\n{infer}: Bray et al. (2019)",
    "crumbs": [
      "References",
      "List of Packages Used"
    ]
  },
  {
    "objectID": "packages.html#complete-list",
    "href": "packages.html#complete-list",
    "title": "List of Packages Used",
    "section": "Complete List",
    "text": "Complete List\n\n{AICcmodavg}: Mazerolle and portions of code contributed by Dan Linden. (2019)\n{BBmisc}: Bischl et al. (2017)\n{blastula}: Iannone and Cheng (2020)\n{boot}: Canty and Ripley (2020), Davison and Hinkley (1997)\n{broom}: Robinson and Hayes (2020)\n{car}: Fox et al. (2020), Fox and Weisberg (2019)\n{coin}: Hothorn, Winell, et al. (2019), Hothorn et al. (2006), Hothorn et al. (2008)\n{collape}: Krantz (2020)\n{conover.test}: Dinno (2017a)\n{corrplot}: Wei and Simko (2017a), Wei and Simko (2017b)\n{cowplot}: Wilke (2019)\n{curl}: Ooms (2019)\n{data.table}: Dowle and Srinivasan (2019)\n{dataMaid}: Petersen and Ekstrøm (2019a), Petersen and Ekstrøm (2019b)\n{devtools}: Wickham, Hester, et al. (2020)\n{dplyr}: Wickham, François, et al. (2020)\n{DT}: Xie et al. (2020)\n{dunn.test}: Dinno (2017b)\n{emayili}: Collier (2021)\n{easypackages}: Sherman (2016)\n{effects}: Fox and Hong (2009a), Fox and Hong (2009b)\n{effectsize}: Ben-Shachar et al. (2020a), Ben-Shachar et al. (2020b)\n{emo}: Wickham, François, et al. (2019)\n{forcats}: Wickham (2020)\n{gdata}: Warnes et al. (2017)\n{GGally}: Schloerke et al. (2020)\n{ggExtra}: Attali and Baker (2019)\n{ggplot2}: Wickham, Chang, et al. (2020), Wickham (2016)\n{ggpubr}: Kassambara (2020)\n{glmmML}: Broström (2020)\n{googledrive}: D’Agostino McGowan and Bryan (2019)\n{googlesheets4}: Bryan (2020)\n{gridExtra}: Auguie (2017)\n{Hmisc}: Harrell (2020)\n{huxtable}: Hugh-Jones (2021)\n{infer}: Bray et al. (2019)\n{jmuOutlier}: Garren (2019)\n{jtools}: Long (2020)\n{kableExtra}: Zhu (2019)\n{knitr}: Xie (2020), Xie (2014), Xie (2015)\n{lme4}: Bates et al. (2020), Bates et al. (2015)\n{lmodel2}: Legendre (2018)\n{lmtest}: Hothorn, Zeileis, et al. (2019), Zeileis and Hothorn (2002)\n{magrittr}: Bache and Wickham (2014)\n{manipulate}: Allaire (2014)\n{MASS}: Ripley (2019), Venables and Ripley (2002)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{MuMIn}: Bartoń (2020)\n{pastecs}: Grosjean and Ibanez (2018)\n{patchwork}: Pedersen (2019)\n{permuco}: Frossard and Renaud (2019)\n{psych}: Revelle (2020)\n{purrr}: Henry and Wickham (2020)\n{radiant}: Nijs (2020)\n{rdrop2}: Ram and Yochum (2017)\n{readr}: Wickham et al. (2018)\n{redres}: Goode et al. (2024)\n{readxl}: Wickham and Bryan (2019)\n{repmis}: Gandrud (2016)\n{reticulate}: Ushey et al. (2020)\n{roxygen2}: Wickham, Danenberg, et al. (2020)\n{scales}: Wickham and Seidel (2019)\n{sciplot}: Morales et al. (2020)\n{shiny}: Chang et al. (2020)\n{sjmisc}: Lüdecke (2020), Lüdecke (2018)\n{skimr}: Waring et al. (2020)\n{sjPlot}: Lüdecke (2023)\n{stringr}: Wickham (2019a)\n{summarytools}: Comtois (2020)\n{tibble}: Müller and Wickham (2020)\n{tictoc}: Izrailev (2014)\n{tidyr}: Wickham and Henry (2020)\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{usethis}: Wickham and Bryan (2020)\n{withr}: Hester et al. (2020)\n{XLConnect}: Mirai Solutions GmbH (2020)\n{xlsx}: Dragulescu and Arendt (2020)\n\n\n\n\n\n\n\nAllaire J. (2014). manipulate: Interactive plots for RStudio. https://CRAN.R-project.org/package=manipulate\n\n\nAttali D, and Baker C. (2019). ggExtra: Add marginal histograms to ’ggplot2’, and more ’ggplot2’ enhancements. https://CRAN.R-project.org/package=ggExtra\n\n\nAuguie B. (2017). gridExtra: Miscellaneous functions for \"grid\" graphics. https://CRAN.R-project.org/package=gridExtra\n\n\nBache SM, and Wickham H. (2014). magrittr: A forward-pipe operator for R. https://CRAN.R-project.org/package=magrittr\n\n\nBartoń K. (2020). MuMIn: Multi-model inference. https://CRAN.R-project.org/package=MuMIn\n\n\nBates D, Mächler M, Bolker B, and Walker S. (2015). Fitting linear mixed-effects models using lme4. Journal of Statistical Software 67: 1–48. https://doi.org/10.18637/jss.v067.i01\n\n\nBates D, Maechler M, Bolker B, and Walker S. (2020). lme4: Linear mixed-effects models using ’eigen’ and S4. https://CRAN.R-project.org/package=lme4\n\n\nBen-Shachar MS, Lüdecke D, and Makowski D. (2020a). effectsize: Estimation of effect size indices and standardized parameters. https://CRAN.R-project.org/package=effectsize\n\n\nBen-Shachar MS, Lüdecke D, and Makowski D. (2020b). effectsize: Estimation of effect size indices and standardized parameters. Journal of Open Source Software 5: 2815. https://doi.org/10.21105/joss.02815\n\n\nBischl B, Lang M, Bossek J, Horn D, Richter J, and Surmann D. (2017). BBmisc: Miscellaneous helper functions for B. Bischl. https://CRAN.R-project.org/package=BBmisc\n\n\nBray A, Ismay C, Chasnovski E, Baumer B, and Cetinkaya-Rundel M. (2019). infer: Tidy statistical inference. https://CRAN.R-project.org/package=infer\n\n\nBroström G. (2020). glmmML: Generalized linear models with clustering. https://CRAN.R-project.org/package=glmmML\n\n\nBryan J. (2020). googlesheets4: Access Google Sheets using the Sheets API V4. https://CRAN.R-project.org/package=googlesheets4\n\n\nCanty A, and Ripley B. (2020). boot: Bootstrap functions (originally by Angelo Canty for S). https://CRAN.R-project.org/package=boot\n\n\nChang W, Cheng J, Allaire J, Xie Y, and McPherson J. (2020). shiny: Web application framework for R. https://CRAN.R-project.org/package=shiny\n\n\nCollier AB. (2021). Emayili: Send email messages. https://CRAN.R-project.org/package=emayili\n\n\nComtois D. (2020). summarytools: Tools to quickly and neatly summarize data. https://CRAN.R-project.org/package=summarytools\n\n\nD’Agostino McGowan L, and Bryan J. (2019). googledrive: An interface to Google Drive. https://CRAN.R-project.org/package=googledrive\n\n\nDavison AC, and Hinkley DV. (1997). Bootstrap Methods and Their Applications. Cambridge: Cambridge University Press. http://statwww.epfl.ch/davison/BMA/\n\n\nDinno A. (2017a). conover.test: Conover-Iman test of multiple comparisons using rank sums. https://CRAN.R-project.org/package=conover.test\n\n\nDinno A. (2017b). dunn.test: Dunn’s test of multiple comparisons using rank sums. https://CRAN.R-project.org/package=dunn.test\n\n\nDowle M, and Srinivasan A. (2019). data.table: Extension of ’data.frame’. https://CRAN.R-project.org/package=data.table\n\n\nDragulescu A, and Arendt C. (2020). xlsx: Read, write, format Excel 2007 and Excel 97/2000/XP/2003 files. https://CRAN.R-project.org/package=xlsx\n\n\nElbers B. (2020). tidylog: Logging for ’dplyr’ and ’tidyr’ functions. https://CRAN.R-project.org/package=tidylog\n\n\nFox J, and Hong J. (2009a). Effect displays in R for multinomial and proportional-odds logit models: Extensions to the effects package. Journal of Statistical Software. https://CRAN.R-project.org/package=effects\n\n\nFox J, and Hong J. (2009b). Effect displays in R for multinomial and proportional-odds logit models: Extensions to the effects package. Journal of Statistical Software 32: 1–24. https://doi.org/10.18637/jss.v032.i01\n\n\nFox J, and Weisberg S. (2019). An R Companion to Applied Regression (Third Edition). Thousand Oaks CA: Sage. https://socialsciences.mcmaster.ca/jfox/Books/Companion/\n\n\nFox J, Weisberg S, and Price B. (2020). car: Companion to applied regression. https://CRAN.R-project.org/package=car\n\n\nFrossard J, and Renaud O. (2019). permuco: Permutation tests for regression, (repeated measures) ANOVA/ANCOVA and comparison of signals. https://CRAN.R-project.org/package=permuco\n\n\nGandrud C. (2016). repmis: Miscellaneous tools for reproducible research. https://CRAN.R-project.org/package=repmis\n\n\nGarren ST. (2019). jmuOutlier: Permutation tests for nonparametric statistics. https://CRAN.R-project.org/package=jmuOutlier\n\n\nGoode K, McClernon K, Zhao J, Zhang Y, and Huo. Y. (2024). Redres: Residuals and diagnostic plots for mixed models. https://github.com/goodekat/redres.git\n\n\nGrosjean P, and Ibanez F. (2018). pastecs: Package for analysis of space-time ecological series. https://CRAN.R-project.org/package=pastecs\n\n\nHarrell FE Jr. (2020). Hmisc: Harrell miscellaneous. https://CRAN.R-project.org/package=Hmisc\n\n\nHenry L, and Wickham H. (2020). purrr: Functional programming tools. https://CRAN.R-project.org/package=purrr\n\n\nHester J, Müller K, Ushey K, Wickham H, and Chang W. (2020). withr: Run code ’with’ temporarily modified global state. https://CRAN.R-project.org/package=withr\n\n\nHothorn T, Hornik K, van de Wiel MA, and Zeileis A. (2006). A Lego system for conditional inference. The American Statistician 60: 257–263. https://doi.org/10.1198/000313006X118430\n\n\nHothorn T, Hornik K, van de Wiel MA, and Zeileis A. (2008). Implementing a class of permutation tests: The coin package. Journal of Statistical Software 28: 1–23. https://doi.org/10.18637/jss.v028.i08\n\n\nHothorn T, Winell H, Hornik K, van de Wiel MA, and Zeileis A. (2019). coin: Conditional inference procedures in a permutation test framework. https://CRAN.R-project.org/package=coin\n\n\nHothorn T, Zeileis A, Farebrother RW, and Cummins C. (2019). lmtest: Testing linear regression models. https://CRAN.R-project.org/package=lmtest\n\n\nHugh-Jones D. (2021). Huxtable: Easily create and style tables for LaTeX, HTML and other formats. https://CRAN.R-project.org/package=huxtable\n\n\nIannone R, and Cheng J. (2020). Blastula: Easily send HTML email messages. https://CRAN.R-project.org/package=blastula\n\n\nIzrailev S. (2014). tictoc: Functions for timing R scripts, as well as implementations of stack and list structures. https://CRAN.R-project.org/package=tictoc\n\n\nKassambara A. (2020). Ggpubr: ggplot2 based publication ready plots. https://rpkgs.datanovia.com/ggpubr/\n\n\nKrantz S. (2020). collapse: Advanced and fast data transformation. https://CRAN.R-project.org/package=collapse\n\n\nLegendre P. (2018). lmodel2: Model II regression. https://CRAN.R-project.org/package=lmodel2\n\n\nLong JA. (2020). jtools: Analysis and presentation of social scientific data. https://CRAN.R-project.org/package=jtools\n\n\nLüdecke D. (2018). sjmisc: Data and variable transformation functions. Journal of Open Source Software 3: 754. https://doi.org/10.21105/joss.00754\n\n\nLüdecke D. (2020). sjmisc: Data and variable transformation functions. https://CRAN.R-project.org/package=sjmisc\n\n\nLüdecke D. (2023). sjPlot: Data visualization for statistics in social science. https://CRAN.R-project.org/package=sjPlot\n\n\nMazerolle MJ, and portions of code contributed by Dan Linden. (2019). AICcmodavg: Model selection and multimodel inference based on (Q)AIC(c). https://CRAN.R-project.org/package=AICcmodavg\n\n\nMirai Solutions GmbH. (2020). XLConnect: Excel connector for R. https://CRAN.R-project.org/package=XLConnect\n\n\nMorales M, with code developed by the R Development Core Team, and with general advice from the R-help listserv community and especially Duncan Murdoch. (2020). sciplot: Scientific graphing functions for factorial designs. https://CRAN.R-project.org/package=sciplot\n\n\nMüller K, and Wickham H. (2020). tibble: Simple data frames. https://CRAN.R-project.org/package=tibble\n\n\nNijs V. (2020). radiant: Business analytics using R and Shiny. https://CRAN.R-project.org/package=radiant\n\n\nOoms J. (2019). curl: A modern and flexible web client for R. https://CRAN.R-project.org/package=curl\n\n\nPedersen TL. (2019). patchwork: The composer of plots. https://CRAN.R-project.org/package=patchwork\n\n\nPetersen AH, and Ekstrøm CT. (2019a). dataMaid: A suite of checks for identification of potential errors in a data frame as part of the data screening process. https://CRAN.R-project.org/package=dataMaid\n\n\nPetersen AH, and Ekstrøm CT. (2019b). dataMaid: Your assistant for documenting supervised data quality screening in R. Journal of Statistical Software 90: 1–38. https://doi.org/10.18637/jss.v090.i06\n\n\nPremraj R. (2021). mailR: A utility to send emails from R. https://CRAN.R-project.org/package=mailR\n\n\nPruim R, Kaplan DT, and Horton NJ. (2017). The mosaic package: Helping students to ’think with data’ using R. The R Journal 9: 77–102. https://journal.r-project.org/archive/2017/RJ-2017-024/index.html\n\n\nPruim R, Kaplan DT, and Horton NJ. (2020). mosaic: Project MOSAIC statistics and mathematics teaching utilities. https://CRAN.R-project.org/package=mosaic\n\n\nRam K, and Yochum C. (2017). rdrop2: Programmatic interface to the ’Dropbox’ API. https://CRAN.R-project.org/package=rdrop2\n\n\nRevelle W. (2020). psych: Procedures for psychological, psychometric, and personality research. https://CRAN.R-project.org/package=psych\n\n\nRipley B. (2019). MASS: Support functions and datasets for Venables and Ripley’s MASS. https://CRAN.R-project.org/package=MASS\n\n\nRobinson D, and Hayes A. (2020). broom: Convert statistical analysis objects into tidy tibbles. https://CRAN.R-project.org/package=broom\n\n\nSchloerke B, Crowley J, Cook D, Briatte F, Marbach M, Thoen E, Elberg A, and Larmarange J. (2020). GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally\n\n\nSherman J. (2016). Easypackages: Easy loading and installing of packages. https://CRAN.R-project.org/package=easypackages\n\n\nUshey K, Allaire J, and Tang Y. (2020). reticulate: Interface to ’python’. https://CRAN.R-project.org/package=reticulate\n\n\nVenables WN, and Ripley BD. (2002). Modern Applied Statistics with S (Fourth Edition). New York: Springer. http://www.stats.ox.ac.uk/pub/MASS4\n\n\nWaring E, Quinn M, McNamara A, Arino de la Rubia E, Zhu H, and Ellis S. (2020). skimr: Compact and flexible summaries of data. https://CRAN.R-project.org/package=skimr\n\n\nWarnes GR, Bolker B, Gorjanc G, Grothendieck G, Korosec A, Lumley T, MacQueen D, Magnusson A, Rogers J, and others. (2017). gdata: Various R programming tools for data manipulation. https://CRAN.R-project.org/package=gdata\n\n\nWei T, and Simko V. (2017a). corrplot: Visualization of a correlation matrix. https://CRAN.R-project.org/package=corrplot\n\n\nWei T, and Simko V. (2017b). R package \"corrplot\": Visualization of a correlation matrix. https://github.com/taiyun/corrplot\n\n\nWickham H. (2016). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org\n\n\nWickham H. (2019a). stringr: Simple, consistent wrappers for common string operations. https://CRAN.R-project.org/package=stringr\n\n\nWickham H. (2019b). tidyverse: Easily install and load the ’tidyverse’. https://CRAN.R-project.org/package=tidyverse\n\n\nWickham H. (2020). forcats: Tools for working with categorical variables (factors). https://CRAN.R-project.org/package=forcats\n\n\nWickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, and Yutani H. (2019). Welcome to the tidyverse. Journal of Open Source Software 4: 1686. https://doi.org/10.21105/joss.01686\n\n\nWickham H, and Bryan J. (2019). readxl: Read Excel files. https://CRAN.R-project.org/package=readxl\n\n\nWickham H, and Bryan J. (2020). usethis: Automate package and project setup. https://CRAN.R-project.org/package=usethis\n\n\nWickham H, Chang W, Henry L, Pedersen TL, Takahashi K, Wilke C, Woo K, Yutani H, and Dunnington D. (2020). ggplot2: Create elegant data visualisations using the grammar of graphics. https://CRAN.R-project.org/package=ggplot2\n\n\nWickham H, Danenberg P, Csárdi G, and Eugster M. (2020). roxygen2: In-line documentation for R. https://CRAN.R-project.org/package=roxygen2\n\n\nWickham H, François R, and D’Agostino McGowan L. (2019). emo: Easily insert ’emoji’. https://github.com/hadley/emo\n\n\nWickham H, François R, Henry L, and Müller K. (2020). dplyr: A grammar of data manipulation. https://CRAN.R-project.org/package=dplyr\n\n\nWickham H, and Henry L. (2020). tidyr: Tidy messy data. https://CRAN.R-project.org/package=tidyr\n\n\nWickham H, Hester J, and Chang W. (2020). devtools: Tools to make developing R packages easier. https://CRAN.R-project.org/package=devtools\n\n\nWickham H, Hester J, and Francois R. (2018). readr: Read rectangular text data. https://CRAN.R-project.org/package=readr\n\n\nWickham H, and Seidel D. (2019). scales: Scale functions for visualization. https://CRAN.R-project.org/package=scales\n\n\nWilke CO. (2019). cowplot: Streamlined plot theme and plot annotations for ’ggplot2’. https://CRAN.R-project.org/package=cowplot\n\n\nXie Y. (2014). knitr: A comprehensive tool for reproducible research in R. In V Stodden, F Leisch, and RD Peng (Eds.), Implementing reproducible computational research. Chapman; Hall/CRC. http://www.crcpress.com/product/isbn/9781466561595\n\n\nXie Y. (2015). Dynamic Documents with R and knitr (Second Edition). Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/\n\n\nXie Y. (2020). knitr: A general-purpose package for dynamic report generation in R. https://CRAN.R-project.org/package=knitr\n\n\nXie Y, Cheng J, and Tan X. (2020). DT: A wrapper of the JavaScript library ’DataTables’. https://CRAN.R-project.org/package=DT\n\n\nZeileis A, and Hothorn T. (2002). Diagnostic checking in regression relationships. R News 2: 7–10. https://CRAN.R-project.org/doc/Rnews/\n\n\nZhu H. (2019). kableExtra: Construct complex table with ’kable’ and pipe syntax. https://CRAN.R-project.org/package=kableExtra",
    "crumbs": [
      "References",
      "List of Packages Used"
    ]
  }
]